{
	"info": {
		"_postman_id": "840836bb-b78f-4767-9920-4e532cdcf27c",
		"name": "Strata GraphQL Test",
		"description": "Strata Graph developer testing collection.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18171977"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Lightweight Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lightweight Health Check - Response Time\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(4000);",
									"})",
									"",
									"pm.test(\"Lightweight Health Check - Status Code\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Lightweight Health Check - Data Structure\", () => {",
									"    const { data: { HealthCheck: { LightWeight }}} = pm.response.json();",
									"    pm.expect(LightWeight).to.have.any.keys([\"runtime\", \"env\", \"version\", \"commit\"]);",
									"    pm.expect(LightWeight.env).to.have.any.keys([\"apigeeBaseUrl\", \"apigeeClientKey\", \"apigeeTokenUrl\", \"ccnBaseUrl\", \"cdpUrl\", \"investBaseUrl\", \"investCertPath\", \"investClientId\", \"env\", \"orionBaseUrl\", \"orionClientId\", \"orionUsername\", \"pegaClientId\", \"pegaBaseUrl\", \"secretsManagerName\"]);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query Query {\n  HealthCheck {\n    LightWeight {\n      runtime\n      env {\n        apigeeBaseUrl\n        apigeeClientKey\n        apigeeTokenUrl\n        ccnBaseUrl\n        cdpUrl\n        investBaseUrl\n        investCertPath\n        investClientId\n        env\n        orionBaseUrl\n        orionClientId\n        orionUsername\n        pegaClientId\n        pegaBaseUrl\n        secretsManagerName\n      }\n      version\n      commit\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{base_url}}{{path}}",
							"host": [
								"{{base_url}}{{path}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "HeavyWeight Health Check",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientSecret",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "{{client_key}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{base_url}}access/token",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "header",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "access_token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query Query($input: IgnoreBy) {\n  HealthCheck {\n    HeavyWeight(input: $input) {\n      errorCount\n      pass\n      fail\n      inspection {\n        id\n        api\n        url\n        method\n        endpoint\n        status\n        body\n        json\n        time\n        error\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": []\n  }\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}{{path}}",
							"host": [
								"{{base_url}}{{path}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Debugging Query",
			"item": [
				{
					"name": "Customer Summary By CIF",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "zid",
								"value": "kzh9x7",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query CustomerSummary1($cif: String!, $cupid: String!, $userSessionId: String!, $accountId: String!, $accountRestrictionsCif2: String!) {\n  Customer {\n    customerSummary(cif: $cif) {\n      household {\n        orionId\n        orionRepId\n        allyHouseholdId\n        name\n        primaryContact\n        assetsUnderManagement\n      }\n      contact {\n        guid\n        firstName\n        lastName\n        dateOfBirth\n        ssn\n        addresses {\n          primary {\n            type\n            line1\n            line2\n            line3\n            city\n            zipCode\n            state\n            country\n            careOf\n            endDate\n            lastUpdatedAt\n          }\n          mailing {\n            type\n            line1\n            line2\n            line3\n            city\n            zipCode\n            state\n            country\n            careOf\n            endDate\n            lastUpdatedAt\n          }\n        }\n        phones {\n          type\n          value\n        }\n        emails {\n          type\n          value\n        }\n        occupation\n        employer\n        customerSince\n        isEmployee\n        altids {\n          DEPOSIT\n          INVEST\n          HOMELOANS\n          IDM\n        }\n        relationships {\n          id\n          status\n          role\n          createdDateTime\n          relationshipType\n          accounts {\n            lob\n            recordType\n            type\n            subType\n            accountNumber\n            dateOpened\n            isActive\n            status\n            currentValue\n            availableValue\n            managementStyle\n            feeSchedule\n            portfolioType\n            orionAccountId\n            accountType\n            number\n            nickName\n            hasPositions\n            realtimeTransferLimitCategory\n            productType\n            balance {\n              fundsAvailableToWithdraw\n              accountValue\n              maxOnlineWithdrawalAmount\n            }\n            isAccountRestricted\n            isAccountClosed\n            isManagedPortfolio\n            eligibilities {\n              type\n              eligible\n            }\n            accountLimits {\n              type\n              itemLimit\n              dailyMaximum\n              todaysRemaining\n            }\n            linkedBankAccounts {\n              bank\n              accountType\n              aba\n              number\n              achRelationshipId\n            }\n          }\n        }\n      }\n    }\n    getCustomerCredentialBlocks(cupid: $cupid, userSessionId: $userSessionId) {\n      online_access_status\n      online_access_status_flag\n      password_status\n      password_status_flag\n      mfa_status\n    }\n  }\n  Accounts {\n    accountRestrictions(accountId: $accountId, cif: $accountRestrictionsCif2) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
								"variables": "{\n  \"cif\": \"9338860\",\n  \"cupid\": \"null\",\n  \"userSessionId\": \"null\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzkTKc5CXrAXEglZtT1oXvuxxMV_pkHVwVNBgvfK1HjaLYjKcoK58SgHyJMqlrACzQ\",\n  \"accountRestrictionsCif2\": \"9338860\"\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}{{path}}",
							"host": [
								"{{base_url}}{{path}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer Summary By Account Number",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "zid",
								"value": "kzh9x7",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query CustomerSummary2($accountNumber: String, $lob: String, $cupid: String!, $userSessionId: String!) {\n  customers(accountNumber: $accountNumber, lob: $lob) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      status\n      employer\n      name {\n        first\n        middle\n        prefix\n        suffix\n        last\n      }\n      preferredName {\n        name\n        prefix\n        pronoun\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        zipCode\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n        relationships {\n          type\n          status\n          statusDate\n          active\n        }\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n      restrictions {\n        code\n        accountNumber\n        startDate\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n      meta {\n        deliveryPreference\n      }\n    }\n  }\n  Customer {\n    getCustomerCredentialBlocks(cupid: $cupid, userSessionId: $userSessionId) {\n      online_access_status\n      online_access_status_flag\n      password_status\n      password_status_flag\n      mfa_status\n    }\n  }\n}",
								"variables": "{\n  \"accountNumber\": \"7795500001\",\n  \"lob\": \"MORTGAGE\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"userSessionId\": \"kzh9x7\"\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}{{path}}",
							"host": [
								"{{base_url}}{{path}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer Summary By Phone",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "zid",
								"value": "kzh9x7",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query CustomerSummary3($phone: String, $cupid: String!, $userSessionId: String!) {\n  customers(phone: $phone) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      status\n      employer\n      name {\n        first\n        middle\n        prefix\n        suffix\n        last\n      }\n      preferredName {\n        name\n        prefix\n        pronoun\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        zipCode\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n        relationships {\n          type\n          status\n          statusDate\n          active\n        }\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n      restrictions {\n        code\n        accountNumber\n        startDate\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n      meta {\n        deliveryPreference\n      }\n    }\n  }\n  Customer {\n    getCustomerCredentialBlocks(cupid: $cupid, userSessionId: $userSessionId) {\n      online_access_status\n      online_access_status_flag\n      password_status\n      password_status_flag\n      mfa_status\n    }\n  }\n}",
								"variables": "{\n\"phone\": \"401-743-6376\",\n\"cupid\": \"52509609668888314918268939619495\",\n\"userSessionId\": \"kzh9x7\"\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}{{path}}",
							"host": [
								"{{base_url}}{{path}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer Summary By SSN",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "zid",
								"value": "kzh9x7",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query CustomerSummary3($phone: String, $cupid: String!, $userSessionId: String!) {\n  customers(phone: $phone) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      status\n      employer\n      name {\n        first\n        middle\n        prefix\n        suffix\n        last\n      }\n      preferredName {\n        name\n        prefix\n        pronoun\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        zipCode\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n        relationships {\n          type\n          status\n          statusDate\n          active\n        }\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n      restrictions {\n        code\n        accountNumber\n        startDate\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n      meta {\n        deliveryPreference\n      }\n    }\n  }\n  Customer {\n    getCustomerCredentialBlocks(cupid: $cupid, userSessionId: $userSessionId) {\n      online_access_status\n      online_access_status_flag\n      password_status\n      password_status_flag\n      mfa_status\n    }\n  }\n}",
								"variables": "{\n\"phone\": \"401-743-6376\",\n\"cupid\": \"52509609668888314918268939619495\",\n\"userSessionId\": \"kzh9x7\"\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}{{path}}",
							"host": [
								"{{base_url}}{{path}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bucket Transactions Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Bucket Transactionss: Status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Bucket Transactions: Response time less than 5s\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
									"});",
									"",
									"pm.test(\"Get Bucket Transactions: Buckets Array Exists\", function () {",
									"    const json = pm.response.json();",
									"    pm.expect(json.data.Accounts.bucketTransactions.bucket).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Get Buckets transactions should contain required fields\", function() {",
									"        pm.response.json().data.Accounts.bucketTransactions.bucket.postedTransactions.forEach(response => {",
									"            pm.expect(response).to.have.all.keys('bucketTransactionId', 'toolkitBucketId', 'transactionDate', 'transactionAmount', 'transactionDescription', 'merchantId','cleansedTransactionAmount','isGreyedOut','isMoveable','created','transactionTypeName','merchantName','toolkitAccountId', 'bucketBalanceAfterPost', 'overSpendIndicator', 'overSpendAmount', 'transactionPostingTime', 'groupTransactionId', 'transactionTypeId', 'accountId', 'detailIndicator', 'transactionDetails');  ",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"toolkitBucketName\", \"bucketBalance\",\"bucketCategoryName\", \"bucketBalanceLastUpdateDate\" );",
									"});",
									"",
									"                ",
									"})",
									"      });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "zid",
								"value": "12345",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ExampleQuery($input: BucketTransactionInput) {\n  Accounts {\n    bucketTransactions(input: $input) {\n      bucket {\n        toolkitBucketId\n        toolkitBucketName\n        bucketBalance\n        bucketCategoryName\n        bucketBalanceLastUpdateDate\n        postedTransactions {\n          bucketTransactionId\n          toolkitBucketId\n          transactionDate\n          transactionAmount\n          transactionDescription\n          bucketBalanceAfterPost\n          overSpendIndicator\n          overSpendAmount\n          transactionPostingTime\n          groupTransactionId\n          transactionTypeId\n          accountId\n          detailIndicator\n          transactionDetails {\n            bucketTransactionDetailId\n            bucketTransactionId\n            fromToolkitBucketId\n            fromToolkitBucketName\n            toToolkitBucketId\n            toToolkitBucketName\n            fromBucketBalance\n            toBucketBalance\n          }\n            toolkitAccountId\n            merchantId\n            merchantName\n            transactionTypeName\n            created\n            isMoveable\n            isGreyedOut\n            cleansedTransactionAmount\n        }\n        pendingTransactions {\n          bucketTransactionId\n          toolkitBucketId\n          accountId\n          transactionDate\n          transactionAmount\n          transactionDescription\n          merchantId\n          isMovable\n          isGrayedOut\n        }\n      }\n    }\n  }\n}\n",
								"variables": "{\n  \"input\": {\n    \"accountId\": \"ZUZoalduMVRNZFNTUjhTZyfR685Ih1aGekqRhZ7x4H4JWaVFOrNJOzJDBSGeKpRmB0eKHnzopuIggb9RLJviEA\",\n    \"bucketId\": \"E999FE8CD5B50349E05302D32D0A2EA5\",\n    \"recordsPerPage\": 25,\n    \"applicationId\": \"ALLYUSBOLB\",\n    \"applicationName\": \"strata-graph\",\n    \"cif\": \"10224128\",\n    \"guid\": \"17063782\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}{{path}}",
							"host": [
								"{{base_url}}{{path}}"
							]
						},
						"description": "Get spending buckets.\n\n**Please pass accountId as encrypted or response will return 400**\n\nAPI Spec: [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Telephony",
			"item": [
				{
					"name": "CD Act",
					"item": [
						{
							"name": "CDAct: Disbursement N",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "clientSecret",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{client_key}}",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{base_url}}access/token",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "access_token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $input: cdActivitiesSearch) {\n  Accounts {\n    cdActivities(cif: $cif, input: $input) {\n      conversationId\n      cdActInfo {\n        totalProjectedInterest\n        cdMaturityDatePvtEncrypt\n        lastRenewalDate\n        ownershipType\n        apy\n        dailyInterestAccrued\n        interestYtd\n      }\n    }\n  }\n}",
										"variables": "{\n   \"cif\": \"9295499\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ1on7IdbZMzdpheHzZFUGDoQMKK_IZBdb389gO9tfILzUdAf-coFbErXSAcGSDny6Q\",\n    \"disbursement\": \"N\",\n    \"conversationId\": \"123\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CDAct: Disbursement Y",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "Oobw2HlVGY5fmabtbDADbOdWZ9oR",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $input: cdActivitiesSearch) {\n  Accounts {\n    cdActivities(cif: $cif, input: $input) {\n      searchResults {\n        transactionHistory {\n          transactions {\n            transactionPhrase\n            transactionPostingDate\n            transactionAmountPvtEncrypt\n          }\n        }\n      }\n      conversationId\n    }\n  }\n}",
										"variables": "{\n   \"cif\": \"6134161\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZwQb69_TKbBJDHciZ-tzhR2KUMsb60zGtwpcq1GsiTxxGsxMloSCbNbubItNyJHtog\",\n    \"disbursement\": \"Y\",\n    \"conversationId\": \"123\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CDAct: Disbursement N : HY 5 year",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "XGQQGJerCZlghSu0bJCYt3NVfqpg",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $input: cdActivitiesSearch) {\n  Accounts {\n    cdActivities(cif: $cif, input: $input) {\n      conversationId\n      searchResults {\n        accountNumberPvtEncrypt\n        conversationId\n        transactionHistory {\n          matchedRecordsTotal\n          recordsOnThisPage\n          transactions {\n            transactionPhrase\n            transactionPostingDate\n            transactionAmountPvtEncrypt\n          }\n        }}\n        cdActInfo {\n          totalProjectedInterest\n          cdMaturityDatePvtEncrypt\n          lastRenewalDate\n          ownershipType\n          apy\n          dailyInterestAccrued\n          interestYtd\n        }\n      }\n    }\n  }\n",
										"variables": "{\n   \"cif\": \"\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ0jVqHze06GpTlMsiNA-BRDIFyYdWJ8dATNRnW9Hi3meb1HqvqNFhqAIlQPC47wNqQ\",\n    \"disbursement\": \"N\",\n    \"conversationId\": \"123\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CDAct: Disbursement Y : HY 3 year",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $input: cdActivitiesSearch) {\n  Accounts {\n    cdActivities(cif: $cif, input: $input) {\n      conversationId\n      searchResults {\n        accountNumberPvtEncrypt\n        conversationId\n        transactionHistory {\n          matchedRecordsTotal\n          recordsOnThisPage\n          transactions {\n            transactionPhrase\n            transactionPostingDate\n            transactionAmountPvtEncrypt\n          }\n        }}\n        cdActInfo {\n          totalProjectedInterest\n          cdMaturityDatePvtEncrypt\n          lastRenewalDate\n          ownershipType\n          apy\n          dailyInterestAccrued\n          interestYtd\n        }\n      }\n    }\n  }\n",
										"variables": "{\n   \"cif\": \"10228039\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ3RnJTHfMeYLpPR1rBFk7_oL2ChU2NnM7y3KnfOr-OsLO9W9M1DR28GgxleCV0Q5Eg\",\n    \"disbursement\": \"Y\",\n    \"conversationId\": \"123\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RecentActStart",
					"item": [
						{
							"name": "Get Recent Act Start- Succesful response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"Get Recent Act Start- Succesful response: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start- Succesful response: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start- Succesful response: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\",\"cdMaturityDatePvtEncrypt\",\"ownershipType\", \"restrictions\");",
											"",
											"    })",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: results array all keys are available\", function () {",
											"     var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].ownershipType).to.be.oneOf([\"A\", \"AB\", \"AT\", \"AU\", \"AV\", \"AW\", \"B\", \"C\", \"CC\", \"CF\", \"CU\", \"CV\", \"CW\", \"RA\"]);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n    \"CDA\": true,\n    \"MMA\": true,\n    \"SDA\": true,\n    \"DDA\": true\n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recent Act Start- OwnershipType B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"Get Recent Act Start- OwnershipType B: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start- OwnershipType B: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start- OwnershipType B: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start- OwnershipType B: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\",\"cdMaturityDatePvtEncrypt\",\"ownershipType\", \"restrictions\");",
											"",
											"    })",
											"",
											"pm.test(\"Get Recent Act Start- OwnershipType B: results array all keys are available\", function () {",
											"     var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].ownershipType).to.be.equal(\"B\");",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '528-56-8962');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10227489\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n    \"CDA\": true,\n    \"MMA\": true,\n    \"SDA\": true,\n    \"DDA\": true\n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTTRANSACTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"input\": {\n        \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_TRANSACTION\",\n    \"amountRange\": {      \n      \"startAmount\": 1 ,\n      \"endAmount\": 30000\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recent Act Start - No AccountType Selected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19492",
											"*/",
											"pm.test(\"Get Recent Act Start - No AccountType Selected: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - No AccountType Selected: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Get Recent Act Start - No AccountType Selected: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - No AccountType Selected: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\",\"cdMaturityDatePvtEncrypt\", \"ownershipType\", \"restrictions\");",
											"",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].restrictions[0]).to.have.keys(\"accountNumber\",\"code\", \"description\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '328-30-4665');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n   \n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recent Act Start - Genesys Flags is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"Get Recent Act Start - Genesys Flags is false: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Genesys Flags is false: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Genesys Flags is false: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Genesys Flags is false: restrictions is null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary[0].restrictions).to.be.equal(null);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '328-30-4665');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n    \"CDA\": true,\n    \"MMA\": true,\n    \"SDA\": true,\n    \"DDA\": true\n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": false\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recent Act Start - Genesys Flags is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"Get Recent Act Start - Genesys Flags is true: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Genesys Flags is true: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Genesys Flags is true: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Genesys Flags is true: restrictions is null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary[0].restrictions).to.be.an(\"array\");",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '328-30-4665');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n    \"CDA\": true,\n    \"MMA\": true,\n    \"SDA\": true,\n    \"DDA\": true\n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recent Act Start - Account Type CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"Get Recent Act Start - Account Type CD: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type CD: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type CD: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type CD: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\",\"cdMaturityDatePvtEncrypt\",\"ownershipType\", \"restrictions\");",
											"",
											"    })",
											"",
											"pm.test(\"Get Recent Act Start - Account Type CD: results array all keys are available\", function () {",
											"     var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].ownershipType).to.be.oneOf([\"A\", \"AB\", \"AT\", \"AU\", \"AV\", \"AW\", \"B\", \"C\", \"CC\", \"CF\", \"CU\", \"CV\", \"CW\", \"RA\"]);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n    \"CDA\": true\n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recent Act Start - Account Type MMA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"Get Recent Act Start - Account Type MAA: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type MMA: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type MMA: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type MMA: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\",\"cdMaturityDatePvtEncrypt\",\"ownershipType\", \"restrictions\");",
											"",
											"    })",
											"",
											"pm.test(\"Get Recent Act Start - Account Type MMA: results array all keys are available\", function () {",
											"     var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].ownershipType).to.be.oneOf([\"A\", \"AB\", \"AT\", \"AU\", \"AV\", \"AW\", \"B\", \"C\", \"CC\", \"CF\", \"CU\", \"CV\", \"CW\", \"RA\"]);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n    \"MMA\": true\n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recent Act Start - Account Type SDA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"Get Recent Act Start - Account Type OSA: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type OSA: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type OSA: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type OSA: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\",\"cdMaturityDatePvtEncrypt\",\"ownershipType\", \"restrictions\");",
											"",
											"    })",
											"",
											"pm.test(\"Get Recent Act Start - Account Type OSA: results array all keys are available\", function () {",
											"     var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].ownershipType).to.be.oneOf([\"A\", \"AB\", \"AT\", \"AU\", \"AV\", \"AW\", \"B\", \"C\", \"CC\", \"CF\", \"CU\", \"CV\", \"CW\", \"RA\"]);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n    \"SDA\": true\n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recent Act Start - Account Type DDA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"Get Recent Act Start - Account Type DDA: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type DDA: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type DDA: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountList.accountSummary).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Get Recent Act Start - Account Type DDA: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\",\"cdMaturityDatePvtEncrypt\",\"ownershipType\", \"restrictions\");",
											"",
											"    })",
											"",
											"pm.test(\"Get Recent Act Start - Account Type DDA: results array all keys are available\", function () {",
											"     var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].ownershipType).to.be.oneOf([\"A\", \"AB\", \"AT\", \"AU\", \"AV\", \"AW\", \"B\", \"C\", \"CC\", \"CF\", \"CU\", \"CV\", \"CW\", \"RA\"]);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountTypeFilter: AccountFilter) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountTypeFilter: $accountTypeFilter) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"conversationId\": \"12343\",\n  \"accountTypeFilter\": {\n    \"DDA\": true\n  },\n  \"genesysFlags\": {\n    \"includeRestrictions\": true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RecentActivites",
					"item": [
						{
							"name": "RecentAct",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "clientSecret",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{client_key}}",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{base_url}}access/token",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "access_token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        transactionHistory {\n          transactions {\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n            transactionAmountPvtEncrypt\n          }\n          transactionStatusType\n        }\n        interestYtd\n        conversationId\n        totalInterestTransactions\n        totalTransactions\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090858\",\n  \"input\": {\n      \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ_ABpnkFJfGrr5qDalnOqpK8tSy_-KNoe9JFMk7QXUEKl8iatQFgnR8_YcnTkolMVA\", \n    \"activityType\": \"\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Empty cif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        transactionHistory {\n          transactions {\n            transactionDescription\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n            transactionAmountPvtEncrypt\n          }\n          transactionStatusType\n        }\n        interestYtd\n        conversationId\n        totalInterestTransactions\n        totalTransactions\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": null,\n  \"input\": {\n        \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_TRANSACTION\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTTRANSACTION and accountNumberPvtEncrypt null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION and accountNumberPvtEncrypt null: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION and accountNumberPvtEncrypt null: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION and accountNumberPvtEncrypt null: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].extensions.response.extensions.response.errors[0].errorDescription).to.eql(\"The provided account does not correspond to the provided CIF\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"input\": {\n      \"accountNumberPvtEncrypt\": \"\", \n    \"activityType\": \"RECENT_TRANSACTION\",\n    \"amountRange\": {      \n      \"startAmount\": 10000 ,\n      \"endAmount\": 30000\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTTRANSACTION And Amount Range null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION And Amount Range null: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION And Amount Range null: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION And Amount Range null: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"input\": {\n        \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_TRANSACTION\",\n    \"amountRange\": {      \n      \"startAmount\": null ,\n      \"endAmount\": null\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTTRANSACTION And Date Range Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION And Date Range Null: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION And Date Range Null: Expect response to have a status code of 400.\", () => {",
											"    pm.response.to.have.status(400);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTTRANSACTION And Date Range Null: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].extensions.code).to.eql(\"BAD_USER_INPUT\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"input\": {\n        \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_TRANSACTION\",\n    \"amountRange\": {      \n      \"startAmount\": 10000 ,\n      \"endAmount\": 30000\n    },\n    \"dateRange\": {\n      \"fromDate\": null,\n      \"toDate\": null\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTDEPOSITS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS: RecentAct result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_DEPOSITS\",\n      \"amountRange\": {      \n      \"startAmount\": 10000 ,\n      \"endAmount\": 30000\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n  \n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTDEPOSITS  and date range null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS and date range null: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS and date range null: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS and date range null: RecentAct result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS and date range null: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_DEPOSITS\",\n    \"amountRange\": {      \n      \"startAmount\": 1000 ,\n      \"endAmount\": 30000\n    },\n   \n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTDEPOSITS  and amount range Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS and amount range null: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS and amount range null: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS and amount range null: RecentAct result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTDEPOSITS and amount range null: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_DEPOSITS\",\n    \"amountRange\": {      \n      \"startAmount\": null,\n      \"endAmount\": null\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTWITHDRAWALS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS: RecentAct result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n   \"cif\": \"10221994\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_WITHDRAWALS\",\n    \"amountRange\": {      \n      \"startAmount\": 10000 ,\n      \"endAmount\": 30000\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n   \n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTWITHDRAWALS and Date range Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS AND DATE RANGE NULL: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS AND DATE RANGE NULL: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS AND DATE RANGE NULL: RecentAct result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS AND DATE RANGE NULL: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n   \"cif\": \"10221994\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_WITHDRAWALS\",\n    \"amountRange\": {      \n      \"startAmount\": 1000 ,\n      \"endAmount\": 30000\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTWITHDRAWALS and Amount range Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS AND AMOUNT RANGE NULL: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS AND AMOUNT RANGE NULL: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS AND AMOUNT RANGE NULL: RecentAct result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTWWITHDRAWALS AND AMOUNT RANGE NULL: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '368-95-2125');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n   \"cif\": \"10221994\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ86Z6zN7NbFryo3k3GKY85oHZmza6dO9yXNWUtSKQcp9Pm2VxC4TWZbtmA4s6OJJjw\",\n    \"activityType\": \"RECENT_WITHDRAWALS\",\n    \"amountRange\": {      \n      \"startAmount\": null ,\n      \"endAmount\": null\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n   \n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = RECENTCHECKS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = RECENTCHECKS: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTCHECKS: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTCHECKS: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = RECENTCHECKS: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '682-26-6289');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090858\",\n  \"input\": {   \n      \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ_ABpnkFJfGrr5qDalnOqpK8tSy_-KNoe9JFMk7QXUEKl8iatQFgnR8_YcnTkolMVA\", \n    \"activityType\": \"RECENT_CHECKS\",\n    \"amountRange\": {      \n      \"startAmount\": 1000 ,\n      \"endAmount\": 3000\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n    \n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = INTRESTPAYMENTS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '682-26-6289');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090858\",\n  \"input\": {\n      \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ_ABpnkFJfGrr5qDalnOqpK8tSy_-KNoe9JFMk7QXUEKl8iatQFgnR8_YcnTkolMVA\", \n    \"activityType\": \"INTEREST_PAYMENTS\",\n    \"amountRange\": {      \n      \"startAmount\": 1 ,\n      \"endAmount\": 100\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = InterestPayments and Date range Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS and Date range Null: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS and Date range Null: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS and Date range Null: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS and Date range Null: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '682-26-6289');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090858\",\n  \"input\": {\n      \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ_ABpnkFJfGrr5qDalnOqpK8tSy_-KNoe9JFMk7QXUEKl8iatQFgnR8_YcnTkolMVA\", \n    \"activityType\": \"INTEREST_PAYMENTS\",\n    \"amountRange\": {      \n      \"startAmount\": 1 ,\n      \"endAmount\": 100\n    },\n    \"dateRange\": {\n      \"fromDate\":\"\",\n      \"toDate\": \"\"\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Activitytype = InterestPayments and Amount range Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS and Amount range Null: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS and Amount range Null: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS and Amount range Null: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : Activitytype = INTRESTPAYMENTS and Amount range Null: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '682-26-6289');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090858\",\n  \"input\": {\n      \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ_ABpnkFJfGrr5qDalnOqpK8tSy_-KNoe9JFMk7QXUEKl8iatQFgnR8_YcnTkolMVA\", \n    \"activityType\": \"INTEREST_PAYMENTS\",\n    \"amountRange\": {      \n      \"startAmount\": null ,\n      \"endAmount\": null\n    },\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\",\n      \"toDate\": \"2022-10-05\"\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : IF CHECK_Num is populated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : IF CHECK_Num is populated: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : IF CHECK_Num is populated: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"RecentAct : IF CHECK_Num is populated: RecentAct result should not be  null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.recentActivities.searchResults).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"RecentAct : IF CHECK_Num is populated: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0]).to.have.keys(\"accountNumber\",\"accountType\", \"interestYtd\", \"totalInterestTransactions\",\"totalTransactions\",\"transactionHistory\", \"conversationId\");",
											"",
											"    pm.expect(jsonData.data.Accounts.recentActivities.searchResults[0].transactionHistory[0].transactions[0]).to.have.keys(\"transactionDescription\",\"transactionAmountPvtEncrypt\", \"transactionPhrase\", \"transactionPostingDate\",\"transactionEffectiveDate\");",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '682-26-6289');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090858\",\n  \"input\": {\n    \"activityType\": \"\",\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\"\n    },\n    \"checkNumberRange\": {      \n      \"startCheckNum\": 1210 ,\n      \"endCheckNum\": 1220\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecentAct : Check Number range can't be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19982",
											"*/",
											"pm.test(\"RecentAct : Check Number range can't be null: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"RecentAct : Check Number range can't be null: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"RecentAct : Check Number range can't be null: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Error getting account transactions for cif: 10090858\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '682-26-6289');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "JZL29C",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query RecentActivities($cif: String!, $input: TransactionSearch, $conversationId: String) {\n  Accounts {\n    recentActivities(cif: $cif, input: $input, conversationId: $conversationId) {\n      searchResults {\n        accountNumber\n        accountType\n        interestYtd   \n        totalInterestTransactions \n        totalTransactions\n        transactionHistory {             \n          transactions {\n            transactionDescription\n            transactionAmountPvtEncrypt\n            transactionPhrase\n            transactionPostingDate\n            transactionEffectiveDate\n          }\n        }\n        conversationId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090858\",\n  \"input\": {\n    \"activityType\": \"\",\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\"\n    },\n    \"checkNumberRange\": {      \n      \"startCheckNum\": null ,\n      \"endCheckNum\": null\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product Rates",
					"item": [
						{
							"name": "Product Rates - High Yield 3M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 3M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 3M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 3M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 3M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '3M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '3M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "clientSecret",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{client_key}}",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{base_url}}access/token",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "access_token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - IRA High Yield 3M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - IRA High Yield 3M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 3M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 3M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 3M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' || pm.collectionVariables.get('productType') === 'IRAHY' ){",
											"                    if(res[k].name === '3M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'IRAHY');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' && resD[k].productType === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'CD' && pm.collectionVariables.get('productType') === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '3M')",
											"                            break                       ",
											"                     }",
											"                     break",
											"                     }",
											"                else if(pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].productType === 'IRAHY' ){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'IRAHY' && pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].financialInstitutions[0].availableTerms[i].name === '3M')",
											"                            break",
											"                        ",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - IRA High Yield 6M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 6M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 6M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 6M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 6M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' || pm.collectionVariables.get('productType') === 'IRAHY' ){",
											"                    if(res[k].name === '6M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'IRAHY');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' && resD[k].productType === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'CD' && pm.collectionVariables.get('productType') === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '6M')",
											"                            break                       ",
											"                     }",
											"                     break",
											"                     }",
											"                else if(pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].productType === 'IRAHY' ){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'IRAHY' && pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].financialInstitutions[0].availableTerms[i].name === '6M')",
											"                            break",
											"                        ",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - IRA High Yield 9M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - IRA High Yield 9M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 9M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 9M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 9M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' || pm.collectionVariables.get('productType') === 'IRAHY' ){",
											"                    if(res[k].name === '9M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'IRAHY');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' && resD[k].productType === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'CD' && pm.collectionVariables.get('productType') === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '9M')",
											"                            break                       ",
											"                     }",
											"                     break",
											"                     }",
											"                else if(pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].productType === 'IRAHY' ){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'IRAHY' && pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].financialInstitutions[0].availableTerms[i].name === '9M')",
											"                            break",
											"                        ",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - IRA High Yield 12M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - IRA High Yield 12M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 12M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 12M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 12M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' || pm.collectionVariables.get('productType') === 'IRAHY' ){",
											"                    if(res[k].name === '12M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'IRAHY');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' && resD[k].productType === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'CD' && pm.collectionVariables.get('productType') === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '12M')",
											"                            break                       ",
											"                     }",
											"                     break",
											"                     }",
											"                else if(pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].productType === 'IRAHY' ){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'IRAHY' && pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].financialInstitutions[0].availableTerms[i].name === '12M')",
											"                            break",
											"                        ",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - IRA High Yield 18M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - IRA High Yield 18M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 18M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 18M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 18M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' || pm.collectionVariables.get('productType') === 'IRAHY' ){",
											"                    if(res[k].name === '18M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'IRAHY');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' && resD[k].productType === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'CD' && pm.collectionVariables.get('productType') === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '18M')",
											"                            break                       ",
											"                     }",
											"                     break",
											"                     }",
											"                else if(pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].productType === 'IRAHY' ){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'IRAHY' && pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].financialInstitutions[0].availableTerms[i].name === '18M')",
											"                            break",
											"                        ",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - IRA High Yield 36M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - IRA High Yield 36M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 36M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 36M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 36M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' || pm.collectionVariables.get('productType') === 'IRAHY' ){",
											"                    if(res[k].name === '36M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'IRAHY');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' && resD[k].productType === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'CD' && pm.collectionVariables.get('productType') === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '36M')",
											"                            break                       ",
											"                     }",
											"                     break",
											"                     }",
											"                else if(pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].productType === 'IRAHY' ){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'IRAHY' && pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].financialInstitutions[0].availableTerms[i].name === '36M')",
											"                            break",
											"                        ",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - IRA High Yield 60M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - IRA High Yield 60M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 60M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 60M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - IRA High Yield 60M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' || pm.collectionVariables.get('productType') === 'IRAHY' ){",
											"                    if(res[k].name === '60M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'IRAHY');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD' && resD[k].productType === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'CD' && pm.collectionVariables.get('productType') === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '60M')",
											"                            break                       ",
											"                     }",
											"                     break",
											"                     }",
											"                else if(pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].productType === 'IRAHY' ){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].name)",
											"                        if(resD[k].productType === 'IRAHY' && pm.collectionVariables.get('productType') === 'IRAHY' && resD[k].financialInstitutions[0].availableTerms[i].name === '60M')",
											"                            break",
											"                        ",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - High Yield 6M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 6M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 6M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 6M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 6M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '6M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '6M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - High Yield 9M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 9M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 9M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 9M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 9M CD: Verify rates for Product Type- High Yield 3M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '6M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '9M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - High Yield 12M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 12M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 12M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 12M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 12 CD: Verify rates for Product Type- High Yield 12M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '12M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '12M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - High Yield 18M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 18M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 18M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 18M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 18M CD: Verify rates for Product Type- High Yield 18M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '18M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '18M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - High Yield 24M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 24M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 24M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 24M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 24M CD: Verify rates for Product Type- High Yield 18M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '18M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '24M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - High Yield 48M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 48M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 48M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 48M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 48M CD: Verify rates for Product Type- High Yield 48M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '48M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '48M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - High Yield 36M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 48M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 48M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 48M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 48M CD: Verify rates for Product Type- High Yield 48M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '48M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '48M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - High Yield 60M CD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - High Yield 60M CD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 60M CD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 60M CD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - High Yield 60M CD: Verify rates for Product Type- High Yield 60M CD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            for(k;k<res.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    if(res[k].name === '60M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'CD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '60M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - DDA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - DDA: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - DDA: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - DDA: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - DDA: Verify rates for Product Type- DDA\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            ",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(k;k<res.length;k++){",
											"                    if(res[k].name === '60M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'DDA');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '60M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - MMDA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - MMDA: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - MMDA: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - MMDA: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - MMDA: Verify rates for Product Type- MMDA\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            ",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(k;k<res.length;k++){",
											"                    if(res[k].name === '60M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'MMDA');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '60M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - OSAV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - OSAV: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - OSAV: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - OSAV: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - OSAV: Verify rates for Product Type- OSAV\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            ",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(k;k<res.length;k++){",
											"                    if(res[k].name === '60M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'OSAV');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '60M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - NCD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - NCD: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - NCD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - NCD: Product Rates is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.productRates[0]).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Product Rates - NCD: Verify rates for Product Type- NCD\", function(){",
											"            ",
											"            var k=0;",
											"            var res = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms",
											"            ",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(k;k<res.length;k++){",
											"                    if(res[k].name === '60M')",
											"                        break",
											"                     }                   ",
											"            }",
											"            ",
											"    var jsonData = pm.response.json().data.Accounts.productRates[0].financialInstitutions[0].availableTerms[k];",
											"    pm.expect(jsonData.rates[0].rateIndicator.lowerAmountLimit).to.equal(pm.variables.get(\"rates1_MinAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.higherAmountLimit).to.equal(pm.variables.get(\"rates1_MaxAmount\"))",
											"    pm.expect(jsonData.rates[0].rateIndicator.apy).to.equal(pm.variables.get(\"rates1_apy\"))",
											"})",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set('productType', 'NCD');",
											"",
											"const getRatesFromPegaSus = {",
											" url: 'https://secure-qa1.ally.com/acs/products/deposit/rates?CD',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'API-key' : 'QB1u5bb6Mqcg0yOR5OABUzbinqmKb56u'    ",
											"    },",
											"}",
											"",
											" pm.sendRequest(getRatesFromPegaSus, function (err, response) {",
											"            ",
											"            var i=0; var k=0;",
											"            var resD = response.json()",
											"            ",
											"            for(k;k<resD.length;k++){",
											"                if(pm.collectionVariables.get('productType') === 'CD'){",
											"                    for(i;i<resD[k].financialInstitutions[0].availableTerms.length;i++){",
											"                        console.log(resD[k].financialInstitutions[0].availableTerms[i].name)",
											"                        if(resD[k].productType === 'CD' && resD[k].financialInstitutions[0].availableTerms[i].name === '60M')",
											"                            break",
											"                     }",
											"                     break",
											"                     }",
											"                   ",
											"                else {",
											"                     if(resD[k].productType === pm.collectionVariables.get('productType'))",
											"                        break",
											"                    }                     ",
											"            }",
											"            ",
											"            console.log( i + \" - \" + k)",
											"            pm.variables.set('rates1_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].apy)",
											"            pm.variables.set('rates1_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates1_MaxAmount', resD[k].financialInstitutions[0].availableTerms[i].rates[0].rateIndicator.higherAmountLimit)",
											"",
											"            pm.variables.set('rates2_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].apy)",
											"            pm.variables.set('rates2_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates2_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[1].rateIndicator.higherAmountLimit)",
											"        if(resD[k].financialInstitutions[0].availableTerms[i].rates.length ===3){",
											"            ",
											"            pm.variables.set('rates3_Apy' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].apy)",
											"            pm.variables.set('rates3_MinAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.lowerAmountLimit)",
											"            pm.variables.set('rates3_MaxAmount' , resD[k].financialInstitutions[0].availableTerms[i].rates[2].rateIndicator.higherAmountLimit)",
											"        }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"{{productType}}\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - Null Product Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - Null Product Type: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Product Rates - Null Product Type: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - Null Product Type: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable \\\"$productType\\\" of non-null type \\\"String!\\\" must not be null.\");",
											"});",
											"",
											"pm.test(\"Product Rates - Null Product Type: Code is BAD_USER_INPUT\", function () {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().errors[0].extensions.code).to.equal(\"BAD_USER_INPUT\")",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": null\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - Empty Product Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - Empty Product Type: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Product Rates - Empty Product Type - NCD: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Product Rates - Empty Product Type: Code is QUERY_ERROR\", function () {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().errors[0].extensions.code).to.equal(\"QUERY_ERROR\")",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"productType\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Rates - No Product Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Sarmin Akter",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19829",
											"*/",
											"",
											"pm.test(\"Product Rates - No Product Type: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Product Rates - No Product Type: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Product Rates - Null Product Type: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable \\\"$productType\\\" of required type \\\"String!\\\" was not provided.\");",
											"});",
											"",
											"pm.test(\"Product Rates - No Product Type: Code is BAD_USER_INPUT\", function () {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().errors[0].extensions.code).to.equal(\"BAD_USER_INPUT\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "lzqpvx",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($productType: String!) {\n  Accounts {\n    productRates(productType: $productType) {\n      name\n      productType\n      description\n      lob\n      financialInstitutions {\n        name\n        availableTerms {\n          name\n          length {\n            type\n            value\n          }\n          description\n          interestPostingFrequency {\n            interestDisbursementOptions\n            frequency\n            defaultFrequency\n          }\n          rates {\n            subType\n            rateIndicator {\n              lowerAmountLimit\n              higherAmountLimit\n            }\n            apy\n            type\n            rate\n          }\n        }\n        productIndicator {\n          isPromotional\n          isRetirement\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CIAM",
					"item": [
						{
							"name": "Get CIAM Request Token",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_key}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "ally_tsv=v2",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://secure-qa1.ally.com/",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "voice",
											"type": "text"
										},
										{
											"key": "ssn",
											"value": "682-26-6289",
											"type": "text"
										},
										{
											"key": "pin",
											"value": "1234",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/oauth2/token",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Internal Transfer",
					"item": [
						{
							"name": "GET - Internal Transfer Sucess Response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 10 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "ACznEgA6KSU1a4Tjb9M90gUiQGuV",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query InternalTransfer($cif: String!, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    internalTransfer(cif: $cif conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      ira\n      cd\n      count\n      relCodeRestriction\n      internalTransferRestrictions\n      internalTransferReason\n      allyinvest\n      conversationId\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9539758\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Internal Transfer Empty Headers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19491",
											"*/",
											"//\"SSN\": 328-30-4665",
											"//\"PIN\":1234",
											"",
											"pm.test(\"Response time is less than 10 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query InternalTransfer($cif: String!, $conversationId: String) {\n  Accounts {\n    internalTransfer(cif: $cif conversationId: $conversationId) {\n      ira\n      cd\n      count\n      relCodeRestriction\n      internalTransferRestrictions\n      internalTransferReason\n      allyinvest\n      conversationId\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"\",\n  \"amount\" : \"\",\n  \"accountlastfour\" :\"\",\n  \"fromaccountccountlastfourdigits\":\"\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Internal Transfer - Header Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19491",
											"*/",
											"//\"SSN\": 328-30-4665",
											"//\"PIN\":1234",
											"",
											"pm.test(\"Response time is less than 10 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Internal Transfer result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query InternalTransfer($cif: String!, $conversationId: String) {\n  Accounts {\n    internalTransfer(cif: $cif conversationId: $conversationId) {\n      ira\n      cd\n      count\n      relCodeRestriction\n      internalTransferRestrictions\n      internalTransferReason\n      allyinvest\n      conversationId\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"amount\" : \"13\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Internal Transfer - Empty CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19491",
											"*/",
											"//\"SSN\": 328-30-4665",
											"//\"PIN\":1234",
											"",
											"pm.test(\"Response time is less than 10 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Internal Transfer result should have validation message\", () => {",
											"   //pm.expect(pm.response.json().data.Accounts.internalTransfer).to.be.an(\"array\");",
											"   //pm.expect(pm.response.json().data.Accounts.internalTransfer).length.to.be.greaterThan(0);",
											"   pm.expect(pm.response.json().errors[0].message).to.eql(\"Please provide a cif for this request.\");",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query InternalTransfer($cif: String!, $conversationId: String) {\n  Accounts {\n    internalTransfer(cif: $cif conversationId: $conversationId) {\n      ira\n      cd\n      count\n      relCodeRestriction\n      internalTransferRestrictions\n      internalTransferReason\n      allyinvest\n      conversationId\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Internal Transfer - Missing CoversatiionID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19491",
											"*/",
											"//\"SSN\": 328-30-4665",
											"//\"PIN\":1234",
											"",
											"pm.test(\"Response time is less than 10 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Internal Transfer result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query InternalTransfer($cif: String!, $conversationId: String) {\n  Accounts {\n    internalTransfer(cif: $cif conversationId: $conversationId) {\n      ira\n      cd\n      count\n      relCodeRestriction\n      internalTransferRestrictions\n      internalTransferReason\n      allyinvest\n      conversationId\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"conversationId\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Internal Transfer - Header Accountlastfour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19491",
											"*/",
											"//\"SSN\": 328-30-4665",
											"//\"PIN\":1234",
											"",
											"pm.test(\"Response time is less than 10 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Internal Transfer result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query InternalTransfer($cif: String!, $conversationId: String) {\n  Accounts {\n    internalTransfer(cif: $cif conversationId: $conversationId) {\n      ira\n      cd\n      count\n      relCodeRestriction\n      internalTransferRestrictions\n      internalTransferReason\n      allyinvest\n      conversationId\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"accountlastfour\" :\"5899\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Internal Transfer - Header fromaccountlastfourdigits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19491",
											"*/",
											"//\"SSN\": 328-30-4665",
											"//\"PIN\":1234",
											"",
											"pm.test(\"Response time is less than 10 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Internal Transfer result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.internalTransfer).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query InternalTransfer($cif: String!, $conversationId: String) {\n  Accounts {\n    internalTransfer(cif: $cif conversationId: $conversationId) {\n      ira\n      cd\n      count\n      relCodeRestriction\n      internalTransferRestrictions\n      internalTransferReason\n      allyinvest\n      conversationId\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"fromaccountccountlastfourdigits\":\"5264\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Status",
					"item": [
						{
							"name": "Check Status - Successful Response rel code false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Check Status result shouldnt be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.relCodeRestriction).to.be.eql(false);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "5116605",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      addressOnChecks\n      relCodeRestriction\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"5116605\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Status - Successful Response rel code true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Check Status result shouldnt be null\", () => {",
											"   ",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.relCodeRestriction).to.be.eql(true);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "5116605",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      addressOnChecks\n      relCodeRestriction\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10229830\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Data - Successful Response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-18093",
											"*/",
											"pm.test(\"Check Data - Successful Response: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Data - Successful Response: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Check Data - Successful Response: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String, $accountlastfourdigits: String) {\n  Accounts {\n    checkData(cif: $cif, conversationId: $conversationId, accountlastfourdigits: $accountlastfourdigits) {\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n        detailMsg\n      }\n    }\n  }\n\n}",
										"variables": "{\n  \"cif\": \"10206570\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\",\n  \"accountlastfourdigits\": \"2109\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Data - Count <10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-18093",
											"*/",
											"pm.test(\"Check Data - Count <10: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Data - Count <10: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Check Data - Count <10: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String, $accountlastfourdigits: String) {\n  Accounts {\n    checkData(cif: $cif, conversationId: $conversationId, accountlastfourdigits: $accountlastfourdigits) {\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n        detailMsg\n      }\n    }\n  }\n\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\",\n  \"accountlastfourdigits\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Data - Count >10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-18093",
											"*/",
											"pm.test(\"Check Data - Count >10: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Data - Count >10: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Check Data - Count >10: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String, $accountlastfourdigits: String) {\n  Accounts {\n    checkData(cif: $cif, conversationId: $conversationId, accountlastfourdigits: $accountlastfourdigits) {\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n        detailMsg\n      }\n    }\n  }\n\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\",\n  \"accountlastfourdigits\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Data - Response with Account last 4 Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-18093",
											"*/",
											"",
											"pm.test(\"Check Data - Response with Account last 4 Numbers: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Data - Response with Account last 4 Numbers: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Check Data - Response with Account last 4 Numbers: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String, $accountlastfourdigits: String) {\n  Accounts {\n    checkData(cif: $cif, conversationId: $conversationId, accountlastfourdigits: $accountlastfourdigits) {\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n        detailMsg\n      }\n    }\n  }\n\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\",\n  \"accountlastfourdigits\": \"8892\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Status - No Accounts Eligible",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19490",
											"*/",
											"",
											"pm.test(\"Check Status - No Accounts Eligible: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Status - No Accounts Eligible: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"",
											"pm.test(\"Check Status - No Accounts Eligible: If Count = 0, diisplay No Accounts eliigible for Checkorder\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails).to.be.null;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      pendingOrderFalseCount\n      relCodeRestriction\n      accountDetails {\n          orderPending\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n    }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9423900\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Status - Pending Order False - Count>1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19490",
											"*/",
											"",
											"pm.test(\"Check Status - Pending Order False - Count>1: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Status - Pending Order False - Count>1: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											" ",
											"})",
											"",
											"pm.test(\"Check Status - Pending Order False - Count>1: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails).length.to.be.greaterThan(1);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      pendingOrderFalseCount\n      relCodeRestriction\n      accountDetails {\n          orderPending\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n    }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Status - Pending Order False - Count=1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19490",
											"*/",
											"",
											"pm.test(\"Check Status - Pending Order False - Count=1:: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Status - Pending Order False - Count=1:: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Check Status - Pending Order False - Count=1: Check Status result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails.length).to.be.equal(1);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      pendingOrderFalseCount\n      relCodeRestriction\n      accountDetails {\n          orderPending\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n    }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10180827\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Status - Pending Order True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19490",
											"*/",
											"",
											"pm.test(\"Check Status - Pending Order True: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Status - Pending Order True: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Check Status - Pending Order True: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails[0].orderPending).to.be.equals(true);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      pendingOrderFalseCount\n      relCodeRestriction\n      accountDetails {\n          orderPending\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n    }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10206570\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Status - Pending Order True - Count>1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19490",
											"*/",
											"",
											"pm.test(\"Check Status - Pending Order True - Count>1: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Check Status - Pending Order True - Count>1: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Check Status - Pending Order True - Count>1: Check Status result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.pendingOrderTrueCount).to.be.greaterThan(1);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      pendingOrderFalseCount\n      relCodeRestriction\n      accountDetails {\n          orderPending\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n    }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10090862\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Status - Cif is empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19490",
											"*/",
											"",
											"pm.test(\"Check Status - Cif is empty string; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check Status  - Cif is empty string; Test for proper data structure on results and error message\", function() {",
											"    ",
											"    const { errors } = pm.response.json();",
											"",
											"",
											"    pm.expect(errors).to.be.an(\"array\");",
											"    ",
											"      errors.forEach(error => {",
											"        pm.expect(error).to.have.all.keys([\"message\", \"locations\", \"path\", \"extensions\"]);",
											"        pm.expect(error.extensions.statusCode).to.eql(500);",
											"        pm.expect(errors[0].message).to.eql(\"Please provide a cif for this request.\");",
											"})",
											"",
											"   ",
											"   ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      pendingOrderFalseCount\n      relCodeRestriction\n      accountDetails {\n          orderPending\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n    }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Status - Missing Conversation ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19490",
											"*/",
											"",
											"pm.test(\"Check Status - Missing Conversation ID: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check Status - Missing Conversation ID: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkStatus.accountDetails).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String) {\n  Accounts {\n    checkStatus(cif: $cif, conversationId: $conversationId) {\n      conversationId\n      eligibleAccounts\n      pendingOrderTrueCount\n      pendingOrderFalseCount\n      relCodeRestriction\n      accountDetails {\n          orderPending\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n    }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10206570\",\n  \"Conversationid\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Data -Missing Account Last4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-18093",
											"*/",
											"",
											"pm.test(\"Check Data -Missing Account Last4: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check Data -Missing Account Last4: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String, $accountlastfourdigits: String) {\n  Accounts {\n    checkData(cif: $cif, conversationId: $conversationId, accountlastfourdigits: $accountlastfourdigits) {\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n        detailMsg\n      }\n    }\n  }\n\n}",
										"variables": "{\n  \"cif\": \"10221994\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\",\n  \"accountlastfourdigits\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Data -Missing CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-18093",
											"*/",
											"",
											"pm.test(\"Check Data -Missing CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check Data -Missing CIF: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Please provide a cif for this request.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String, $accountlastfourdigits: String) {\n  Accounts {\n    checkData(cif: $cif, conversationId: $conversationId, accountlastfourdigits: $accountlastfourdigits) {\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n        detailMsg\n      }\n    }\n  }\n\n}",
										"variables": "{\n  \"cif\": \"\",\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297702\",\n  \"accountlastfourdigits\": \"9064\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Data -Missing conversation Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-18093",
											"*/",
											"pm.test(\"Check Data -Missing conversation Id: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check Data -Missing conversation Id: Check Status result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.checkData.accountDetails).length.to.be.greaterThan(0);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CIF",
										"value": "10124259",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $conversationId: String, $accountlastfourdigits: String) {\n  Accounts {\n    checkData(cif: $cif, conversationId: $conversationId, accountlastfourdigits: $accountlastfourdigits) {\n      accountDetails {\n        accountNickName\n        encryptedAccountNumber\n        accountNumber\n        lastOrderDate\n        orderPending\n        detailMsg\n      }\n    }\n  }\n\n}",
										"variables": "{\n  \"cif\": \"10180827\",\n  \"conversationId\": \"\",\n  \"accountlastfourdigits\": \"9064\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "idcustomer",
					"item": [
						{
							"name": "idcustomer Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"idcustomer: Valid Message Value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.message).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"idcustomer: Valid Application Value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.application).to.eql(\"Strata\");",
											"});",
											"",
											"pm.test(\"idcustomer: Valid HomeLoan Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isHomeLoanOnly).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isHomeLoanOnly).to.not.be.null",
											"});",
											"",
											"// CIIG Tests",
											"pm.test(\"idcustomer: Valid isCustomerExistCIIG Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isCustomerExistCIIG).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isCustomerExistCIIG).to.not.be.null",
											"});",
											"",
											"pm.test(\"idcustomer: Valid CIIGgreaterthanfive Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.CIIGgreaterthanfive).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.CIIGgreaterthanfive).to.not.be.null",
											"});",
											"",
											"pm.test(\"Valid isAutoOnly Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isAutoOnly).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isAutoOnly).to.not.be.null",
											"});",
											"",
											"pm.test(\"Valid isDeposits Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isDeposits).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isDeposits).to.not.be.null",
											"});",
											"",
											"// CDP/CIH Tests",
											"pm.test(\"Valid isCustomerExistCDP Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isCustomerExistCDP).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isCustomerExistCDP).to.not.be.null",
											"});",
											"",
											"pm.test(\"Valid CIHgreaterthanfive Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.CIHgreaterthanfive).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.CIHgreaterthanfive).to.not.be.null",
											"});",
											"",
											"pm.test(\"Valid IsInvestWealthStatus Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.IsInvestWealthStatus).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.IsInvestWealthStatus).to.not.be.null",
											"});",
											"",
											"pm.test(\"Valid IsInvestUnfunded Value AND not NULL\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.IsInvestUnfunded).to.be.oneOf([\"Y\", \"N\"]);",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.IsInvestUnfunded).to.not.be.null",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rzlhxt",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n  \"ani\": \"8765200013\",\n  \"conversationId\": \"nsjtrgo23324intrb\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "idcustomer Empty conversationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer Empty conversationId: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"idcustomer Empty conversationId: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable \\\"$conversationId\\\" of non-null type \\\"String!\\\" must not be null.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n  \"ani\": \"9876520041\",\n  \"conversationId\": null\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "idcustomer Missing conversationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer Missing conversationId: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"idcustomer Missing conversationId: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable \\\"$conversationId\\\" of required type \\\"String!\\\" was not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n  \"ani\": \"9876520041\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "idcustomer Successful with HomeLoan Y",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer Succesfull with Homeloan Y: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: Valid Message Value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.message).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: Valid Application Value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.application).to.eql(\"Strata\");",
											"});",
											"",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: HomeLoan as Y\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results.isHomeLoanOnly).to.be.oneOf([\"Y\", \"N\"]);",
											"});",
											"",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: IsAutoOnly as N\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"isAutoOnly\", \"N\");",
											"});",
											"",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: IsInvestWealthStatus as N\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"IsInvestWealthStatus\", \"N\");",
											"});",
											"",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: isDeposits field exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"isDeposits\");",
											"});",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: isPremier field exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"isPremier\");",
											"});",
											"",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: isCustomerExistCIIG field exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"isCustomerExistCIIG\");",
											"});",
											"",
											"",
											"pm.test(\"idcustomer Succesfull with Homeloan Y: isCustomerExistCDP field exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"isCustomerExistCDP\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n  \"ani\": \"9876590010\",\n  \"conversationId\": \"nsjtrgo23324intrb\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "idcustomer Account Does Not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer Account Does Not exists: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"idcustomer Account Does Not exists: Valid Message Value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.message).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"idcustomer Account Does Not exists: Valid Application Value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.application).to.eql(\"Strata\");",
											"});",
											"",
											"pm.test(\"idcustomer Account Does Not exists:  CIIG, CDP and HomeLoanOnly field vlaue is N\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"isCustomerExistCIIG\", \"N\");",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"isCustomerExistCDP\", \"N\");",
											"    pm.expect(jsonData.data.Customer.idCustomer.results).to.have.property(\"isHomeLoanOnly\", \"N\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n  \"ani\": \"9999999913\",\n  \"conversationId\": \"nsjtrgo23324intrb\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "idcustomer HomeLoan N",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer HomeLoan N: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"idcustomer HomeLoan N: Valid Message Value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.message).to.eql(\"OK\");",
											"});",
											"",
											"pm.test(\"idcustomer HomeLoan N: Valid Application Value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.idCustomer.application).to.eql(\"Strata\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n  \"ani\": \"9876520044\",\n  \"conversationId\": \"nsjtrgo23324intrb\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "idcustomer Missing ani",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer Missing ani: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"idCustomer Missing ani: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable \\\"$ani\\\" of required type \\\"String!\\\" was not provided.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n  \"conversationId\": \"nsjtrgo23324intrb\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "idcustomer Empty ani",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer Empty ani: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"idCustomer Empty ani: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n    \"ani\": \"\",\n  \"conversationId\": \"nsjtrgo23324intrb\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "idcustomer Null ani",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"idcustomer Empty ani: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"idCustomer Empty ani: Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable \\\"$ani\\\" of non-null type \\\"String!\\\" must not be null.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($ani: String!, $conversationId: String!) {\n  Customer {\n    idCustomer(ani: $ani, conversationId: $conversationId) {\n      id\n      message\n      status\n      error\n      isPublic\n      application\n      results {\n        isCustomerExistCIIG\n        CIIGgreaterthanfive\n        isAutoOnly\n        isPremier\n        isDeposits\n        isUnplanned1\n        isUnplanned2\n        isUnplanned3\n        isUnplanned4\n        isUnplanned5\n        isUnplanned6\n        isUnplanned7\n        isUnplanned8\n        isUnplanned9\n        isUnplanned10\n        isCustomerExistCDP\n        CIHgreaterthanfive\n        IsInvestWealthStatus\n        IsInvestUnfunded\n        IsInvestSelect\n        isHomeLoanOnly\n      }\n    }\n  }\n}",
										"variables": "{\n    \"ani\": null,\n  \"conversationId\": \"nsjtrgo23324intrb\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Balance",
					"item": [
						{
							"name": "Account Balance- Success Response",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('CIF', '10176839');",
											"pm.collectionVariables.set('accountType', 'MMA')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/bank-accounts',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'Authorization': \"Bearer \" + pm.environment.get('token'),",
											"        'CIF':pm.collectionVariables.get('CIF')",
											"    },",
											"}",
											" /*pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"            var i=0;",
											"            for(i;i<response.json().accountSummary.length;i++){",
											"                if(response.json().accountSummary[i].accountType === pm.collectionVariables.get('accountType')|| pm.collectionVariables.get('accountType') == null){",
											"                   break",
											"                }",
											"                                ",
											"            }",
											"            pm.variables.set('dapi_accName', response.json().accountSummary[i].accountNickname);  ",
											"            pm.variables.set('dapi_accId', response.json().accountSummary[i].accountId);",
											"            pm.variables.set('dapi_accountBalanceAvailable', response.json().accountSummary[i].availableBalancePvtEncrypt);",
											"            console.log(response.json().accountSummary[i].availableBalancePvtEncrypt)",
											"            pm.variables.set('dapi_accountBalanceCurrent', response.json().accountSummary[i].currentBalancePvtEncrypt);",
											"            pm.variables.set('dapi_accType', response.json().accountSummary[i].accountType);",
											"            pm.variables.set('dapi_productId', response.json().accountSummary[i].productId);",
											"            pm.variables.set('dapi_ownershipType', response.json().accountSummary[i].ownershipType);",
											"              ",
											"            if(response.json().accountSummary[i].accountNickname.includes(\"CD\"))",
											"                pm.variables.set('dapi_cdMaturityDate', response.json().accountSummary[i].cdMaturityDatePvtEncrypt) ",
											"                else",
											"                pm.variables.set('dapi_cdMaturityDate', null)",
											"        ",
											"            pm.sendRequest({",
											"                url: 'https://secure-qa1.ally.com/acs/v1/bank-accounts/'+ pm.variables.get('dapi_accId') + '/restrictions',",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type' : 'application/json',",
											"                    'Authorization': \"Bearer \" + pm.environment.get('token'),",
											"                    'CIF': pm.collectionVariables.get('CIF')",
											"                        }",
											"                        }, function (err, response_restrictions) {",
											"                        if(response_restrictions.json().hasOwnProperty('errors')){",
											"                                console.log(\"no restrictions for account\")",
											"                                pm.variables.set('dapi_restrictions',null);",
											"                        }",
											"                        else{",
											"                        pm.variables.set('dapi_restrictions_accountNumber', response_restrictions.json().restrictions[0].accountNumber);",
											"                        pm.variables.set('dapi_restrictions_code', response_restrictions.json().restrictions[0].code);",
											"                        pm.variables.set('dapi_restrictions_description', response_restrictions.json().restrictions[0].description);  ",
											"                        }",
											"            ",
											"})     ",
											"}) */"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- External Account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('CIF', '10176839');",
											"pm.collectionVariables.set('accountType', 'MMA')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/bank-accounts',",
											" method: 'GET',",
											"    header: {",
											"        'content-type' : 'application/json',",
											"        'Authorization': \"Bearer \" + pm.environment.get('token'),",
											"        'CIF':pm.collectionVariables.get('CIF')",
											"    },",
											"}",
											" /*pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"            var i=0;",
											"            for(i;i<response.json().accountSummary.length;i++){",
											"                if(response.json().accountSummary[i].accountType === pm.collectionVariables.get('accountType')|| pm.collectionVariables.get('accountType') == null){",
											"                   break",
											"                }",
											"                                ",
											"            }",
											"            pm.variables.set('dapi_accName', response.json().accountSummary[i].accountNickname);  ",
											"            pm.variables.set('dapi_accId', response.json().accountSummary[i].accountId);",
											"            pm.variables.set('dapi_accountBalanceAvailable', response.json().accountSummary[i].availableBalancePvtEncrypt);",
											"            console.log(response.json().accountSummary[i].availableBalancePvtEncrypt)",
											"            pm.variables.set('dapi_accountBalanceCurrent', response.json().accountSummary[i].currentBalancePvtEncrypt);",
											"            pm.variables.set('dapi_accType', response.json().accountSummary[i].accountType);",
											"            pm.variables.set('dapi_productId', response.json().accountSummary[i].productId);",
											"            pm.variables.set('dapi_ownershipType', response.json().accountSummary[i].ownershipType);",
											"              ",
											"            if(response.json().accountSummary[i].accountNickname.includes(\"CD\"))",
											"                pm.variables.set('dapi_cdMaturityDate', response.json().accountSummary[i].cdMaturityDatePvtEncrypt) ",
											"                else",
											"                pm.variables.set('dapi_cdMaturityDate', null)",
											"        ",
											"            pm.sendRequest({",
											"                url: 'https://secure-qa1.ally.com/acs/v1/bank-accounts/'+ pm.variables.get('dapi_accId') + '/restrictions',",
											"                method: 'GET',",
											"                header: {",
											"                    'content-type' : 'application/json',",
											"                    'Authorization': \"Bearer \" + pm.environment.get('token'),",
											"                    'CIF': pm.collectionVariables.get('CIF')",
											"                        }",
											"                        }, function (err, response_restrictions) {",
											"                        if(response_restrictions.json().hasOwnProperty('errors')){",
											"                                console.log(\"no restrictions for account\")",
											"                                pm.variables.set('dapi_restrictions',null);",
											"                        }",
											"                        else{",
											"                        pm.variables.set('dapi_restrictions_accountNumber', response_restrictions.json().restrictions[0].accountNumber);",
											"                        pm.variables.set('dapi_restrictions_code', response_restrictions.json().restrictions[0].code);",
											"                        pm.variables.set('dapi_restrictions_description', response_restrictions.json().restrictions[0].description);  ",
											"                        }",
											"            ",
											"})     ",
											"}) */"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"externalAccountIndicator\", \"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType\n        externalAccountIndicator    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10226879\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- With OwnershipType:A",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20746",
											"*/",
											"",
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- With OwnershipType:AB",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20746",
											"*/",
											"",
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- With RelCodeRestriction:T",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20746",
											"*/",
											"",
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "clientSecret",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{client_key}}",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{base_url}}access/token",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "access_token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- With RelCodeRestriction:F",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20746",
											"*/",
											"",
											"pm.test(\"Account Balance- Restrictions false: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Restrictions false: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Restrictions false: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Restrictions false: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });",
											"",
											"/*pm.test(\"Account Balance- Restrictions false: verify the reponse values\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].accountNickname).to.equal(pm.variables.get('dapi_accName'))",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].accountId).to.equal(pm.variables.get('dapi_accId'))",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].availableBalancePvtEncrypt).to.equal(pm.variables.get('dapi_accountBalanceAvailable'))",
											"    console.log(jsonData.data.Accounts.accountList.accountSummary[0].availableBalancePvtEncrypt)",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].currentBalancePvtEncrypt).to.equal( pm.variables.get('dapi_accountBalanceCurrent'))",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].cdMaturityDatePvtEncrypt).to.equal( pm.variables.get('dapi_cdMaturityDate'))",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].accountType).to.equal(pm.variables.get('dapi_accType'))",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].productId).to.equal( pm.variables.get('dapi_productId'))",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].ownershipType).to.equal( pm.variables.get('dapi_ownershipType'))",
											"",
											"    if(jsonData.data.Accounts.accountList.accountSummary[0].restrictions === null)",
											"        pm.expect(pm.variables.get('dapi_restrictions')).to.equal(null)",
											"    else{",
											"        pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].restrictions[0].accountNumber).to.equal(pm.variables.get('dapi_restrictions_accountNumber'))",
											"        pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].restrictions[0].code).to.equal( pm.variables.get('dapi_restrictions_code'))",
											"        pm.expect(jsonData.data.Accounts.accountList.accountSummary[0].restrictions[0].description).to.equal( pm.variables.get('dapi_restrictions_description'))",
											"    }",
											"})*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- Account Balance - Empty Headers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20746",
											"*/",
											"",
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- With Header acccountlastfourdigits",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20746",
											"*/",
											"",
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"5899\",\n  \"accountType\":\"\",\n  \"genesysFlags\": {\n   \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- With Header accounttype",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20746",
											"*/",
											"",
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String, $accountType: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId, accountType: $accountType) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"MMA\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balance- AccountType DDA,SDA,MMA,CDA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Chaitanya Yedumbaka",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20746",
											"*/",
											"",
											"pm.test(\"Account Balance- Only CIF: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: account Summary is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Balance- Only CIF: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountList.accountSummary[0]).to.have.keys(\"accountId\",\"accountNickname\", \"accountNumberPvtEncrypt\", \"accountType\",\"productId\",\"availableBalancePvtEncrypt\", \"currentBalancePvtEncrypt\", \"ownershipType\", \"cdMaturityDatePvtEncrypt\",\"restrictions\" );",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $genesysFlags: GenesysFlags, $conversationId: String) {\n  Accounts {\n    accountList(cif: $cif, genesysFlags: $genesysFlags, conversationId: $conversationId) {\n      conversationId\n      accountSummary {\n        accountId\n        accountNickname\n        accountNumberPvtEncrypt\n        accountType\n        productId\n        availableBalancePvtEncrypt\n        currentBalancePvtEncrypt\n        cdMaturityDatePvtEncrypt\n        ownershipType    \n        restrictions {\n          accountNumber\n          code          \n          description\n        }\n      }\n    }\n  }\n}\n\n \n\n",
										"variables": "{\n  \"cif\": \"10090862\",\n  \"acccountlastfourdigits\": \"\",\n  \"accountType\":\"\",\n   \"genesysFlags\": {\n    \"includeRestrictions\": true\n  },\n  \"conversationId\": \"75cc0c69-17ff-4e8b-9c29-6e504d297703\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Wire Status",
					"item": [
						{
							"name": "GET - Wire Status Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '235-68-9145');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : VerificationRequired: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : VerificationRequired: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : VerificationRequired: Response result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Wire Status : VerificationRequired: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0]).to.have.keys(\"wireAmount\", \"fromAccountName\", \"recipientName\",\"status\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "N1cEXBG7tIHTqqXhkVSxYBs6Kb4N",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text",
										"disabled": true
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text",
										"disabled": true
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n   \"guid\": \"\",\n  \"cif\": \"\",\n  \"conversationId\": null,\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : Cancelled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : Cancelled: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : Cancelled: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : Cancelled: Response result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Wire Status : Cancelled: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0]).to.have.keys(\"wireAmount\", \"fromAccountName\", \"recipientName\",\"status\");",
											"});",
											"",
											"pm.test(\"Wire Status : Cancelled: One of wire status is cancelled\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0].status).to.be.equal(\"Canceled\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '864-37-2709');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n  \"guid\": \"791366860868806602\",\n  \"cif\": \"10235347\",\n  \"conversationId\": \"conver112sedfsd\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : Processing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '235-68-9145');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : Processing: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : Processing: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : Processing: Response result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Wire Status : Processing: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0]).to.have.keys(\"wireAmount\", \"fromAccountName\", \"recipientName\",\"status\");",
											"",
											"});",
											"",
											"pm.test(\"Wire Status : Processing: One of wire status is Processing\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[2].status).to.be.equal(\"Processing\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n  \"guid\": \"966966447416918502\",\n  \"cif\": \"10225595\",\n  \"conversationId\": \"conver112sedfsd\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : Requested",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '235-65-8412');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : Requested: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : Requested: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : Requested: Response result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Wire Status : Requested: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0]).to.have.keys(\"wireAmount\", \"fromAccountName\", \"recipientName\",\"status\");",
											"",
											"});",
											"",
											"pm.test(\"Wire Status : Requested: One of wire status is Requested\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0].status).to.be.equal(\"Requested\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n  \"guid\": \"465566629242681601\",\n  \"cif\": \"10229830\",\n  \"conversationId\": \"requestedconvId\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : Reviewing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : Reviewing: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : Reviewing: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : Reviewing: Response result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Wire Status : Reviewing: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0]).to.have.keys(\"wireAmount\", \"fromAccountName\", \"recipientName\",\"status\");",
											"",
											"});",
											"",
											"pm.test(\"Wire Status : Reviewing: One of wire status is Reviewing\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0].status).to.be.equal(\"Reviewing\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '235-68-9145');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n  \"guid\": \"966966447416918502\",\n  \"cif\": \"10225595\",\n  \"conversationId\": \"reviewedconvId\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : Sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : Sent: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : Sent: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : Sent: Response result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Wire Status : Sent: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0]).to.have.keys(\"wireAmount\", \"fromAccountName\", \"recipientName\",\"status\");",
											"",
											"});",
											"",
											"pm.test(\"Wire Status : Sent: One of wire status is Sent\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0].status).to.be.equal(\"Sent\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '089-85-9615');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n  \"guid\": \"766766862626482202\",\n  \"cif\": \"10235557\",\n  \"conversationId\": \"sentconvId\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : VerificationRequired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : VerificationRequired: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : VerificationRequired: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : VerificationRequired: Response result should not be null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Wire Status : VerificationRequired: results array all keys are available\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[0]).to.have.keys(\"wireAmount\", \"fromAccountName\", \"recipientName\",\"status\");",
											"",
											"});",
											"",
											"pm.test(\"Wire Status : VerificationRequired: One of wire status is VerificationRequired\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.data.Accounts.wireStatus.wireAccountDetails[3].status).to.be.equal(\"VerificationRequired\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '235-68-9145');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n  \"guid\": \"966966447416918502\",\n  \"cif\": \"10225595\",\n  \"conversationId\": \"VerificationconvId\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : Relcode Restrictions True",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '235-65-8412');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : Relcode Restrictions True: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : Relcode Restrictions True: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : Wire Transfer Restrictions True: Response result should be true\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.relcodeRestrictions).to.be.equal(true)",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n  \"guid\": \"465566629242681601\",\n  \"cif\": \"10229830\",\n  \"conversationId\": \"relcodeConvId\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : Genesys flag false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '864-37-2709');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : Genesys flag false: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : Genesys flag false: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : Genesys flag false: Wire Account Details Should Be Null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"   ",
											"})",
											"pm.test(\"Wire Status : Genesys flag false: Response result should be true\", () => {",
											"     pm.expect(pm.response.json().data.Accounts.wireStatus.wireTransferAccountRestrictions).to.be.equal(false)",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n   \"guid\": \"791366860868806602\",\n  \"cif\": \"10235347\",\n  \"conversationId\": \"abndhrifiw\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":false\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : WireRestrictions true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '864-37-2709');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : WireRestrictions true: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : WireRestrictions true: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : WireRestrictions true: Wire Account Details Should Be Null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"   // pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.lengthOf(0);",
											"   // pm.expect(pm.response.json().data.Accounts.wireStatus.feedback).to.be.equal(\"No wire transfer activities found\");",
											"",
											"    ",
											"})",
											"pm.test(\"Wire Status : WireRestrictions true: Response result should be true\", () => {",
											"     pm.expect(pm.response.json().data.Accounts.wireStatus.wireTransferAccountRestrictions).to.be.equal(true)",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n   \"guid\": \"791366860868806602\",\n  \"cif\": \"10235347\",\n  \"conversationId\": \"abndhrifiw\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Wire Status : Feedback when there are no wire transfers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('ssn', '513-96-5600');",
											"pm.variables.set('pin', '1234')",
											"const getAccountBalanceFromDAPI = {",
											" url: 'https://secure-qa1.ally.com/acs/v1/oauth2/token',",
											" method: 'POST',",
											"    header: {",
											"        'content-type' : 'application/x-www-form-urlencoded',",
											"        'Authorization': 'Basic djhYTEp2U21JWlZHaXJRbEhOUk9sdkpjYlI4dUNvMjg6N01mZXpWSGhFTUZId1ZYMw==',",
											"        'Referer': 'https://secure-qa1.ally.com/',",
											"        'Cookie' : 'ally_tsv=v2'",
											"    },",
											"    body: {",
											"        mode : 'urlencoded',",
											"        urlencoded : [",
											"            { key : 'grant_type', value : 'voice'},",
											"             { key : 'ssn', value : pm.variables.get('ssn')},",
											"              { key : 'pin', value : pm.variables.get('pin')},",
											"               { key : 'scope', value : 'openid'}",
											"",
											"        ]",
											"    }",
											"}",
											"",
											"pm.sendRequest(getAccountBalanceFromDAPI, function (err, response) {",
											"     pm.collectionVariables.set('ciamToken',response.json().access_token);",
											"     console.log(pm.collectionVariables.get('ciamToken'))",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author:Sarmin Akter",
											"* @JIRA Ticket:https://jira.int.ally.com/browse/OC-19496",
											"*/",
											"",
											"pm.test(\"Wire Status : Feedback when there are no wire transfers: Response time is less than 15 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);",
											"})",
											"",
											"pm.test(\"Wire Status : Feedback when there are no wire transfers: Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Wire Status : Feedback when there are no wire transfers: Wire Account Details Should Be Null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).to.be.an(\"array\");",
											"   // pm.expect(pm.response.json().data.Accounts.wireStatus.wireAccountDetails).length.to.be.lengthOf(0);",
											"   // pm.expect(pm.response.json().data.Accounts.wireStatus.feedback).to.be.equal(\"No wire transfer activities found\");",
											"",
											"    ",
											"})",
											"pm.test(\"Wire Status : Feedback when there are no wire transfers: No wire transfer activities found\", () => {",
											"     pm.expect(pm.response.json().data.Accounts.wireStatus.feedback).to.be.equal(\"No wire transfer activities found\")",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ciamToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "jzl29c",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text"
									},
									{
										"key": "cif",
										"value": "10090858",
										"type": "text"
									},
									{
										"key": "guid",
										"value": "669063336495743602",
										"type": "text"
									},
									{
										"key": "ciam",
										"value": "Bearer DQVBhJAfQzhhPpKROXv4NTuUfm8O",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($guid: String!, $cif: String, $conversationId: String, $genesysFlags: GenesysFlags) {\n  Accounts {\n    wireStatus(guid: $guid, cif: $cif, conversationId: $conversationId, genesysFlags: $genesysFlags) {\n      feedback\n      countOfWireTransfers\n      attentionStatus\n      relcodeRestrictions\n      wireTransferAccountRestrictions\n      wireAccountDetails {\n        wireAmount\n        fromAccountName\n        recipientName\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n   \"guid\": \"122166862620370502\",\n  \"cif\": \"10235551\",\n  \"conversationId\": \"abndhrifiw\",\n  \"genesysFlags\": {\n    \"includeRestrictions\":true\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Desktop",
			"item": [
				{
					"name": "Account Beneficiaries",
					"item": [
						{
							"name": "Account Beneficiaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Beneficiaries: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Beneficiaries: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Account Beneficiaries: accounts array is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountBeneficiaries.accounts).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String!) {\n  Accounts {\n    accountBeneficiaries(cif: $cif) {\n      accounts {\n        retirementIndicator\n        transferToIndicator\n        transferFromIndicator\n        externalAccountIndicator\n        accountOpeningDate\n        interestYtd\n        interestPriorYear\n        apy\n        bankName\n        accountStatus\n        dailyInterestAccrued\n        distributionType\n        accountId\n        availableBalancePvtEncrypt\n        ownershipType\n        productId\n        accountNickname\n        accountType\n        productDescription\n        accountNumberPvtEncrypt\n        beneficiaries {\n          beneficiaryClassificationCode\n          firstName\n          middleName\n          lastName\n          dateOfBirth\n          address {\n            postAddressId\n            addressLine1\n            city\n            state\n            zipCode\n            country\n          }\n          beneficiaryId\n          allocationPercentage\n          taxIdentifier {\n            expiryDate\n            issuedDate\n            issuer\n            type\n            typeValue\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"cif\": \"9338860\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Beneficiaries - invalid cif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Beneficiaries: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Beneficiaries: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Account Beneficiaries returns valid error message\", function () {  ",
											"    var result = pm.response.json();",
											"    var { cif } = JSON.parse(pm.request.body.graphql.variables);",
											"    pm.expect(result.errors[0]).to.have.property(\"message\", `You don''t have any Ally accounts available for Mobile Banking. Please call us 24/7 for help with opening a new account. CIF: ${cif}`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String!) {\n  Accounts {\n    accountBeneficiaries(cif: $cif) {\n      accounts {\n        retirementIndicator\n        transferToIndicator\n        transferFromIndicator\n        externalAccountIndicator\n        accountOpeningDate\n        interestYtd\n        interestPriorYear\n        apy\n        bankName\n        accountStatus\n        dailyInterestAccrued\n        distributionType\n        accountId\n        availableBalancePvtEncrypt\n        ownershipType\n        productId\n        accountNickname\n        accountType\n        productDescription\n        accountNumberPvtEncrypt\n        beneficiaries {\n          beneficiaryClassificationCode\n          firstName\n          middleName\n          lastName\n          dateOfBirth\n          address {\n            postAddressId\n            addressLine1\n            city\n            state\n            zipCode\n            country\n          }\n          beneficiaryId\n          allocationPercentage\n          taxIdentifier {\n            expiryDate\n            issuedDate\n            issuer\n            type\n            typeValue\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"cif\": \"93388607\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Beneficiaries - empty cif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Beneficiaries: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Beneficiaries: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Account Beneficiaries returns valid error message\", function () {",
											"    var result = pm.response.json();",
											"    pm.expect(result.errors[0].message).to.eql(`Please provide a cif for this request.`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String!) {\n  Accounts {\n    accountBeneficiaries(cif: $cif) {\n      accounts {\n        retirementIndicator\n        transferToIndicator\n        transferFromIndicator\n        externalAccountIndicator\n        accountOpeningDate\n        interestYtd\n        interestPriorYear\n        apy\n        bankName\n        accountStatus\n        dailyInterestAccrued\n        distributionType\n        accountId\n        availableBalancePvtEncrypt\n        ownershipType\n        productId\n        accountNickname\n        accountType\n        productDescription\n        accountNumberPvtEncrypt\n        beneficiaries {\n          beneficiaryClassificationCode\n          firstName\n          middleName\n          lastName\n          dateOfBirth\n          address {\n            postAddressId\n            addressLine1\n            city\n            state\n            zipCode\n            country\n          }\n          beneficiaryId\n          allocationPercentage\n          taxIdentifier {\n            expiryDate\n            issuedDate\n            issuer\n            type\n            typeValue\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"cif\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Details",
					"item": [
						{
							"name": "Account Details - Returns correct Account Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"Sandy Test\");",
											"});",
											"",
											"pm.test(\"Request type is 'dda'\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountDetails.type).to.eql(\"dda\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"9353814\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - No CIF provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Account Restrictions should be null\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountDetails).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - No accountID provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Account Details should be null\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountDetails).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"9353814\",\n  \"accountId\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - No accountID or CIF provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Account Details should be null\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountDetails).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"\",\n  \"accountId\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - Incorrect or non-existent accountID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Account Details returns valid error message\", function () {",
											"    var result = pm.response.json();",
											"    var { cif } = JSON.parse(pm.request.body.graphql.variables);",
											"    pm.expect(result.errors[0].message).to.eql(`Error getting customer account details for CIF: ${cif}`);",
											"});",
											"",
											"pm.test(\"Account Details should be null\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountDetails).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"9353814\",\n  \"accountId\": \"1234567890\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - Incorrect or non-existent CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Account Details should be null\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountDetails).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"abcdefghijklmnop\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - Only opposite type account selected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Should return an empty object\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountDetails).to.eql({});",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on CDA {\n        type\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9353814\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - DdaMmaSda",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Details - DdaMmaSda: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Testing if ssn, beneficiaryType, relationshipToOwner are present \", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].ssn).to.eql(\"736-48-7268\");",
											"    pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].beneficiaryType).to.eql('Primary');",
											"    pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].relationshipToOwner).to.eql('Child');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n        uuid\n        coverDraftRiskLevel\n        otsAccounts {\n          otsAccountPriority\n          otsAccountNumberPvtEncrypt\n          otsAccountNickname\n          otsAvailableBalancePvtEncrypt\n          otsAccountType\n          otsAccountId\n        }\n        accountStatus\n        currentBalancePvtEncrypt\n        apy\n        availableBalancePvtEncrypt\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        limitedTransactionsRemaining\n        transferFromIndicator\n        transferToIndicator\n        accountIndex\n        interestRatePvtEncrypt\n        acctOpenDate\n        productDescription\n        interestRate\n        beneficiaries {\n          firstName\n          lastName\n          middleName\n          beneficiaryName\n          allocationPercentage\n          dateOfBirth\n          beneficiaryId\n          ssn\n          beneficiaryType\n          beneficiaryClassificationCode\n          relationshipToOwner\n          address {\n            country\n            city\n            addressLine1\n            addressLine2\n            zipCode\n            postAddressId\n            state\n          }\n        }\n        interestWithheldYtd\n        interestWithheldLastYear\n        nextStatementDate\n        accountNickname\n        productId\n        accountNumberPvtEncrypt\n        accountType\n        allowanceCustomerReqAmount\n        consecutiveNegBalanceDays\n        allowanceCurrentAmount\n        ownershipType\n        allowanceEligibilityIndicator\n        allowanceCustomerIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9539758\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ1jDUjngG0fUvbdqM6fkVWX42QeSCnzI2RS7LNPINCgI9B6SCT6yuiIuu4VFQKMIkQ\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - CMG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Rene Osman",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19350",
											"*/",
											"",
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Make sure Account Id matches\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountIndex).to.eql(\"ZUZoalduMVRNZFNTUjhTZwvt4yAzVdEoiyn1120uRFxvC1p5BTWPxRzvRzETKFqnJgAXHYySMg9almWhXs45Iw\");",
											"});",
											"",
											"pm.test(\"Make sure Account type is CMG\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountType).to.eql('CMG');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on CDA {\n        coverDraftRiskLevel\n        coverageAmountOptions\n        ownerNames\n        currentBalancePvtEncrypt\n        helocAvailableBalancePvtEncrypt\n        availableBalancePvtEncrypt\n        apy\n        accountStatus\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        helocCreditLimitPvtEncrypt\n        helocBalancePvtEncrypt\n        transferFromIndicator\n        transferToIndicator\n        productDescription\n        acctOpenDate\n        interestRate\n        interestWithheldYtd\n        interestWithheldLastYear\n        accountIndex\n        retirementAccountIndicator\n        interestRatePvtEncrypt\n        accountNickname\n        accountType\n        ownershipType\n        allowanceCustomerIndicator\n        allowanceCustomerReqAmount\n        accountNumberPvtEncrypt\n        consecutiveNegBalanceDays\n        productId\n        limitedTransactionsRemaining\n        allowanceCurrentAmount\n        allowanceEligibilityIndicator\n        directDepositEligibilityIndicator\n        alwaysMaxAmountIndicator\n        earlyDirectEligibilityIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9281247\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZwvt4yAzVdEoiyn1120uRFxvC1p5BTWPxRzvRzETKFqnJgAXHYySMg9almWhXs45Iw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - DOB Correct format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Date of birth passes regex pattern test\", function () {",
											"",
											"    var regex = new RegExp('^[0-3][0-9]/[0-3][0-9]/(?:[0-9][0-9])?[0-9][0-9]$');",
											"    var jsonData = pm.response.json();",
											"    var dob = jsonData.data.Accounts.accountDetails.beneficiaries[0].dateOfBirth;",
											"    pm.expect(regex.test(dob)).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        beneficiaries {\n          dateOfBirth\n        }\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"9353814\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - DOB Missing CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Account details should be null\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails).to.eql(null);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        beneficiaries {\n          dateOfBirth\n        }\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - DOB Misspelled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    console.log(jsonData)",
											"    pm.expect(jsonData.errors[0].message).to.eql('Cannot query field \"dateofBirth\" on type \"Beneficiary\". Did you mean \"dateOfBirth\"?');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        beneficiaries {\n          dateofBirth\n        }\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - Returns OTS account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.otsAccounts[0].otsAccountPriority).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        otsAccounts {\n          otsAccountPriority\n          otsAccountNumberPvtEncrypt\n          otsAccountNickname\n          otsAvailableBalancePvtEncrypt\n          otsAccountType\n          otsAccountId\n        }\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"9353814\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - OTS account missing CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Account details should be null\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails).to.eql(null);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n        otsAccounts {\n          otsAccountPriority\n          otsAccountNumberPvtEncrypt\n          otsAccountNickname\n          otsAvailableBalancePvtEncrypt\n          otsAccountType\n          otsAccountId\n        }\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - OTS account invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    console.log(jsonData)",
											"    pm.expect(jsonData.errors[0].message).to.eql('Cannot query field \"test\" on type \"OTSAccounts\".');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n        otsAccounts {\n            test\n        }\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - Special Characters in CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Details: getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Details: Should return an error\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Account Details: should be null\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountDetails).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"*353814\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - Returns OTS invalid account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Details returns valid error message\", function () {",
											"    var result = pm.response.json();",
											"    var { cif } = JSON.parse(pm.request.body.graphql.variables);",
											"    pm.expect(result.errors[0].message).to.eql(`Error getting customer account details for CIF: ${cif}`);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        otsAccounts {\n          otsAccountPriority\n          otsAccountNumberPvtEncrypt\n          otsAccountNickname\n          otsAvailableBalancePvtEncrypt\n          otsAccountType\n          otsAccountId\n        }\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"9353814\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_989797967KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - DdaMmaSda - Returns originationLocation and title field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"get Account details: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Testing if origination location, title are present \", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.originationLocation).to.eql(\"Customer Portal\");",
											"    pm.expect(jsonData.data.Accounts.accountDetails.title[0]).to.eql('Sandy Test');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "kzh9x7",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownershipType\n        allowanceEligibilityIndicator\n        allowanceCustomerIndicator\n        title\n        originationLocation\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9353814\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - CDA Returns Origination Location and Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"get Account details: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Testing if origination location, title are present \", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.originationLocation).to.eql(\"Telephone\");",
											"    pm.expect(jsonData.data.Accounts.accountDetails.title[0]).to.eql('February Newuser');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "kzh9x7",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on CDA {\n        lastRenewalDate\n        title\n        originationLocation\n        ownershipType\n        allowanceCurrentAmount\n        allowanceCustomerIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338860\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ54fqfLJkfuM0xuqy4xmFdVLfxwf-oZZ9HjiyFs5mPCMWuHIVTTeo59vtqIhLXZc7g\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields for the Account Details of a CDA Account.\n\n**API Spec:** [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/288239/editor/390030](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/288239/editor/390030)"
							},
							"response": []
						},
						{
							"name": "Account Details - DdaMmaSda - IRA accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//NOTE: We are no longer querying for SSN, beneficiaryType, relationshipToOwner",
											"pm.test(\"Testing if ssn, beneficiaryType, relationshipToOwner are present \", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    //pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].ssn).to.eql(\"736-48-7268\");",
											"    //pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].beneficiaryType).to.eql('Primary');",
											"    //pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].relationshipToOwner).to.eql('Child');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rzlhxt",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n        uuid\n        coverDraftRiskLevel\n        otsAccounts {\n          otsAccountPriority\n          otsAccountNumberPvtEncrypt\n          otsAccountNickname\n          otsAvailableBalancePvtEncrypt\n          otsAccountType\n          otsAccountId\n        }\n        accountStatus\n        currentBalancePvtEncrypt\n        apy\n        availableBalancePvtEncrypt\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        limitedTransactionsRemaining\n        transferFromIndicator\n        transferToIndicator\n        accountIndex\n        interestRatePvtEncrypt\n        acctOpenDate\n        productDescription\n        interestRate\n        beneficiaries {\n          firstName\n          lastName\n          middleName\n          beneficiaryName\n          allocationPercentage\n          dateOfBirth\n          beneficiaryId\n          beneficiaryClassificationCode\n          address {\n            country\n            city\n            addressLine1\n            addressLine2\n            zipCode\n            postAddressId\n            state\n          }\n        }\n        interestWithheldYtd\n        interestWithheldLastYear\n        nextStatementDate\n        accountNickname\n        productId\n        accountNumberPvtEncrypt\n        accountType\n        allowanceCustomerReqAmount\n        consecutiveNegBalanceDays\n        allowanceCurrentAmount\n        ownershipType\n        allowanceEligibilityIndicator\n        allowanceCustomerIndicator\n        originationLocation\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"9353814\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - DdaMmaSda - non IRA account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//NOTE: We are no longer querying for SSN, beneficiaryType, relationshipToOwner",
											"pm.test(\"Testing if ssn, beneficiaryType, relationshipToOwner are present \", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    //pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].ssn).to.eql(\"736-48-7268\");",
											"    //pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].beneficiaryType).to.eql('Primary');",
											"    //pm.expect(jsonData.data.Accounts.accountDetails.beneficiaries[0].relationshipToOwner).to.eql('Child');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n        uuid\n        coverDraftRiskLevel\n        otsAccounts {\n          otsAccountPriority\n          otsAccountNumberPvtEncrypt\n          otsAccountNickname\n          otsAvailableBalancePvtEncrypt\n          otsAccountType\n          otsAccountId\n        }\n        accountStatus\n        currentBalancePvtEncrypt\n        apy\n        availableBalancePvtEncrypt\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        limitedTransactionsRemaining\n        transferFromIndicator\n        transferToIndicator\n        accountIndex\n        interestRatePvtEncrypt\n        acctOpenDate\n        productDescription\n        interestRate\n        beneficiaries {\n          firstName\n          lastName\n          middleName\n          beneficiaryName\n          allocationPercentage\n          dateOfBirth\n          beneficiaryId\n          beneficiaryClassificationCode\n          address {\n            country\n            city\n            addressLine1\n            addressLine2\n            zipCode\n            postAddressId\n            state\n          }\n        }\n        interestWithheldYtd\n        interestWithheldLastYear\n        nextStatementDate\n        accountNickname\n        productId\n        accountNumberPvtEncrypt\n        accountType\n        allowanceCustomerReqAmount\n        consecutiveNegBalanceDays\n        allowanceCurrentAmount\n        ownershipType\n        allowanceEligibilityIndicator\n        allowanceCustomerIndicator\n      }\n    }\n  }\n}",
										"variables": "\n{\n  \"cif\": \"9548370\",\n  \"accountId\":\"ZUZoalduMVRNZFNTUjhTZ5i0M_tH5cyOTGz9HZOXA2VYGI4V0avBk3NF-q9TUF2gl4C6TrjN6wJ1RuM3pbbkkQ\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Restrictions",
					"item": [
						{
							"name": "Account Restrictions - No CIF Provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Account Restrictions should be null\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountRestrictions).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzkTKc5CXrAXEglZtT1oXvuxxMV_pkHVwVNBgvfK1HjaLYjKcoK58SgHyJMqlrACzQ\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Restrictions - No Account ID Provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should return an error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"pm.test(\"Account Restrictions should be null\", function () {",
											"    var result = pm.response.json();",
											"    console.log(result.data);",
											"    pm.expect(result.data.Accounts.accountRestrictions).to.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338860\",\n  \"accountId\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Restrictions - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"accountRestrictions result should be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"accountRestrictions result should have the appropriate data structure\", () => {",
											"    pm.response.json().data.Accounts.accountRestrictions.forEach(accountRestriction => {",
											"        pm.expect(accountRestriction).to.have.all.keys('description', 'code', 'memo', 'accountNumber', 'expirationDate', 'startDate');",
											"",
											"        pm.expect(accountRestriction.code).to.be.not.eq(null);",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338860\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzkTKc5CXrAXEglZtT1oXvuxxMV_pkHVwVNBgvfK1HjaLYjKcoK58SgHyJMqlrACzQ\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Restrictions - Successful Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"accountRestrictions result should be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"accountRestrictions result should have the appropriate data structure\", () => {",
											"    pm.response.json().data.Accounts.accountRestrictions.forEach(accountRestriction => {",
											"        pm.expect(accountRestriction).to.have.all.keys('description', 'code', 'memo', 'accountNumber', 'expirationDate', 'startDate');",
											"",
											"        pm.expect(accountRestriction.code).to.be.not.eq(null);",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"1695360\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ5vTi_M_ZvS64EDMr-QnOfR8w_BfnjVAw-nsUYfoScOxuacA4zBnhzIvWS4QFIbexg\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account with No Restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"accountRestrictions result should not be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).to.not.be.an(\"array\");",
											"})",
											"",
											"pm.test(\"accountRestrictions result should have the appropriate data structure\", () => {",
											"    pm.expect(pm.response.json().data.Accounts).to.have.all.keys('accountRestrictions');",
											"})",
											"",
											"pm.test(\"accountRestrictions result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).to.eq(null);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338860\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ8PE5EAMybzq9kLNEhGyAMpI1DknfDxGzJqqnN1AHsEk1fkrzJRjmmhIS6dLEn7c4A\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Restrictions",
					"item": [
						{
							"name": "Successful - Account Restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"accountRestrictions result should be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"accountRestrictions result should have the appropriate data structure\", () => {",
											"    pm.response.json().data.Accounts.accountRestrictions.forEach(accountRestriction => {",
											"        pm.expect(accountRestriction).to.have.all.keys('description', 'code', 'memo', 'accountNumber', 'expirationDate', 'startDate');",
											"",
											"        pm.expect(accountRestriction.code).to.be.not.eq(null);",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "ab12c3",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338860\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzkTKc5CXrAXEglZtT1oXvuxxMV_pkHVwVNBgvfK1HjaLYjKcoK58SgHyJMqlrACzQ\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Error - Account Restrictions Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"returns valid error message\", function () {  ",
											"    var result = pm.response.json();",
											"    var { accountId } = JSON.parse(pm.request.body.graphql.variables);",
											"    pm.expect(result.errors[0]).to.have.property(\"message\", `Error getting account restrictions for account id: ${accountId}`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "ab12c3",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"93388607\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzkTKc5CXrAXEglZtT1oXvuxxMV_pkHVwVNBgvfK1HjaLYjKcoK58SgHyJMqlrACzQ\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account with No Restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"accountRestrictions result should not be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).to.not.be.an(\"array\");",
											"})",
											"",
											"pm.test(\"accountRestrictions result should have the appropriate data structure\", () => {",
											"    pm.expect(pm.response.json().data.Accounts).to.have.all.keys('accountRestrictions');",
											"})",
											"",
											"pm.test(\"accountRestrictions result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).to.eq(null);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338860\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ8PE5EAMybzq9kLNEhGyAMpI1DknfDxGzJqqnN1AHsEk1fkrzJRjmmhIS6dLEn7c4A\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Transactions",
					"item": [
						{
							"name": "Account Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Transactions: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Transactions: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Account Transactions: results array is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountTransactions.searchResults).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($cif: String!, $input: TransactionSearch) {\n  Accounts {\n    accountTransactions(cif: $cif, input: $input) {\n      searchResults {\n        accountNumberPvtEncrypt\n        accountNumber\n        accountType\n        accountStatus\n        transactionHistory {\n          transactionStatusType\n          matchedRecordsTotal\n          recordsOnThisPage\n          transactions {\n            transactionIndex\n            transactionPostingDate\n            transactionEffectiveDate\n            transactionAmountPvtEncrypt\n            transactionBalancePvtEncrypt\n            transactionCheckNumberPvtEncrypt\n            transactionDescription\n            transactionStatus\n            transactionDetailUrl\n            transactionSequenceNumber\n            memo\n            checkTransactionIndicator\n            transactionType\n            transactionCode\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9353814\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\",\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\"\n    },\n    \"recordsToPull\": 5\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Transactions - Limited results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Transactions: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Transactions: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Account Transactions: results array is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountTransactions.searchResults).that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Account Transaction: limit of 10 items in results array\", function () {",
											"    var jsonData = pm.response.json();",
											"    // ...searchResults[0] is pending transactions",
											"    // ...searchResults[1] are posted transactions",
											"    pm.expect(jsonData.data.Accounts.accountTransactions.searchResults[0].transactionHistory[0].transactions.length).to.equal(10)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($cif: String!, $input: TransactionSearch) {\n  Accounts {\n    accountTransactions(cif: $cif, input: $input) {\n      searchResults {\n        accountNumberPvtEncrypt\n        accountNumber\n        accountType\n        accountStatus\n        transactionHistory {\n          transactionStatusType\n          matchedRecordsTotal\n          recordsOnThisPage\n          transactions {\n            transactionIndex\n            transactionPostingDate\n            transactionEffectiveDate\n            transactionAmountPvtEncrypt\n            transactionBalancePvtEncrypt\n            transactionCheckNumberPvtEncrypt\n            transactionDescription\n            transactionStatus\n            transactionDetailUrl\n            transactionSequenceNumber\n            memo\n            checkTransactionIndicator\n            transactionType\n            transactionCode\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9353814\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\",\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\"\n    },\n    \"recordsToPull\": 10\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Transactions - No CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Transactions: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Transactions: Error code is 400\", function () {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().errors[0].extensions.statusCode).to.equal(500)",
											"})",
											"",
											"pm.test(\"Account Transactions: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Account Transactions returns valid error message\", function () {  ",
											"    var result = pm.response.json();",
											"    pm.expect(result.errors[0]).to.have.property(\"message\", `Please provide a cif for this request.`);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($cif: String!, $input: TransactionSearch) {\n  Accounts {\n    accountTransactions(cif: $cif, input: $input) {\n      searchResults {\n        accountNumberPvtEncrypt\n        accountNumber\n        accountType\n        accountStatus\n        transactionHistory {\n          transactionStatusType\n          matchedRecordsTotal\n          recordsOnThisPage\n          transactions {\n            transactionIndex\n            transactionPostingDate\n            transactionEffectiveDate\n            transactionAmountPvtEncrypt\n            transactionBalancePvtEncrypt\n            transactionCheckNumberPvtEncrypt\n            transactionDescription\n            transactionStatus\n            transactionDetailUrl\n            transactionSequenceNumber\n            memo\n            checkTransactionIndicator\n            transactionType\n            transactionCode\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZ_jq4vyeQqTt1jZ-07onLeQBbhPIBjesDIJ2os_7KHIyh7tLy6FOEs27tO9jhNhycw\",\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\"\n    },\n    \"recordsToPull\": 5\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Transactions - No Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Transactions: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Transactions: Error code is 400\", function () {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().errors[0].extensions.statusCode).to.equal(400)",
											"})",
											"",
											"pm.test(\"Account Transactions: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Account Transactions returns valid error message\", function () {",
											"    var result = pm.response.json();",
											"    var { cif } = JSON.parse(pm.request.body.graphql.variables);",
											"    pm.expect(result.errors[0].message).to.eql(`Error getting account transactions for cif: ${cif}`);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($cif: String!, $input: TransactionSearch) {\n  Accounts {\n    accountTransactions(cif: $cif, input: $input) {\n      searchResults {\n        accountNumberPvtEncrypt\n        accountNumber\n        accountType\n        accountStatus\n        transactionHistory {\n          transactionStatusType\n          matchedRecordsTotal\n          recordsOnThisPage\n          transactions {\n            transactionIndex\n            transactionPostingDate\n            transactionEffectiveDate\n            transactionAmountPvtEncrypt\n            transactionBalancePvtEncrypt\n            transactionCheckNumberPvtEncrypt\n            transactionDescription\n            transactionStatus\n            transactionDetailUrl\n            transactionSequenceNumber\n            memo\n            checkTransactionIndicator\n            transactionType\n            transactionCode\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9353814\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"\",\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\"\n    },\n    \"recordsToPull\": 5\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account List",
					"item": [
						{
							"name": "Account List - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Reponse should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountList).to.have.all.keys(\"accountSummary\", \"isNewCustomer\");",
											"});",
											"pm.test(\"Reponse should return accountList array\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!) {\n  Accounts {\n    accountList(cif: $cif) {\n      accountSummary {\n        bankname\n        cfiid\n        accountDetailUrl\n        accountId\n        apy\n        restrictions {\n            code\n        }\n      }\n      isNewCustomer\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10208643\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account List - Missing CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Reponse should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!) {\n  Accounts {\n    accountList(cif: $cif) {\n      accountSummary {\n        bankname\n        cfiid\n        accountDetailUrl\n        accountId\n        apy\n      }\n      isNewCustomer\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account List - CIF empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"});",
											"",
											"pm.test(\"Account List returns valid error message\", function () {",
											"    var result = pm.response.json();",
											"    pm.expect(result.errors[0].message).to.eql(`Please provide a cif for this request.`);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!) {\n  Accounts {\n    accountList(cif: $cif) {\n      accountSummary {\n        bankname\n        cfiid\n        accountDetailUrl\n        accountId\n        apy\n      }\n      isNewCustomer\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account List - Invalid CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Reponse should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountList).to.have.all.keys(\"accountSummary\", \"isNewCustomer\");",
											"});",
											"pm.test(\"Reponse should return accountList array\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!) {\n  Accounts {\n    accountList(cif: $cif) {\n      accountSummary {\n        bankname\n        cfiid\n        accountDetailUrl\n        accountId\n        apy\n      }\n      isNewCustomer\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9353814\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account List - Cif does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account List returns valid error message\", function () {  ",
											"    var result = pm.response.json();",
											"    var { cif } = JSON.parse(pm.request.body.graphql.variables);",
											"    pm.expect(result.errors[0]).to.have.property(\"message\", `You don't have any Ally accounts available for Mobile Banking. Please call us 24/7 for help with opening a new account. CIF: ${cif}`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!) {\n  Accounts {\n    accountList(cif: $cif) {\n      accountSummary {\n        bankname\n        cfiid\n        accountDetailUrl\n        accountId\n        apy\n      }\n      isNewCustomer\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"93538147\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account List - Null CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Reponse should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountList).to.have.all.keys(\"accountSummary\", \"isNewCustomer\");",
											"});",
											"pm.test(\"Reponse should return accountList array\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Accounts.accountList.accountSummary).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rzlhxt",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!) {\n  Accounts {\n    accountList(cif: $cif) {\n      accountSummary {\n        bankname\n        cfiid\n        accountDetailUrl\n        accountId\n        apy\n      }\n      isNewCustomer\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9353814\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Appointments",
					"item": [
						{
							"name": "Create Appointment",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query CreateAppointment($input: createAppointmentInput) {\n  Appointments {\n    createAppointment(input: $input) {\n      assignedResourceIds\n      serviceAppointmentId\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"parentRecordId\": \"0018M00000Fh9RFQAZ\",\n    \"email\": \"jeffrey@ally.com\",\n    \"startTime\": \"2022-12-02T01:00:00.000+0000\",\n    \"endTime\": \"2022-12-02T02:15:00.000+0000\",\n    \"assignedResources\": [{\n        \"serviceResourceId\": \"0Hn8M000000GsKESA0\",\n        \"isRequiredResource\": true,\n        \"isPrimaryResource\": true\n      }]\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authenticators",
					"item": [
						{
							"name": "Primary",
							"item": [
								{
									"name": "Primary Authenticators",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Primary Auth: Response time is less than 10s\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);",
													"});",
													"",
													"pm.test(\"Primary Auth: Status code 200\", function () {",
													"    console.log('Status code is: ', pm.response.code);",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Primary Auth: Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Primary Auth: Status code 200\", function () {",
													"    console.log('Status code is: ', pm.response.code);",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Primary Auth: Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Primary Auth: validate firstName\", function () {  ",
													"pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"firstNamePvtEncrypt\", \"Leslie\");",
													"});",
													"",
													"//BUG: https://jira.int.ally.com/browse/OC-16089",
													"pm.test(\"Primary Auth: validate lastName\", function () {",
													"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"lastName\", \"Johnson\");",
													"    pm.expect(jsonData.data.Customer.primaryAuthenticators.lastName).contains(\"Johnson\");",
													"",
													"});",
													"//Test Update: Display last 4 only https://jira.int.ally.com/browse/OC-16095",
													"pm.test(\"Primary Auth: validate SSN\", function () {",
													"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"ssnPvtblock\", \"XXX-XX-9828\");",
													"});",
													"pm.test(\"Primary Auth: validate DOB\", function () {",
													"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"birthDatePvtEncrypt\",\"05/11/1964\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "xz5wcm",
												"type": "text"
											},
											{
												"key": "Referer",
												"value": "secure-qa2",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $input: PrimaryAuthenticator) {\n  Customer(uid: $uid, type: $type) {\n    primaryAuthenticators(input: $input) {\n      firstNamePvtEncrypt\n      lastName\n      ssnPvtblock\n      birthDatePvtEncrypt\n      customerId\n      mothersMaidenName\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"searchBy\": \"CIF\",\n    \"customerId\": \"10135421\"\n  },\n  \"uid\": \"10135421\",\n  \"type\": \"DEPOSITS\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Primary Authenticators-InValid CIF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 10s\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);",
													"});",
													"",
													"pm.test(\"Primary Auth: Status code 200\", function () {",
													"    console.log('Status code is: ', pm.response.code);",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Primary Auth: validate invalid CIF errorMessage\", function () {  ",
													"    var { input } = JSON.parse(pm.request.body.graphql.variables);",
													"    pm.expect(jsonData.errors[0]).to.have.property(\"message\", `No customer details found for: ${input.customerId}`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "rzlhxt",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $input: PrimaryAuthenticator) {\n  Customer(uid: $uid, type: $type) {\n    primaryAuthenticators(input: $input) {\n       firstNamePvtEncrypt\n      lastName\n      ssnPvtblock\n      birthDatePvtEncrypt\n      customerId\n      mothersMaidenName\n      passPhraseQuestion\n      passPhraseAnswer\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"searchBy\": \"CIF\",\n    \"customerId\": \"2820969999Z\"\n  },\n  \"uid\": \"\",\n  \"type\": \"\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Primary Authenticators-Valid CIF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Primary Auth: Response time is less than 10s\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);",
													"});",
													"",
													"pm.test(\"Primary Auth: Status code 200\", function () {",
													"    console.log('Status code is: ', pm.response.code);",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Primary Auth: Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Primary Auth: validate firstName\", function () {  ",
													"pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"firstNamePvtEncrypt\", \"Leslie\");",
													"});",
													"",
													"//BUG: https://jira.int.ally.com/browse/OC-16089",
													"pm.test(\"Primary Auth: validate lastName\", function () {",
													"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"lastName\", \"Johnson\");",
													"    pm.expect(jsonData.data.Customer.primaryAuthenticators.lastName).contains(\"Johnson\");",
													"",
													"});",
													"//Test Update: Display last 4 only https://jira.int.ally.com/browse/OC-16095",
													"pm.test(\"Primary Auth: validate SSN\", function () {",
													"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"ssnPvtblock\", \"XXX-XX-9828\");",
													"});",
													"pm.test(\"Primary Auth: validate DOB\", function () {",
													"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"birthDatePvtEncrypt\",\"05/11/1964\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "xz5wcm",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $input: PrimaryAuthenticator) {\n  Customer(uid: $uid, type: $type) {\n    primaryAuthenticators(input: $input) {\n       firstNamePvtEncrypt\n      lastName\n      ssnPvtblock\n      birthDatePvtEncrypt\n      customerId\n      mothersMaidenName\n      passPhraseQuestion\n      passPhraseAnswer\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"searchBy\": \"CIF\",\n    \"customerId\": \"10135421\"\n  },\n  \"uid\": \"10135421\",\n  \"type\": \"DEPOSITS\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Boosters",
					"item": [
						{
							"name": "Get Boosters - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Boosters: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get Boosters: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Boosters.boosters.boosters[0]).to.have.all.keys(\"boosterType\", \"accountBoosterId\", \"boosterStatus\");",
											"});",
											"pm.test(\"Get Boosters: Response should return boosters array\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Boosters.boosters.boosters).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Boosters($cif: String!, $accountId: String!, $guid: String!) {\n  Boosters {\n    boosters(cif: $cif, accountId: $accountId, guid: $guid) {\n      boosters {\n        boosterType\n        accountBoosterId\n        boosterStatus\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338652\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzONwfWoEnQDxsQz0VWwaMOkhEFdTl7hgmrrR5R6qrFGi4VGI41yelnZ0FDGwLMj9g\",\n  \"guid\": \"298458096919118802\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Boosters - Missing CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Boosters: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get Boosters: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Boosters($cif: String!, $accountId: String!, $guid: String!) {\n  Boosters {\n    boosters(cif: $cif, accountId: $accountId, guid: $guid) {\n      boosters {\n        boosterType\n        accountBoosterId\n        boosterStatus\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzONwfWoEnQDxsQz0VWwaMOkhEFdTl7hgmrrR5R6qrFGi4VGI41yelnZ0FDGwLMj9g\",\n  \"guid\": \"298458096919118802\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Boosters - Empty CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Boosters: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get Boosters: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"});",
											"",
											"pm.test(\"Get Boosters: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`Please provide a cif, guid, and account id for this request.`);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Boosters($cif: String!, $accountId: String!, $guid: String!) {\n  Boosters {\n    boosters(cif: $cif, accountId: $accountId, guid: $guid) {\n      boosters {\n        boosterType\n        accountBoosterId\n        boosterStatus\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzONwfWoEnQDxsQz0VWwaMOkhEFdTl7hgmrrR5R6qrFGi4VGI41yelnZ0FDGwLMj9g\",\n  \"guid\": \"298458096919118802\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Boosters - Missing Account ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Boosters: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get Boosters: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Boosters($cif: String!, $accountId: String!, $guid: String!) {\n  Boosters {\n    boosters(cif: $cif, accountId: $accountId, guid: $guid) {\n      boosters {\n        boosterType\n        accountBoosterId\n        boosterStatus\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338652\",\n  \"guid\": \"298458096919118802\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Boosters - Empty Account ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Boosters: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get Boosters: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"});",
											"",
											"pm.test(\"Get Boosters: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`Please provide a cif, guid, and account id for this request.`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Boosters($cif: String!, $accountId: String!, $guid: String!) {\n  Boosters {\n    boosters(cif: $cif, accountId: $accountId, guid: $guid) {\n      boosters {\n        boosterType\n        accountBoosterId\n        boosterStatus\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338652\",\n  \"accountId\": \"\",\n  \"guid\": \"298458096919118802\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Boosters - Missing GUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Boosters: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get Boosters: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Boosters($cif: String!, $accountId: String!, $guid: String!) {\n  Boosters {\n    boosters(cif: $cif, accountId: $accountId, guid: $guid) {\n      boosters {\n        boosterType\n        accountBoosterId\n        boosterStatus\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338652\",\n  \"guid\": \"298458096919118802\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Boosters - Empty GUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Boosters: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get Boosters: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"});",
											"",
											"pm.test(\"Get Boosters: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`Please provide a cif, guid, and account id for this request.`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Boosters($cif: String!, $accountId: String!, $guid: String!) {\n  Boosters {\n    boosters(cif: $cif, accountId: $accountId, guid: $guid) {\n      boosters {\n        boosterType\n        accountBoosterId\n        boosterStatus\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9338652\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZzONwfWoEnQDxsQz0VWwaMOkhEFdTl7hgmrrR5R6qrFGi4VGI41yelnZ0FDGwLMj9g\",\n  \"guid\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Buckets",
					"item": [
						{
							"name": "Get Spending Buckets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Spending Buckets: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Spending Buckets: Response time less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"});",
											"",
											"pm.test(\"Get Spending Buckets: Buckets Array Exists\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.Buckets.getSpendingBuckets.buckets).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($accountId: String!, $cif: String!, $guid: String!) {\n  Buckets {\n    getSpendingBuckets(accountId: $accountId, cif: $cif, guid: $guid) {\n      buckets {\n        toolkitBucketId\n        categoryId\n        categoryCode\n        bucketCategoryName\n        bucketName\n        bucketBalance\n        overspendPriority\n        overspendIndicator\n        bucketTargetAmount\n        frequencyCode\n        frequencyName\n        bucketTargetDate\n        bucketCreationDate\n        IsUnallocatedBucket\n        autoDistributeIndicator\n        nextExpenseDescription\n        bucketBalanceLastUpdateDate\n        targetAmountFillIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZxq9aqkmuNVcKAFEkVeAa32hZ6ilsfn8-TBJZc2rH6XOaPhSeGRXP1q9fEt03ta_fw\",\n  \"cif\": \"10227260\",\n  \"guid\": \"703466516436099702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "Get spending buckets.\n\n**Please pass accountId as encrypted or response will return 400**\n\nAPI Spec: [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407)"
							},
							"response": []
						},
						{
							"name": "Get Spending Buckets Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Spending Buckets: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Spending Buckets: Response time less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"});",
											"",
											"pm.test(\"Get Spending Buckets: Buckets Array Exists\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.Buckets.getSpendingBuckets.buckets).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($accountId: String!, $cif: String!, $guid: String!) {\n  Buckets {\n    getSpendingBuckets(accountId: $accountId, cif: $cif, guid: $guid) {\n      buckets {\n        toolkitBucketId\n        categoryId\n        categoryCode\n        bucketCategoryName\n        bucketName\n        bucketBalance\n        overspendPriority\n        overspendIndicator\n        bucketTargetAmount\n        frequencyCode\n        frequencyName\n        bucketTargetDate\n        bucketCreationDate\n        IsUnallocatedBucket\n        autoDistributeIndicator\n        nextExpenseDescription\n        bucketBalanceLastUpdateDate\n        targetAmountFillIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZxq9aqkmuNVcKAFEkVeAa32hZ6ilsfn8-TBJZc2rH6XOaPhSeGRXP1q9fEt03ta_fw\",\n  \"cif\": \"10227260\",\n  \"guid\": \"703466516436099702\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "Get spending buckets.\n\n**Please pass accountId as encrypted or response will return 400**\n\nAPI Spec: [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407)"
							},
							"response": []
						},
						{
							"name": "Delete Spending Buckets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Spending Buckets: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Spending Buckets: Response time less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"});",
											"",
											"// pm.test(\"Get Spending Buckets: Buckets Array Exists\", function () {",
											"//     const json = pm.response.json();",
											"//     pm.expect(json.data.Buckets.getSpendingBuckets.buckets).to.be.an('array');",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountId: String!, $cif: String!, $bucketId: String!) {\n  Buckets {\n    deleteSpendingBucket(accountId: $accountId, cif: $cif, bucketId: $bucketId) {\n      buckets {\n        toolkitBucketId\n        categoryId\n        categoryCode\n        bucketCategoryName\n        bucketName\n        bucketBalance\n        overspendPriority\n        overspendIndicator\n        bucketTargetAmount\n        frequencyCode\n        frequencyName\n        bucketTargetDate\n        bucketCreationDate\n        IsUnallocatedBucket\n        autoDistributeIndicator\n        nextExpenseDescription\n        bucketBalanceLastUpdateDate\n        targetAmountFillIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZyfR685Ih1aGekqRhZ7x4H4JWaVFOrNJOzJDBSGeKpRmB0eKHnzopuIggb9RLJviEA\",\n  \"cif\": \"10224128\",\n  \"bucketId\": \"E999FE8A635C6D9EE05304D32D0AF10A\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "Get spending buckets.\n\n**Please pass accountId as encrypted or response will return 400**\n\nAPI Spec: [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407)"
							},
							"response": []
						}
					]
				},
				{
					"name": "Bucket Transactions",
					"item": [
						{
							"name": "Get Bucket Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Bucket Transactionss: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Bucket Transactions: Response time less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"});",
											"",
											"pm.test(\"Get Bucket Transactions: Buckets Array Exists\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.Accounts.bucketTransactions.bucket).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Get Buckets transactions should contain required fields\", function() {",
											"        pm.response.json().data.Accounts.bucketTransactions.bucket.postedTransactions.forEach(response => {",
											"            pm.expect(response).to.have.all.keys('bucketTransactionId', 'toolkitBucketId', 'transactionDate', 'transactionAmount', 'transactionDescription', 'merchantId','cleansedTransactionAmount','isGreyedOut','isMoveable','created','transactionTypeName','merchantName','toolkitAccountId', 'bucketBalanceAfterPost', 'overSpendIndicator', 'overSpendAmount', 'transactionPostingTime', 'groupTransactionId', 'transactionTypeId', 'accountId', 'detailIndicator', 'transactionDetails');  ",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"toolkitBucketName\", \"bucketBalance\",\"bucketCategoryName\", \"bucketBalanceLastUpdateDate\" );",
											"});",
											"",
											"                ",
											"})",
											"      });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ExampleQuery($input: BucketTransactionInput) {\n  Accounts {\n    bucketTransactions(input: $input) {\n      bucket {\n        toolkitBucketId\n        toolkitBucketName\n        bucketBalance\n        bucketCategoryName\n        bucketBalanceLastUpdateDate\n        postedTransactions {\n          bucketTransactionId\n          toolkitBucketId\n          transactionDate\n          transactionAmount\n          transactionDescription\n          bucketBalanceAfterPost\n          overSpendIndicator\n          overSpendAmount\n          transactionPostingTime\n          groupTransactionId\n          transactionTypeId\n          accountId\n          detailIndicator\n          transactionDetails {\n            bucketTransactionDetailId\n            bucketTransactionId\n            fromToolkitBucketId\n            fromToolkitBucketName\n            toToolkitBucketId\n            toToolkitBucketName\n            fromBucketBalance\n            toBucketBalance\n          }\n           toolkitAccountId\n            merchantId\n            merchantName\n            transactionTypeName\n            created\n            isMoveable\n            isGreyedOut\n            cleansedTransactionAmount\n        }\n        pendingTransactions {\n          bucketTransactionId\n          toolkitBucketId\n          accountId\n          transactionDate\n          transactionAmount\n          transactionDescription\n          merchantId\n          isMovable\n          isGrayedOut\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"accountId\": \"ZUZoalduMVRNZFNTUjhTZyfR685Ih1aGekqRhZ7x4H4JWaVFOrNJOzJDBSGeKpRmB0eKHnzopuIggb9RLJviEA\",\n    \"bucketId\": \"E999FE8CD5B50349E05302D32D0A2EA5\",\n    \"recordsPerPage\": 25,\n    \"applicationId\": \"ALLYUSBOLB\",\n    \"applicationName\": \"strata-graph\",\n    \"cif\": \"10224128\",\n    \"guid\": \"17063782\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "Get spending buckets.\n\n**Please pass accountId as encrypted or response will return 400**\n\nAPI Spec: [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407)"
							},
							"response": []
						},
						{
							"name": "Get Bucket Transactions Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Bucket Transactions: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get Bucket Transactions: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query BucketTransactions($input: BucketTransactionInput) {\n  Accounts {\n    bucketTransactions(input: $input) {\n      bucket {\n        toolkitBucketId\n        toolkitBucketName\n        bucketBalance\n        bucketCategoryName\n        bucketBalanceLastUpdateDate\n        postedTransactions {\n          bucketTransactionId\n          toolkitAccountId\n          toolkitBucketId\n          merchantId\n          merchantName\n          transactionTypeName\n          transactionDate\n          transactionAmount\n          transactionDescription\n          bucketBalanceAfterPost\n          overSpendIndicator\n          overSpendAmount\n          transactionPostingTime\n          groupTransactionId\n          transactionTypeId\n          accountId\n          detailIndicator\n          created\n          isMoveable\n          isGreyedOut\n          cleansedTransactionAmount\n          transactionDetails {\n            overspend {\n              bucketTransactionDetailId\n              bucketTransactionId\n              fromToolkitBucketId\n              fromToolkitBucketName\n              toToolkitBucketId\n              toToolkitBucketName\n              amount\n              detailIndicator\n              totalOverspentAmount\n              fromBucketBalance\n              toBucketBalance\n              created\n            }\n            recategorization {\n              bucketTransactionDetailId\n              bucketTransactionId\n              fromToolkitBucketId\n              fromToolkitBucketName\n              toToolkitBucketId\n              toToolkitBucketName\n              detailIndicator\n              originalTransactionDescription\n              originalTransactionDate\n              created\n            }\n          }\n        }\n        pendingTransactions {\n          bucketTransactionId\n          toolkitBucketId\n          accountId\n          transactionDate\n          transactionAmount\n          transactionDescription\n          merchantId\n          isMovable\n          isGrayedOut\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"bucketId\": \"E999FE8CD5B50349E05302D32D0A2EA5\",\n    \"recordsPerPage\": 25,\n    \"applicationId\": \"ALLYUSBOLB\",\n    \"applicationName\": \"strata-graph\",\n    \"cif\": \"10224128\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "Get spending buckets.\n\n**Please pass accountId as encrypted or response will return 400**\n\nAPI Spec: [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407)"
							},
							"response": []
						}
					]
				},
				{
					"name": "Customer Alerts",
					"item": [
						{
							"name": "POST Alert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Post Alerts: Request should take less than 5s\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"})",
											"",
											"pm.test(\"Post Alerts: Response Status should be 200\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Post Alerts: Check Response Structure\", () => {",
											"    const { data: { customerAlert } } = pm.response.json();",
											"    pm.expect(customerAlert).to.have.keys(['message', 'correlationId']);",
											"    pm.expect(customerAlert).to.have.property(\"message\", \"Alert Triggers Accepted\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($input: [customerAlertInput]) {\n  customerAlert(input: $input) {\n    message\n    correlationId\n  }\n}",
										"variables": "{\n  \"input\": [\n    {\n        \"itemNumber\": 2,\n        \"alertCode\": \"wealth-schedule-appointment\",\n        \"version\": \"1\",\n        \"alertBody\": {\n            \"customerId\": \"564\",\n            \"advisorName\": \"John Tylor\",\n            \"advisorPhoneNumber\": \"980-226-7822\",\n            \"advisorEmailAddress\": \"John.tylor@ally.com\",\n            \"planReviewFrequency\": \"Annual\"\n      }\n    }\n  ]\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Alert - Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Post Alerts: Request should take less than 5s\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"})",
											"",
											"pm.test(\"Post Alerts: Response Status should be 400\", () => {",
											"    pm.response.to.have.status(400);",
											"})",
											"",
											"pm.test(\"Post Alerts: Check Response Structure\", () => {",
											"    const { errors } = pm.response.json();",
											"    pm.expect(errors.length).to.be.least(1);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($input: [customerAlertInput]) {\n  customerAlert(input: $input) {\n    message\n    correlationId\n  }\n}",
										"variables": "{\n  \"input\": [\n    {\n      \"referenceId\": \"123\",\n      \"itemNumber\": 2,\n      \"alertCode\": \"wealth-schedule-appointment\",\n      \"version\": \"1\"\n    }\n  ]\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customer Events (AKA Wealth Summary)",
					"item": [
						{
							"name": "Get Customer Events - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Prem Sikilambatla",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-14938",
											"*/",
											"",
											"pm.test(\"getCustomerEvents: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Customer Events: Response should return required fields\", function () {",
											"    // var jsonData = pm.response.json();",
											"    const { data } = pm.response.json();",
											"   // console.log(jsonData);",
											"     //pm.expect(jsonData.data.Customer.getCustomerEvents.data[0]).to.have.all.keys(\"Resources\", \"eventDateTime\", //\"description\", \"channel\");",
											"    data.Customer.getCustomerEvents.data.forEach(event => {",
											"       pm.expect(event).to.have.all.keys([\"zoomLink\", \"workType\", \"type\", \"schedStartTime\", \"schedEndTime\", \"Resources\", \"eventDateTime\", \"channel\", \"appointmentType\", \"shortName\"]);",
											"})",
											"    ",
											"});",
											"pm.test(\"Get Customer Events: Response should return CustomerEvents array\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Customer.getCustomerEvents.data).to.be.an(\"array\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "kzh9x7",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!) {\n  Customer {\n    getCustomerEvents(uid: $uid) {\n      data {\n          subType\n          Resources {\n            type\n            phone\n            name\n            email\n        }\n          eventDateTime\n          channel\n          description\n          subject\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"971563855238319901\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer Events - Error Missing UID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Prem Sikilambatla",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-14938",
											"*/",
											"",
											"pm.test(\"Get Customer Events: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get Customer Events: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!) {\n  Customer {\n    getCustomerEvents(uid: $uid) {\n      data {\n        zoomLink\n        workType\n        type\n        schedStartTime\n        schedEndTime\n        Resources {\n          name\n          email\n          id\n          role\n          phone\n        }\n        eventDateTime\n        channel\n        appointmentType\n        shortName\n      }\n    }\n  }\n}",
										"variables": "{\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Opportunity",
					"item": [
						{
							"name": "Create Opportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Ryan Devenney",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-14953",
											"*/",
											"",
											"pm.test(\"Create Opportunity: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Create Opportunity: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Create Opportunity: zid is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Create Opportunity: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Create Opportunity: Correct data structure\", () => {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.createOpportunity).to.have.keys(['success', 'recordType', 'objectName', 'id'])",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "clientSecret",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{client_key}}",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{base_url}}access/token",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "access_token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($input: createOpportunityInput) {\n  createOpportunity(input: $input) {\n    success\n    recordType\n    objectName\n    id\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"householdId\": 100,\n        \"preferredPhone\": \"313-555-1234\",\n        \"preferredEmail\": \"luke@ally.com\",\n        \"contactPreferences\": \"Mondays, Wednesdays, Fridays\",\n        \"detail\": {\n        \"investmentObjective\": \"Prioritize competing goals\",\n        \"investableAssets\": \"$100,000 - $249,000\"\n        },\n        \"id\": \"123\",\n        \"idType\": \"cif\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Opportunity - Success with No Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Create Opportunity: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Create Opportunity: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Create Opportunity: zid is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Create Opportunity: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Create Opportunity: Correct data structure\", () => {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.createOpportunity).to.have.keys(['success', 'recordType', 'objectName', 'id'])",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($input: createOpportunityInput) {\n  createOpportunity(input: $input) {\n    success\n    recordType\n    objectName\n    id\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"householdId\": 100,\n        \"preferredPhone\": \"\",\n        \"preferredEmail\": \"luke@ally.com\",\n        \"contactPreferences\": \"MidDay\",\n        \"detail\": {\n        \"investmentObjective\": \"Prioritize competing goals\",\n        \"investableAssets\": \"$100,000 - $249,000\"\n        },\n        \"id\": \"rGQsaDKHRr\",\n        \"idType\": \"scivantage\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Credentials Search",
					"item": [
						{
							"name": "Search - Missing Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Search Credentials: Response time is less than 5 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"}); ",
											"",
											"pm.test(\"Search Credentials: Reponse should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"zid\": \"JZL29C\",\n  \"input\": {\n    \"loginId\": \"guardians_demo03\"\n   \n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search Credentials: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Search Credentials: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Search Credentials: value is not empty \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.searchCredentials.results).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"zid\": \"JZL29C\",\n  \"input\": {\n    \"role\": \"agent\",\n    \"loginId\": \"guardians_demo03\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search - Successful Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search Credentials: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Search Credentials: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Search Credentials: value is not empty \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.searchCredentials.results).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"zid\": \"JZL29C\",\n  \"input\": {\n    \"role\": \"agent\",\n    \"loginId\": \"Fwkftk6377\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search - Missing Zid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Search Credentials: Reponse should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"role\": \"agent\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search - Empty Cupid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search Credentials: searchcredentials result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Customer.searchCredentials).to.eq(null);",
											"})",
											"",
											"pm.test(\"Search Credentials: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`unknown role in the request`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"zid\": \"JZL29C\",\n  \"input\": {\n    \"role\": \"agent\",\n    \"cupid\": \"\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search - different loginId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search Credentials: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Search Credentials: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Search Credentials: value is not empty \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.searchCredentials.results).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "kSAq1r8xXqOyNkyitJqxA4YnaLee",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"zid\": \"JZL29C\",\n  \"input\": {\n    \"role\": \"agent\",\n    \"loginId\": \"guardians_demo03\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Credentials Management",
					"item": [
						{
							"name": "Reset Password - Missing Cupid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reset Passeword: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Reset Passeword: Reponse should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cupid: String!) {\n  Customer {\n    resetCredentials(cupid: $cupid)\n  }\n}",
										"variables": "{\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Password - Cupid Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reset Passeword: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Reset Passeword: reset credentials result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Customer.resetCredentials).to.eq(null);",
											"})",
											"",
											"pm.test(\"Reset Passeword: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`Please provide a valid cupid to this request.`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cupid: String!) {\n  Customer {\n    resetCredentials(cupid: $cupid)\n  }\n}",
										"variables": "{\n    \"cupid\":\"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Password - Sucess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Reset Password: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cupid: String!) {\n  Customer {\n    resetCredentials(cupid: $cupid)\n  }\n}",
										"variables": "{\n  \"cupid\": \"33789459741893173140053340918643\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Password - Invalid Cupid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Reset Password: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "1vDLU5S5WyPqWRGDgFk9MMpPWCWt",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cupid: String!) {\n  Customer {\n    resetCredentials(cupid: $cupid)\n  }\n}",
										"variables": "{\n  \"cupid\": \"33789459741893173140053340918643\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "Customers Search Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: zid is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(1)",
											"});",
											"",
											"pm.test(\"Customers Search: Current Page is a string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.currentPage).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($lastName: String) {\n  customers(lastName: $lastName) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"lastName\": \"Johnson\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - By CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: zid is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String) {\n  customers(cif:, $cif) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9353814\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - By Account Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String, $lob: String) {\n  customers(accountNumber: $accountNumber, lob: $lob) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountNumber\": \"1040757302\",\n  \"lob\": \"DEPOSIT\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - By Account Number Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Error exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.be.a('array');",
											"});",
											"",
											"pm.test(\"Customers Search: Error message exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Customers Search: Detailed Error message exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].extensions.response.errors[0].detail).to.eql(\"Unsupported or restricted search request [accountNumber]. Please refer to API documentation for supported requests.\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String, $lob: String) {\n  customers(accountNumber: $accountNumber, lob: $lob) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountNumber\": \"7795500001\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful Different User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: zid is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(1)",
											"});",
											"",
											"pm.test(\"Customers Search: Current Page is a string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.currentPage).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});",
											"",
											"pm.test(\"Customers Search: Default size is 100\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.have.lengthOf(100);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($lastName: String) {\n  customers(lastName: $lastName) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"lastName\": \"test\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - By Last Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"AllyZID\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(1)",
											"});",
											"",
											"pm.test(\"Customers Search: Current Page is a string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.currentPage).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "AllyZID",
										"value": "rz28v6",
										"type": "text",
										"disabled": true
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($lastName: String) {\n  customers(lastName: $lastName) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"lastName\": \"Johnson\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - By Last Name Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"AllyZID\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(1)",
											"});",
											"",
											"pm.test(\"Customers Search: Current Page is a string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.currentPage).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "AllyZID",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($lastName: String) {\n  customers(lastName: $lastName) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"lastName\": \"CredentialsTestSix\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - By Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"AllyZID\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Current Page is a string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.currentPage).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "AllyZID",
										"value": "xz5wcm",
										"type": "text",
										"disabled": true
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($email: String) {\n  customers(email: $email) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"email\": \"zachary39@yahoo.com\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - First Name and Last Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($firstName: String, $lastName: String) {\n  customers(firstName: $firstName, lastName: $lastName) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - First Name and Last Name Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($firstName: String, $lastName: String) {\n  customers(firstName: $firstName, lastName: $lastName) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Successful - Search by Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"AllyZID\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "AllyZID",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($phone: String) {\n  customers(phone: $phone) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"phone\": \"401-743-6376\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search - Invalid CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"AllyZID\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.eql(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "AllyZID",
										"value": "rz28v6",
										"type": "text",
										"disabled": true
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String) {\n  customers(cif: $cif) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"153\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Debit Card",
					"item": [
						{
							"name": "Card List",
							"item": [
								{
									"name": "Card List - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return valid cards array\", function () {",
													"    pm.expect(pm.response.json().data.Customer.getCardList[0].cards).to.be.an(\"array\");",
													"})",
													"",
													"pm.test(\"Valid card should contain required fields\", function () {",
													"    pm.response.json().data.Customer.getCardList[0].cards.forEach(response => {",
													"        pm.expect(response).to.have.all.keys(\"atmLimit\",\"posLimit\",\"accountNumber\", \"custCardId\", \"lastFourDigits\", \"expireDate\", \"isCardActive\", \"isControlsEnrolled\", \"isCardLocked\", \"isCardEmbossed\", \"embossedDate\", \"isReissueCardAvailable\", \"statusDetails\");",
													"        pm.expect(response.statusDetails).to.have.all.keys(\"status\", \"statusDescription\", \"statusDisplay\", \"statusReasonCode\")",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "rz28v6",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($limits: String!, $accountId: String!) {\n  Customer {\n    getCardList(limits: $limits, accountId: $accountId) {\n      cif\n      cardHolderName\n      cards {\n        atmLimit\n        posLimit\n        accountNumber\n        custCardId\n        lastFourDigits\n        expireDate\n        isCardActive\n        isControlsEnrolled\n        isCardLocked\n        isCardEmbossed\n        embossedDate\n        isReissueCardAvailable\n        statusDetails {\n          status\n          statusDescription\n          statusDisplay\n          statusReasonCode\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n    \"limits\": \"MMA\",\n      \"accountId\": \"2177769169\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card List - Multiple Cards",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return valid cards array with at least one card\", function () {",
													"    pm.expect(pm.response.json().data.Customer.getCardList[0].cards).to.be.an(\"array\");",
													"    pm.expect(pm.response.json().data.Customer.getCardList[0].cards.length).to.be.eq(4);",
													"})",
													"",
													"pm.test(\"Valid card should contain required fields\", function () {",
													"    pm.response.json().data.Customer.getCardList[0].cards.forEach(response => {",
													"        pm.expect(response).to.have.all.keys(\"atmLimit\",\"posLimit\",\"accountNumber\", \"custCardId\", \"lastFourDigits\", \"expireDate\", \"isCardActive\", \"isControlsEnrolled\", \"isCardLocked\", \"isCardEmbossed\", \"embossedDate\", \"isReissueCardAvailable\", \"statusDetails\");",
													"        pm.expect(response.statusDetails).to.have.all.keys(\"status\", \"statusDescription\", \"statusDisplay\", \"statusReasonCode\")",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "rz28v6",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($limits: String!, $accountId: String!) {\n  Customer {\n    getCardList(limits: $limits, accountId: $accountId) {\n      cif\n      cardHolderName\n      cards {\n        atmLimit\n        posLimit\n        accountNumber\n        custCardId\n        lastFourDigits\n        expireDate\n        isCardActive\n        isControlsEnrolled\n        isCardLocked\n        isCardEmbossed\n        embossedDate\n        isReissueCardAvailable\n        statusDetails {\n          status\n          statusDescription\n          statusDisplay\n          statusReasonCode\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n \"limits\": \"MMA\",\n      \"accountId\": \"1079578744\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card List - Empty Limits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should have non zero error array\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.greaterThan(0);",
													"})",
													"",
													"pm.test(\"Should have only one error\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.lessThan(2);",
													"})",
													"pm.test(\"Error array should have proper path\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.path[0]).to.equal(\"Customer\");",
													"    pm.expect(response.path[1]).to.equal(\"getCardList\");",
													"})",
													"",
													"pm.test(\"Error should have proper statusCode, clientMessage and isError values\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.message).to.contain(\"Missing input. limits and accountId required.\");",
													"    pm.expect(response.extensions.code).to.equal(\"INTERNAL_SERVER_ERROR\");",
													"    //pm.expect(response.extensions.isError).to.equal(true);",
													"})",
													"",
													"pm.test(\"data object should be null except for path\", function () {",
													"    var response = pm.response.json().data;",
													"    pm.expect(response.Customer.getCardList).to.be.null;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "rz28v6",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($limits: String!, $accountId: String!) {\n  Customer {\n    getCardList(limits: $limits, accountId: $accountId) {\n      cif\n      cardHolderName\n      cards {\n        atmLimit\n        posLimit\n        accountNumber\n        custCardId\n        lastFourDigits\n        expireDate\n        isCardActive\n        isControlsEnrolled\n        isCardLocked\n        isCardEmbossed\n        embossedDate\n        isReissueCardAvailable\n        statusDetails {\n          status\n          statusDescription\n          statusDisplay\n          statusReasonCode\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n    \"limits\": \"\",\n      \"accountId\": \"2177769169\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card List - Empty Account Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should have non zero error array\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.greaterThan(0);",
													"})",
													"",
													"pm.test(\"Should have only one error\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.lessThan(2);",
													"})",
													"pm.test(\"Error array should have proper path\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.path[0]).to.equal(\"Customer\");",
													"    pm.expect(response.path[1]).to.equal(\"getCardList\");",
													"})",
													"",
													"pm.test(\"Error should have proper statusCode, clientMessage and isError values\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.message).to.contain(\"Missing input. limits and accountId required.\");",
													"    pm.expect(response.extensions.code).to.equal(\"INTERNAL_SERVER_ERROR\");",
													"    //pm.expect(response.extensions.isError).to.equal(true);",
													"})",
													"",
													"pm.test(\"data object should be null except for path\", function () {",
													"    var response = pm.response.json().data;",
													"    pm.expect(response.Customer.getCardList).to.be.null;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "rz28v6",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($limits: String!, $accountId: String!) {\n  Customer {\n    getCardList(limits: $limits, accountId: $accountId) {\n      cif\n      cardHolderName\n      cards {\n        atmLimit\n        posLimit\n        accountNumber\n        custCardId\n        lastFourDigits\n        expireDate\n        isCardActive\n        isControlsEnrolled\n        isCardLocked\n        isCardEmbossed\n        embossedDate\n        isReissueCardAvailable\n        statusDetails {\n          status\n          statusDescription\n          statusDisplay\n          statusReasonCode\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n    \"limits\": \"MMA\",\n      \"accountId\": \"\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card List - Invalid Account Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should have non zero error array\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.greaterThan(0);",
													"})",
													"",
													"pm.test(\"Should have only one error\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.lessThan(2);",
													"})",
													"pm.test(\"Error array should have proper path\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.path[0]).to.equal(\"Customer\");",
													"    pm.expect(response.path[1]).to.equal(\"getCardList\");",
													"})",
													"",
													"pm.test(\"Error should have proper statusCode, clientMessage and isError values\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.message).to.contain(\"Error getting customer cifs.\");",
													"    pm.expect(response.extensions.statusCode).to.equal(500);",
													"    pm.expect(response.extensions.isError).to.equal(true);",
													"})",
													"",
													"pm.test(\"data object should be null except for path\", function () {",
													"    var response = pm.response.json().data;",
													"    pm.expect(response.Customer.getCardList).to.be.null;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "CIF",
												"value": "4329236",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Referer",
												"value": "secure-qa2",
												"type": "text"
											},
											{
												"key": "zid",
												"value": "rz28v6",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($limits: String!, $accountId: String!) {\n  Customer {\n    getCardList(limits: $limits, accountId: $accountId) {\n      cif\n      cardHolderName\n      cards {\n        atmLimit\n        posLimit\n        accountNumber\n        custCardId\n        lastFourDigits\n        expireDate\n        isCardActive\n        isControlsEnrolled\n        isCardLocked\n        isCardEmbossed\n        embossedDate\n        isReissueCardAvailable\n        statusDetails {\n          status\n          statusDescription\n          statusDisplay\n          statusReasonCode\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n    \"limits\": \"MMA\",\n      \"accountId\": \"21777691690000676465\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Card Transaction List",
							"item": [
								{
									"name": "Card Transaction List - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return valid transaction array\", function () {",
													"    pm.expect(pm.response.json().data.Customer.getCardTransactions.transactions).to.be.an(\"array\");",
													"})",
													"",
													"pm.test(\"Valid transaction should contain required fields\", function () {",
													"    const expectedTransactionKeys = [",
													"        \"debitCreditIndicator\",",
													"        \"transactionIdKey\",",
													"        \"cardNumber\",",
													"        \"custCardId\",",
													"        \"approvalCode\",",
													"        \"merchantCategoryCode\",",
													"        \"merchantName\",",
													"        \"merchantId\",",
													"        \"customerSettlementDate\",",
													"        \"transactionAmount\",",
													"        \"transactionAmountCurrencyCode\",",
													"        \"transactionAmountWithSurcharge\",",
													"        \"transactionAmountWithSurchargeCurrencyCode\",",
													"        \"cardholderBillingAmount\",",
													"        \"cardholderBillingAmountCurrencyCode\",",
													"        \"processingCode\",",
													"        \"transactionTypeCode\",",
													"        \"holdMatchStatus\",",
													"        \"transactionSwitchDateTime\",",
													"        \"reversalIndicator\",",
													"        \"settlementAmount\",",
													"        \"settlementAmountCurrencyCode\",",
													"        \"acquirerInstitutionId\",",
													"        \"acquirerDateTime\",",
													"        \"fromAccount\",",
													"        \"toAccount\",",
													"        \"transactionTerminalId\",",
													"        \"retrievalReferenceNumber\",",
													"        \"networkId\",",
													"        \"deferredClearingIndicator\",",
													"        \"recurringPaymentIndicator\",",
													"        \"hisoActionCode\",",
													"        \"responseCode\",",
													"        \"cardHolderBillingAmountWithSurcharge\",",
													"        \"cardHolderBillingAmountWithSurchargeCurrencyCode\",",
													"        \"cardHolderBillingSurchargeAmount\",",
													"        \"cardHolderBillingSurchargeAmountCurrencyCode\",",
													"        \"surchargeAmount\",",
													"        \"surchargeAmountCurrencyCode\",",
													"        \"networkReconCurrency\",",
													"        \"crossBorderIndicator\",",
													"        \"systemTrace\",",
													"        \"visaSystemTraceAuditNumber\",",
													"        \"visaRetrievalReferenceNumber\",",
													"        \"merchantPostalCode\",",
													"        \"pinDataPresentIndicator\",",
													"        \"transactionCashbackAmount\",",
													"        \"transactionCashbackAmountCurrencyCode\",",
													"        \"settlementCashbackAmount\",",
													"        \"settlementCashbackAmountCurrencyCode\",",
													"        \"cardholderBillingCashbackAmount\",",
													"        \"cardholderBillingCashbackAmountCurrencyCode\",",
													"        \"fraudIndicator\"",
													"    ];",
													"",
													"    const expectedTransactionDisputeNumbersKeys = [",
													"        \"disputeNumber\",",
													"        \"disputableIndicator\"",
													"    ]",
													"",
													"    const expectedTerminalAddressKeys = [",
													"        \"addressLine\",",
													"        \"city\",",
													"        \"countrySubdivision\",",
													"        \"postalCode\",",
													"        \"country\"",
													"    ]",
													"",
													"    pm.response.json().data.Customer.getCardTransactions.transactions.forEach(transaction => {",
													"        pm.expect(expectedTransactionKeys.map(x => transaction.hasOwnProperty(x)).filter(!Boolean).length).to.equal(0)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "LZQPVX",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($cif: String!, $custCardId: String!) {\n  Customer {\n    getCardTransactions(cif: $cif, custCardId: $custCardId) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      transactions {\n        debitCreditIndicator\n        transactionIdKey\n        cardNumber\n        custCardId\n        approvalCode\n        merchantCategoryCode\n        merchantName\n        merchantId\n        customerSettlementDate\n        transactionAmount\n        transactionAmountCurrencyCode\n        transactionAmountWithSurcharge\n        transactionAmountWithSurchargeCurrencyCode\n        cardholderBillingAmount\n        cardholderBillingAmountCurrencyCode\n        processingCode\n        transactionTypeCode\n        holdMatchStatus\n        transactionSwitchDateTime\n        reversalIndicator\n        settlementAmount\n        settlementAmountCurrencyCode\n        acquirerInstitutionId\n        acquirerDateTime\n        fromAccount\n        toAccount\n        transactionTerminalId\n        retrievalReferenceNumber\n        networkId\n        deferredClearingIndicator\n        recurringPaymentIndicator\n        hisoActionCode\n        responseCode\n        cardHolderBillingAmountWithSurcharge\n        cardHolderBillingAmountWithSurchargeCurrencyCode\n        cardHolderBillingSurchargeAmount\n        cardHolderBillingSurchargeAmountCurrencyCode\n        surchargeAmount\n        surchargeAmountCurrencyCode\n        networkReconCurrency\n        crossBorderIndicator\n        systemTrace\n        visaSystemTraceAuditNumber\n        visaRetrievalReferenceNumber\n        merchantPostalCode\n        pinDataPresentIndicator\n        transactionCashbackAmount\n        transactionCashbackAmountCurrencyCode\n        settlementCashbackAmount\n        settlementCashbackAmountCurrencyCode\n        cardholderBillingCashbackAmount\n        cardholderBillingCashbackAmountCurrencyCode\n        fraudIndicator\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"10221977\",\n  \"custCardId\": \"E9098E816C63591BE05304D32D0A2CA1\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card Transaction List - Success Paginated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return valid transaction array\", function () {",
													"    pm.expect(pm.response.json().data.Customer.getCardTransactions.transactions).to.be.an(\"array\");",
													"})",
													"",
													"pm.test(\"should have valid pagination object\", function () {",
													"    const pagination = pm.response.json().data.Customer.getCardTransactions.pagination;",
													"    pm.expect(pagination).to.have.all.keys([\"count\",\"pageSize\",\"pageNumber\",\"total\"]);",
													"})",
													"",
													"pm.test(\"Valid transaction should contain required fields\", function () {",
													"    const expectedTransactionKeys = [",
													"        \"debitCreditIndicator\",",
													"        \"transactionIdKey\",",
													"        \"cardNumber\",",
													"        \"custCardId\",",
													"        \"approvalCode\",",
													"        \"merchantCategoryCode\",",
													"        \"merchantName\",",
													"        \"merchantId\",",
													"        \"customerSettlementDate\",",
													"        \"transactionAmount\",",
													"        \"transactionAmountCurrencyCode\",",
													"        \"transactionAmountWithSurcharge\",",
													"        \"transactionAmountWithSurchargeCurrencyCode\",",
													"        \"cardholderBillingAmount\",",
													"        \"cardholderBillingAmountCurrencyCode\",",
													"        \"processingCode\",",
													"        \"transactionTypeCode\",",
													"        \"holdMatchStatus\",",
													"        \"transactionSwitchDateTime\",",
													"        \"reversalIndicator\",",
													"        \"settlementAmount\",",
													"        \"settlementAmountCurrencyCode\",",
													"        \"acquirerInstitutionId\",",
													"        \"acquirerDateTime\",",
													"        \"fromAccount\",",
													"        \"toAccount\",",
													"        \"transactionTerminalId\",",
													"        \"retrievalReferenceNumber\",",
													"        \"networkId\",",
													"        \"deferredClearingIndicator\",",
													"        \"recurringPaymentIndicator\",",
													"        \"hisoActionCode\",",
													"        \"responseCode\",",
													"        \"cardHolderBillingAmountWithSurcharge\",",
													"        \"cardHolderBillingAmountWithSurchargeCurrencyCode\",",
													"        \"cardHolderBillingSurchargeAmount\",",
													"        \"cardHolderBillingSurchargeAmountCurrencyCode\",",
													"        \"surchargeAmount\",",
													"        \"surchargeAmountCurrencyCode\",",
													"        \"networkReconCurrency\",",
													"        \"crossBorderIndicator\",",
													"        \"systemTrace\",",
													"        \"visaSystemTraceAuditNumber\",",
													"        \"visaRetrievalReferenceNumber\",",
													"        \"merchantPostalCode\",",
													"        \"pinDataPresentIndicator\",",
													"        \"transactionCashbackAmount\",",
													"        \"transactionCashbackAmountCurrencyCode\",",
													"        \"settlementCashbackAmount\",",
													"        \"settlementCashbackAmountCurrencyCode\",",
													"        \"cardholderBillingCashbackAmount\",",
													"        \"cardholderBillingCashbackAmountCurrencyCode\",",
													"        \"fraudIndicator\",",
													"        \"disputeNumbers\",",
													"        \"terminalAddress\"",
													"    ];",
													"",
													"    const expectedTransactionDisputeNumbersKeys = [",
													"        \"disputeNumber\",",
													"        \"disputableIndicator\"",
													"    ]",
													"",
													"    const expectedTerminalAddressKeys = [",
													"        \"addressLine\",",
													"        \"city\",",
													"        \"countrySubdivision\",",
													"        \"postalCode\",",
													"        \"country\"",
													"    ]",
													"",
													"    pm.response.json().data.Customer.getCardTransactions.transactions.forEach(transaction =>",
													"        pm.expect(",
													"            expectedTransactionKeys.map(x => !Object.hasOwn(transaction,x)).filter(y => y)[0]",
													"        ).to.not.be.true &&      ",
													"        pm.expect(",
													"            expectedTransactionDisputeNumbersKeys.map(x => !Object.hasOwn(transaction.disputeNumbers,x)).filter(y => y)[0]",
													"        ).to.not.be.true &&",
													"        pm.expect(",
													"            expectedTerminalAddressKeys.map(x => !Object.hasOwn(transaction.terminalAddress,x)).filter(y => y)[0]",
													"        ).to.not.be.true",
													"    )",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "LZQPVX",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetCardTransactions($cif: String!, $custCardId: String!, $pagination: Pagination) {\n  Customer {\n    getCardTransactions(cif: $cif, custCardId: $custCardId, pagination: $pagination) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      pagination {\n        count\n        pageSize\n        pageNumber\n        total\n      }\n      transactions {\n        debitCreditIndicator  \n        transactionIdKey\n        cardNumber\n        custCardId\n        approvalCode\n        merchantCategoryCode\n        merchantName\n        merchantId\n        customerSettlementDate\n        transactionAmount\n        transactionAmountCurrencyCode\n        transactionAmountWithSurcharge\n        transactionAmountWithSurchargeCurrencyCode\n        cardholderBillingAmount\n        cardholderBillingAmountCurrencyCode\n        processingCode\n        transactionTypeCode\n        holdMatchStatus\n        terminalAddress {\n          addressLine\n          city\n          countrySubdivision\n          postalCode\n          country\n        }\n        transactionSwitchDateTime\n        reversalIndicator\n        settlementAmount\n        settlementAmountCurrencyCode\n        acquirerInstitutionId\n        acquirerDateTime\n        fromAccount\n        toAccount\n        transactionTerminalId\n        retrievalReferenceNumber\n        networkId\n        deferredClearingIndicator\n        recurringPaymentIndicator\n        hisoActionCode\n        responseCode\n        disputeNumbers {\n          disputeNumber\n          disputableIndicator\n        }\n        cardHolderBillingAmountWithSurcharge\n        cardHolderBillingAmountWithSurchargeCurrencyCode\n        cardHolderBillingSurchargeAmount\n        cardHolderBillingSurchargeAmountCurrencyCode\n        surchargeAmount\n        surchargeAmountCurrencyCode\n        networkReconCurrency\n        crossBorderIndicator\n        systemTrace\n        visaSystemTraceAuditNumber\n        visaRetrievalReferenceNumber\n        merchantPostalCode\n        pinDataPresentIndicator\n        transactionCashbackAmount\n        transactionCashbackAmountCurrencyCode\n        settlementCashbackAmount\n        settlementCashbackAmountCurrencyCode\n        cardholderBillingCashbackAmount\n        cardholderBillingCashbackAmountCurrencyCode\n        fraudIndicator\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"10221977\",\n  \"custCardId\": \"E9098E816C63591BE05304D32D0A2CA1\",\n  \"pagination\": {\n    \"fromDate\": \"2022-05-18\",\n    \"toDate\": \"2022-05-19\",\n    \"pageNumber\": \"3\",\n    \"pageSize\": \"1\"\n  } \n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card Transaction List - Success No Transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return valid transaction array\", function () {",
													"    pm.expect(pm.response.json().data.Customer.getCardTransactions.transactions).to.be.an(\"array\");",
													"})",
													"",
													"pm.test(\"Transaction array should be empty\", function() {",
													"    pm.expect(pm.response.json().data.Customer.getCardTransactions.transactions.length).to.eql(0)",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "LZQPVX",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetCardTransactions($cif: String!, $custCardId: String!, $pagination: Pagination) {\n  Customer {\n    getCardTransactions(cif: $cif, custCardId: $custCardId, pagination: $pagination) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      pagination {\n        count\n        pageSize\n        pageNumber\n        total\n      }\n      transactions {\n        debitCreditIndicator  \n        transactionIdKey\n        cardNumber\n        custCardId\n        approvalCode\n        merchantCategoryCode\n        merchantName\n        merchantId\n        customerSettlementDate\n        transactionAmount\n        transactionAmountCurrencyCode\n        transactionAmountWithSurcharge\n        transactionAmountWithSurchargeCurrencyCode\n        cardholderBillingAmount\n        cardholderBillingAmountCurrencyCode\n        processingCode\n        transactionTypeCode\n        holdMatchStatus\n        terminalAddress {\n          addressLine\n          city\n          countrySubdivision\n          postalCode\n          country\n        }\n        transactionSwitchDateTime\n        reversalIndicator\n        settlementAmount\n        settlementAmountCurrencyCode\n        acquirerInstitutionId\n        acquirerDateTime\n        fromAccount\n        toAccount\n        transactionTerminalId\n        retrievalReferenceNumber\n        networkId\n        deferredClearingIndicator\n        recurringPaymentIndicator\n        hisoActionCode\n        responseCode\n        disputeNumbers {\n          disputeNumber\n          disputableIndicator\n        }\n        cardHolderBillingAmountWithSurcharge\n        cardHolderBillingAmountWithSurchargeCurrencyCode\n        cardHolderBillingSurchargeAmount\n        cardHolderBillingSurchargeAmountCurrencyCode\n        surchargeAmount\n        surchargeAmountCurrencyCode\n        networkReconCurrency\n        crossBorderIndicator\n        systemTrace\n        visaSystemTraceAuditNumber\n        visaRetrievalReferenceNumber\n        merchantPostalCode\n        pinDataPresentIndicator\n        transactionCashbackAmount\n        transactionCashbackAmountCurrencyCode\n        settlementCashbackAmount\n        settlementCashbackAmountCurrencyCode\n        cardholderBillingCashbackAmount\n        cardholderBillingCashbackAmountCurrencyCode\n        fraudIndicator\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"10221977\",\n  \"custCardId\": \"E9098E816C63591BE05304D32D0A2CA1\",\n  \"pagination\": {\n    \"fromDate\": \"2022-05-18\",\n    \"toDate\": \"2022-05-19\",\n    \"pageNumber\": \"3\",\n    \"pageSize\": \"1\"\n  } \n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card Transaction List - Empty CIF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should have non zero error array\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.greaterThan(0);",
													"})",
													"",
													"pm.test(\"Should have only one error\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.lessThan(2);",
													"})",
													"pm.test(\"Error array should have proper path\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.path[0]).to.equal(\"Customer\");",
													"    pm.expect(response.path[1]).to.equal(\"getCardTransactions\");",
													"})",
													"",
													"pm.test(\"Error should have proper statusCode, clientMessage and isError values\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.message).to.contain(\"Missing custCardId or CIF\");",
													"    pm.expect(response.extensions.code).to.equal(\"INTERNAL_SERVER_ERROR\");",
													"    //pm.expect(response.extensions.isError).to.equal(true);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "LZQPVX",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($cif: String!, $custCardId: String!) {\n  Customer {\n    getCardTransactions(cif: $cif, custCardId: $custCardId) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      transactions {\n        debitCreditIndicator\n        transactionIdKey\n        cardNumber\n        custCardId\n        approvalCode\n        merchantCategoryCode\n        merchantName\n        merchantId\n        customerSettlementDate\n        transactionAmount\n        transactionAmountCurrencyCode\n        transactionAmountWithSurcharge\n        transactionAmountWithSurchargeCurrencyCode\n        cardholderBillingAmount\n        cardholderBillingAmountCurrencyCode\n        processingCode\n        transactionTypeCode\n        holdMatchStatus\n        transactionSwitchDateTime\n        reversalIndicator\n        settlementAmount\n        settlementAmountCurrencyCode\n        acquirerInstitutionId\n        acquirerDateTime\n        fromAccount\n        toAccount\n        transactionTerminalId\n        retrievalReferenceNumber\n        networkId\n        deferredClearingIndicator\n        recurringPaymentIndicator\n        hisoActionCode\n        responseCode\n        cardHolderBillingAmountWithSurcharge\n        cardHolderBillingAmountWithSurchargeCurrencyCode\n        cardHolderBillingSurchargeAmount\n        cardHolderBillingSurchargeAmountCurrencyCode\n        surchargeAmount\n        surchargeAmountCurrencyCode\n        networkReconCurrency\n        crossBorderIndicator\n        systemTrace\n        visaSystemTraceAuditNumber\n        visaRetrievalReferenceNumber\n        merchantPostalCode\n        pinDataPresentIndicator\n        transactionCashbackAmount\n        transactionCashbackAmountCurrencyCode\n        settlementCashbackAmount\n        settlementCashbackAmountCurrencyCode\n        cardholderBillingCashbackAmount\n        cardholderBillingCashbackAmountCurrencyCode\n        fraudIndicator\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"\",\n  \"custCardId\": \"E9098E816C63591BE05304D32D0A2CA1\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card Transaction List - Invalid CIF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Should have non zero error array\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.greaterThan(0);",
													"})",
													"",
													"pm.test(\"Should have only one error\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.lessThan(2);",
													"})",
													"pm.test(\"Error array should have proper path\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.path[0]).to.equal(\"Customer\");",
													"    pm.expect(response.path[1]).to.equal(\"getCardTransactions\");",
													"})",
													"",
													"pm.test(\"Error should have proper statusCode, clientMessage and isError values\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.message).to.contain(\"Error getting card transactions for\");",
													"    pm.expect(response.extensions.statusCode).to.equal(500);",
													"    pm.expect(response.extensions.isError).to.equal(true);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "LZQPVX",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($cif: String!, $custCardId: String!) {\n  Customer {\n    getCardTransactions(cif: $cif, custCardId: $custCardId) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      transactions {\n        debitCreditIndicator\n        transactionIdKey\n        cardNumber\n        custCardId\n        approvalCode\n        merchantCategoryCode\n        merchantName\n        merchantId\n        customerSettlementDate\n        transactionAmount\n        transactionAmountCurrencyCode\n        transactionAmountWithSurcharge\n        transactionAmountWithSurchargeCurrencyCode\n        cardholderBillingAmount\n        cardholderBillingAmountCurrencyCode\n        processingCode\n        transactionTypeCode\n        holdMatchStatus\n        transactionSwitchDateTime\n        reversalIndicator\n        settlementAmount\n        settlementAmountCurrencyCode\n        acquirerInstitutionId\n        acquirerDateTime\n        fromAccount\n        toAccount\n        transactionTerminalId\n        retrievalReferenceNumber\n        networkId\n        deferredClearingIndicator\n        recurringPaymentIndicator\n        hisoActionCode\n        responseCode\n        cardHolderBillingAmountWithSurcharge\n        cardHolderBillingAmountWithSurchargeCurrencyCode\n        cardHolderBillingSurchargeAmount\n        cardHolderBillingSurchargeAmountCurrencyCode\n        surchargeAmount\n        surchargeAmountCurrencyCode\n        networkReconCurrency\n        crossBorderIndicator\n        systemTrace\n        visaSystemTraceAuditNumber\n        visaRetrievalReferenceNumber\n        merchantPostalCode\n        pinDataPresentIndicator\n        transactionCashbackAmount\n        transactionCashbackAmountCurrencyCode\n        settlementCashbackAmount\n        settlementCashbackAmountCurrencyCode\n        cardholderBillingCashbackAmount\n        cardholderBillingCashbackAmountCurrencyCode\n        fraudIndicator\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"INVALID\",\n  \"custCardId\": \"D6E377E004576EAAE05304D32D0A77F2\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card Transaction List - Empty custCardId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should have non zero error array\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.greaterThan(0);",
													"})",
													"",
													"pm.test(\"Should have only one error\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.lessThan(2);",
													"})",
													"pm.test(\"Error array should have proper path\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.path[0]).to.equal(\"Customer\");",
													"    pm.expect(response.path[1]).to.equal(\"getCardTransactions\");",
													"})",
													"",
													"pm.test(\"Error should have proper statusCode, clientMessage and isError values\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.extensions.code).to.equal(\"INTERNAL_SERVER_ERROR\");",
													"    pm.expect(response.message).to.contain(\"Missing custCardId\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "LZQPVX",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetCardTransactions($cif: String!, $custCardId: String!, $pagination: Pagination) {\n  Customer {\n    getCardTransactions(cif: $cif, custCardId: $custCardId, pagination: $pagination) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      pagination {\n        count\n        pageSize\n        pageNumber\n        total\n      }\n      transactions {\n        debitCreditIndicator\n        transactionIdKey\n        cardNumber\n        custCardId\n        approvalCode\n        merchantCategoryCode\n        merchantName\n        merchantId\n        customerSettlementDate\n        transactionAmount\n        transactionAmountCurrencyCode\n        transactionAmountWithSurcharge\n        transactionAmountWithSurchargeCurrencyCode\n        cardholderBillingAmount\n        cardholderBillingAmountCurrencyCode\n        processingCode\n        transactionTypeCode\n        holdMatchStatus\n        terminalAddress {\n          addressLine\n          city\n          countrySubdivision\n          postalCode\n          country\n        }\n        transactionSwitchDateTime\n        reversalIndicator\n        settlementAmount\n        settlementAmountCurrencyCode\n        acquirerInstitutionId\n        acquirerDateTime\n        fromAccount\n        toAccount\n        transactionTerminalId\n        retrievalReferenceNumber\n        networkId\n        deferredClearingIndicator\n        recurringPaymentIndicator\n        hisoActionCode\n        responseCode\n        disputeNumbers {\n          disputeNumber\n          disputableIndicator\n        }\n        cardHolderBillingAmountWithSurcharge\n        cardHolderBillingAmountWithSurchargeCurrencyCode\n        cardHolderBillingSurchargeAmount\n        cardHolderBillingSurchargeAmountCurrencyCode\n        surchargeAmount\n        surchargeAmountCurrencyCode\n        networkReconCurrency\n        crossBorderIndicator\n        systemTrace\n        visaSystemTraceAuditNumber\n        visaRetrievalReferenceNumber\n        merchantPostalCode\n        pinDataPresentIndicator\n        transactionCashbackAmount\n        transactionCashbackAmountCurrencyCode\n        settlementCashbackAmount\n        settlementCashbackAmountCurrencyCode\n        cardholderBillingCashbackAmount\n        cardholderBillingCashbackAmountCurrencyCode\n        fraudIndicator\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"4507595\",\n  \"custCardId\": \"\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Card Transaction List - Invalid custCardId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Should have non zero error array\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.greaterThan(0);",
													"})",
													"",
													"pm.test(\"Should have only one error\", function () {",
													"    pm.expect(pm.response.json().errors.length).to.be.lessThan(2);",
													"})",
													"pm.test(\"Error array should have proper path\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.path[0]).to.equal(\"Customer\");",
													"    pm.expect(response.path[1]).to.equal(\"getCardTransactions\");",
													"})",
													"",
													"pm.test(\"Error should have proper statusCode, clientMessage and isError values\", function () {",
													"    var response = pm.response.json().errors[0];",
													"    pm.expect(response.message).to.contain(\"Error getting card transactions for\");",
													"    pm.expect(response.extensions.statusCode).to.equal(500);",
													"    pm.expect(response.extensions.isError).to.equal(true);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "LZQPVX",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($cif: String!, $custCardId: String!) {\n  Customer {\n    getCardTransactions(cif: $cif, custCardId: $custCardId) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      transactions {\n        debitCreditIndicator\n        transactionIdKey\n        cardNumber\n        custCardId\n        approvalCode\n        merchantCategoryCode\n        merchantName\n        merchantId\n        customerSettlementDate\n        transactionAmount\n        transactionAmountCurrencyCode\n        transactionAmountWithSurcharge\n        transactionAmountWithSurchargeCurrencyCode\n        cardholderBillingAmount\n        cardholderBillingAmountCurrencyCode\n        processingCode\n        transactionTypeCode\n        holdMatchStatus\n        transactionSwitchDateTime\n        reversalIndicator\n        settlementAmount\n        settlementAmountCurrencyCode\n        acquirerInstitutionId\n        acquirerDateTime\n        fromAccount\n        toAccount\n        transactionTerminalId\n        retrievalReferenceNumber\n        networkId\n        deferredClearingIndicator\n        recurringPaymentIndicator\n        hisoActionCode\n        responseCode\n        cardHolderBillingAmountWithSurcharge\n        cardHolderBillingAmountWithSurchargeCurrencyCode\n        cardHolderBillingSurchargeAmount\n        cardHolderBillingSurchargeAmountCurrencyCode\n        surchargeAmount\n        surchargeAmountCurrencyCode\n        networkReconCurrency\n        crossBorderIndicator\n        systemTrace\n        visaSystemTraceAuditNumber\n        visaRetrievalReferenceNumber\n        merchantPostalCode\n        pinDataPresentIndicator\n        transactionCashbackAmount\n        transactionCashbackAmountCurrencyCode\n        settlementCashbackAmount\n        settlementCashbackAmountCurrencyCode\n        cardholderBillingCashbackAmount\n        cardholderBillingCashbackAmountCurrencyCode\n        fraudIndicator\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"110871\",\n  \"custCardId\": \"INVALID\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Card Proxy",
							"item": [
								{
									"name": "Card Proxy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "12345",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($cif: String!, $custCardId: String) {\n  Customer {\n    getCardProxy(cif: $cif, custCardId: $custCardId) {\n      cardControlUUID\n      cardProxy\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"10221977\",\n  \"custCardId\": \"E9098E816C63591BE05304D32D0A2CA1\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										},
										"description": "Get Card proxy by custcardId\n\nSpec:\n\n[https://ally-nonprod.apigee.com/organizations/ally-nonprod/specs/folder/199279/editor/396509](https://ally-nonprod.apigee.com/organizations/ally-nonprod/specs/folder/199279/editor/396509)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Card ReOrder",
							"item": [
								{
									"name": "Car ReOrder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "12345",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query CardReOrder($cif: String!, $custCardId: String!, $input: CardReOrder) {\n  Customer {\n    cardReOrder(cif: $cif, custCardId: $custCardId, input: $input) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n    }\n  }\n}",
												"variables": "{\n\"cif\": \"10230045\",\n\"custCardId\": \"EC1E01AAE6B20C48E05304D32D0A2EF7\",\n  \"input\": {\n    \"reason\": \"lost\",\n    \"rushFlag\": false\n  }\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										},
										"description": "Get Card proxy by custcardId\n\nSpec:\n\n[https://ally-nonprod.apigee.com/organizations/ally-nonprod/specs/folder/199279/editor/396509](https://ally-nonprod.apigee.com/organizations/ally-nonprod/specs/folder/199279/editor/396509)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Order Debit Card",
							"item": [
								{
									"name": "Order DebitCard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "12345",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query OrderDebitCard($cif: String!, $agentName: String!, $input: PostDebitCard!) {\n  Customer {\n    orderDebitCard(cif: $cif, agentName: $agentName, input: $input) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      cardDetail {\n        accountNumber\n        custCardId\n        lastFourDigits\n        expireDate\n        isCardActive\n        isControlsEnrolled\n        isCardLocked\n        isCardEmbossed\n        embossedDate\n        isReissueCardAvailable\n        statusDetails {\n          status\n          statusDescription\n          statusDisplay\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"10236828\",\n  \"agentName\": \"null\",\n  \"input\": {\n    \"accountNumber\": \"2179755497\",\n    \"accountType\": \"DDA\",\n    \"addressOverrideFlag\": null,\n    \"optInFlag\": null,\n    \"rushFlag\": null\n  }\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										},
										"description": "Get Card proxy by custcardId\n\nSpec:\n\n[https://ally-nonprod.apigee.com/organizations/ally-nonprod/specs/folder/199279/editor/396509](https://ally-nonprod.apigee.com/organizations/ally-nonprod/specs/folder/199279/editor/396509)"
									},
									"response": []
								},
								{
									"name": "Order DebitCard- Null CIF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Should return Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Order Debit Card: Response should return valid error message\", function () {",
													"    var jsonData = pm.response.json();",
													"   // console.log(jsonData);",
													"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
													"    pm.expect(jsonData.errors[0].message).to.eql(`Error ordering debit card for null\"`);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "12345",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query OrderDebitCard($cif: String!, $agentName: String!, $input: PostDebitCard!) {\n  Customer {\n    orderDebitCard(cif: $cif, agentName: $agentName, input: $input) {\n      dapiStatus {\n        statusCode\n        statusDescription\n      }\n      cardDetail {\n        accountNumber\n        custCardId\n        lastFourDigits\n        expireDate\n        isCardActive\n        isControlsEnrolled\n        isCardLocked\n        isCardEmbossed\n        embossedDate\n        isReissueCardAvailable\n        statusDetails {\n          status\n          statusDescription\n          statusDisplay\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
												"variables": "{\n  \"cif\": \"null\",\n  \"agentName\": \"null\",\n  \"input\": {\n    \"accountNumber\": \"2179755497\",\n    \"accountType\": \"DDA\",\n    \"addressOverrideFlag\": null,\n    \"optInFlag\": null,\n    \"rushFlag\": null\n  }\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										},
										"description": "Get Card proxy by custcardId\n\nSpec:\n\n[https://ally-nonprod.apigee.com/organizations/ally-nonprod/specs/folder/199279/editor/396509](https://ally-nonprod.apigee.com/organizations/ally-nonprod/specs/folder/199279/editor/396509)"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Disclosures",
					"item": [
						{
							"name": "Customer Summary",
							"item": [
								{
									"name": "Customer Summary By CIF - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"* @Author: Ryan Devenney (DZM8ZS)",
													"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-17916",
													"*/",
													"",
													"pm.test(\"Customers Summary: Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Customers Summary: Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Customers Summary: zid is present in request\", function () {",
													"    pm.request.to.have.header(\"zid\");",
													"});",
													"",
													"pm.test(\"Customers Summary: Response time is less than 15s\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(15000);",
													"});",
													"",
													"pm.test(\"Customers Summary: Customers not null\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.Customer.customerSummary).to.be.not.eq(null)",
													"});",
													"",
													"pm.test(\"Customers Summary: Customers have proper attributes\", function() {",
													"    var jsonData = pm.response.json().data.Customer.customerSummary;",
													"",
													"    pm.expect(jsonData.household).to.have.any.keys(['orionId', 'orionRepId', 'allyHouseholdId', 'name', 'primaryContact', 'assestsUnderManagement']);",
													"",
													"    pm.expect(jsonData.contact).to.have.any.keys(['guid', 'firstName', 'lastName', 'ssn', 'addresses', 'phones', 'emails', 'occupation', 'employer', 'customerSince', 'isEmployee', 'altids', 'relationships']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "dzm8zs",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($input: CustomerInformation!) {\n  Customer {\n    customerSummary(input: $input) {\n      household {\n        orionId\n        orionRepId\n        allyHouseholdId\n        name\n        primaryContact\n        assetsUnderManagement\n      }\n      contact {\n        guid\n        firstName\n        lastName\n        dateOfBirth\n        ssn\n        addresses {\n          primary {\n            type\n            line1\n            line2\n            line3\n            city\n            zipCode\n            state\n            country\n            careOf\n            endDate\n            lastUpdatedAt\n          }\n          mailing {\n            type\n            line1\n            line2\n            line3\n            city\n            zipCode\n            state\n            country\n            careOf\n            endDate\n            lastUpdatedAt\n          }\n        }\n        phones {\n          type\n          value\n        }\n        emails {\n          type\n          value\n        }\n        occupation\n        employer\n        customerSince\n        isEmployee\n        altids {\n          DEPOSIT\n          INVEST\n          HOMELOANS\n          IDM\n        }\n        relationships {\n          ... on InvestRelationship {\n            id\n            status\n            role\n            createdDateTime\n            relationshipType\n            self_directed_status\n            robo_portfolio_status\n            accounts {\n              lob\n              recordType\n              subType\n              accountNumber\n              isActive\n              currentValue\n              availableValue\n              isManaged\n            }\n          }\n          ... on DefaultRealtionship {\n            id\n            status\n            role\n            createdDateTime\n            relationshipType\n            accounts {\n              ... on CustomerSummaryDeposit {\n                lob\n                recordType\n                type\n                subType\n                accountNumber\n                accountId\n                dateOpened\n                dateClosed\n                isActive\n                status\n                currentValue\n                availableValue\n                accountCode\n                cmgFlag\n              }\n              ... on CustomerSummaryInvest {\n                lob\n                recordType\n                subType\n                accountNumber\n                isActive\n                currentValue\n                availableValue\n                isManaged\n              }\n              ... on CustomerSummaryWealth {\n                lob\n                recordType\n                subType\n                accountNumber\n                isActive\n                currentValue\n                availableValue\n                isManaged\n                managementStyle\n                feeSchedule\n                portfolioType\n                orionAccountId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"uid\": \"10114014\",\n    \"type\": \"DEPOSIT\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Customer Summary By GUID - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"* @Author: Ryan Devenney (DZM8ZS)",
													"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-17916",
													"*/",
													"",
													"pm.test(\"Customers Summary: Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Customers Summary: Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Customers Summary: zid is present in request\", function () {",
													"    pm.request.to.have.header(\"zid\");",
													"});",
													"",
													"pm.test(\"Customers Summary: Response time is less than 20s\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(20000);",
													"});",
													"",
													"pm.test(\"Customers Summary: Customers not null\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.Customer.customerSummary).to.be.not.eq(null)",
													"});",
													"",
													"pm.test(\"Customers Summary: Customers have proper attributes\", function() {",
													"    var jsonData = pm.response.json().data.Customer.customerSummary;",
													"",
													"    pm.expect(jsonData.household).to.have.any.keys(['orionId', 'orionRepId', 'allyHouseholdId', 'name', 'primaryContact', 'assestsUnderManagement']);",
													"",
													"    pm.expect(jsonData.contact).to.have.any.keys(['guid', 'firstName', 'lastName', 'ssn', 'addresses', 'phones', 'emails', 'occupation', 'employer', 'customerSince', 'isEmployee', 'altids', 'relationships']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "dzm8zs",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($input: CustomerInformation!) {\n  Customer {\n    customerSummary(input: $input) {\n      household {\n        orionId\n        orionRepId\n        allyHouseholdId\n        name\n        primaryContact\n        assetsUnderManagement\n      }\n      contact {\n        guid\n        firstName\n        lastName\n        dateOfBirth\n        ssn\n        addresses {\n          primary {\n            type\n            line1\n            line2\n            line3\n            city\n            zipCode\n            state\n            country\n            careOf\n            endDate\n            lastUpdatedAt\n          }\n          mailing {\n            type\n            line1\n            line2\n            line3\n            city\n            zipCode\n            state\n            country\n            careOf\n            endDate\n            lastUpdatedAt\n          }\n        }\n        phones {\n          type\n          value\n        }\n        emails {\n          type\n          value\n        }\n        occupation\n        employer\n        customerSince\n        isEmployee\n        altids {\n          DEPOSIT\n          INVEST\n          HOMELOANS\n          IDM\n        }\n        relationships {\n          ... on InvestRelationship {\n            id\n            status\n            role\n            createdDateTime\n            relationshipType\n            self_directed_status\n            robo_portfolio_status\n            accounts {\n              lob\n              recordType\n              subType\n              accountNumber\n              isActive\n              currentValue\n              availableValue\n              isManaged\n            }\n          }\n          ... on DefaultRealtionship {\n            id\n            status\n            role\n            createdDateTime\n            relationshipType\n            accounts {\n              ... on CustomerSummaryDeposit {\n                lob\n                recordType\n                type\n                subType\n                accountNumber\n                accountId\n                dateOpened\n                dateClosed\n                isActive\n                status\n                currentValue\n                availableValue\n                accountCode\n                cmgFlag\n              }\n              ... on CustomerSummaryInvest {\n                lob\n                recordType\n                subType\n                accountNumber\n                isActive\n                currentValue\n                availableValue\n                isManaged\n              }\n              ... on CustomerSummaryWealth {\n                lob\n                recordType\n                subType\n                accountNumber\n                isActive\n                currentValue\n                availableValue\n                isManaged\n                managementStyle\n                feeSchedule\n                portfolioType\n                orionAccountId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"uid\": \"971563855238319901\",\n    \"type\": \"GUID\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Customer Summary By Scivantage - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"* @Author: Ryan Devenney (DZM8ZS)",
													"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-17916",
													"*/",
													"",
													"pm.test(\"Customers Summary: Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Customers Summary: Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Customers Summary: zid is present in request\", function () {",
													"    pm.request.to.have.header(\"zid\");",
													"});",
													"",
													"pm.test(\"Customers Summary: Response time is less than 15s\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(15000);",
													"});",
													"",
													"pm.test(\"Customers Summary: Customers not null\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.Customer.customerSummary).to.be.not.null",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "dzm8zs",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query Query($input: CustomerInformation!) {\n  Customer {\n    customerSummary(input: $input) {\n      household {\n        orionId\n        orionRepId\n        allyHouseholdId\n        name\n        primaryContact\n        assetsUnderManagement\n      }\n      contact {\n        guid\n        firstName\n        lastName\n        dateOfBirth\n        ssn\n        addresses {\n          primary {\n            type\n            line1\n            line2\n            line3\n            city\n            zipCode\n            state\n            country\n            careOf\n            endDate\n            lastUpdatedAt\n          }\n          mailing {\n            type\n            line1\n            line2\n            line3\n            city\n            zipCode\n            state\n            country\n            careOf\n            endDate\n            lastUpdatedAt\n          }\n        }\n        phones {\n          type\n          value\n        }\n        emails {\n          type\n          value\n        }\n        occupation\n        employer\n        customerSince\n        isEmployee\n        altids {\n          DEPOSIT\n          INVEST\n          HOMELOANS\n          IDM\n        }\n        relationships {\n          ... on InvestRelationship {\n            id\n            status\n            role\n            createdDateTime\n            relationshipType\n            self_directed_status\n            robo_portfolio_status\n            accounts {\n              lob\n              recordType\n              subType\n              accountNumber\n              isActive\n              currentValue\n              availableValue\n              isManaged\n            }\n          }\n          ... on DefaultRealtionship {\n            id\n            status\n            role\n            createdDateTime\n            relationshipType\n            accounts {\n              ... on CustomerSummaryDeposit {\n                lob\n                recordType\n                type\n                subType\n                accountNumber\n                accountId\n                dateOpened\n                dateClosed\n                isActive\n                status\n                currentValue\n                availableValue\n                accountCode\n                cmgFlag\n              }\n              ... on CustomerSummaryInvest {\n                lob\n                recordType\n                subType\n                accountNumber\n                isActive\n                currentValue\n                availableValue\n                isManaged\n              }\n              ... on CustomerSummaryWealth {\n                lob\n                recordType\n                subType\n                accountNumber\n                isActive\n                currentValue\n                availableValue\n                isManaged\n                managementStyle\n                feeSchedule\n                portfolioType\n                orionAccountId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"uid\": \"Kcj3FasyxS\",\n    \"type\": \"SCIVANTAGE\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Disclosure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Disclosure: Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test(\"Update Disclosure: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Update Disclosure: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update Disclosure: value equals true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateDisclosure).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateDisclosure) {\n  Customer(uid: $uid, type: $type) {\n    updateDisclosure(input: $input)\n  }\n}",
										"variables": "{\n    \"uid\": \"9338860\",\n    \"type\": \"DEPOSITS\",\n    \"input\": {\n        \"referenceId\": \"RefNo_5001\",\n        \"senderName\": \"DAO\",\n        \"disclosures\": [{\n            \"customerIdentifier\": \"851480\",\n            \"disclosureStatus\": \"ACCEPTED\",\n            \"disclosureDescription\": \"Online Services Agreement\",\n            \"disclosureType\": \"OBSA\",\n            \"disclosureVersion\": \"1.2\",\n            \"isAcceptanceRequired\": false\n        }]\n    }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Disclosure - OBSA REJECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update Disclosure: value equals true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateDisclosure).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateDisclosure) {\n  Customer(uid: $uid, type: $type) {\n    updateDisclosure(input: $input)\n  }\n}",
										"variables": "{\n    \"uid\": \"10175382\",\n    \"type\": \"DEPOSITS\",\n    \"input\": {\n        \"referenceId\": \"RefNo_5001\",\n        \"senderName\": \"DAO\",\n        \"disclosures\": [{\n            \"customerIdentifier\": \"10175382\",\n            \"disclosureStatus\": \"REJECTED\",\n            \"disclosureDescription\": \"Online Services Agreement\",\n            \"disclosureType\": \"OBSA\",\n            \"disclosureVersion\": \"1.2\",\n            \"isAcceptanceRequired\": false\n        }]\n    }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Disclosure - eSign REJECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update Disclosure: value equals true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateDisclosure).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateDisclosure) {\n  Customer(uid: $uid, type: $type) {\n    updateDisclosure(input: $input)\n  }\n}",
										"variables": "{\n    \"uid\": \"10175382\",\n    \"type\": \"DEPOSITS\",\n    \"input\": {\n        \"referenceId\": \"RefNo_5001\",\n        \"senderName\": \"DAO\",\n        \"disclosures\": [{\n            \"customerIdentifier\": \"10175382\",\n            \"disclosureStatus\": \"REJECTED\",\n            \"disclosureDescription\": \"eSign\",\n            \"disclosureType\": \"ESIGN\",\n            \"disclosureVersion\": \"1.2\",\n            \"isAcceptanceRequired\": false\n        }]\n    }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Disclosure - OBSA VIEWED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update Disclosure: value equals true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateDisclosure).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "rzlhxt",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateDisclosure) {\n  Customer(uid: $uid, type: $type) {\n    updateDisclosure(input: $input)\n  }\n}",
										"variables": "{\n    \"uid\": \"10175382\",\n    \"type\": \"DEPOSITS\",\n    \"input\": {\n        \"referenceId\": \"RefNo_5001\",\n        \"senderName\": \"DAO\",\n        \"disclosures\": [{\n            \"customerIdentifier\": \"10175382\",\n            \"disclosureStatus\": \"ACCEPTED\",\n            \"disclosureDescription\": \"Online Services Agreement\",\n            \"disclosureType\": \"OBSA\",\n            \"disclosureVersion\": \"1.2\",\n            \"isAcceptanceRequired\": false\n        }]\n    }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Disputes",
					"item": [
						{
							"name": "Create Dispute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($cif: String!, $custCardId: String!, $input: [DisputeInput!]) {\n  Account {\n    dispute(cif: $cif, custCardId: $custCardId, input: $input) {\n      message\n      result {\n        status\n        custCardId\n        response\n        error\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"4505519\",\n  \"custCardId\": \"D9F2871FD4407C48E05304D32D0ABA14\",\n  \"input\": [\n    {\n        \"transactionIdKey\": \"6:MC:1002468384\",\n        \"transactionType\":\"POS\",\n        \"disputeReason\":\"LostStolenCard\",\n        \"disputedAmount\": \"20.00\",\n        \"disputeDesc\":\"test\",\n        \"eSignAccepted\":true,\n        \"recognizeMerchant\":\"Yes, I am familiar with this   merchant, but I have never    paid them before\",\n        \"cardLast4Digits\":\"8449\",\n        \"cardOwner\":true,\n        \"cardOwnerInfo\":null,\n        \"userPinStorageDesc\":\"3566\",\n        \"userCardStatus\":\"Stolen\",\n        \"userCardStatusStolenDate\":\"2022-05-29\",\n        \"userAwareTransactionDate\":\"2022-05-30\",\n        \"transactorKnown\":false,\n        \"policeReportFiled\":false,\n        \"userTransactionCancellationMode\":\"Other\",\n        \"userTransactionCancellationReason\":\"not applicable\",\n        \"transactionLodging\":false,\n        \"transactionLodgingNoShow\":false,\n        \"userAwareTransactionLodgingNoShowInfo\":false,\n        \"purchaseExpectedDateDesc\":\"\",\n        \"purchaseReceivedDate\":null,\n        \"purchaseReturned\":false,\n        \"purchaseInfoType\":\"A Service\",\n        \"purchaseReturnedDate\":null,\n        \"merchantRefundAcknowledged\":false,\n        \"merchantContactDate\":\"2021-11-12\",\n        \"userAwareMerchantReturnPolicy\":false,\n        \"merchantReturnPolicy\":\"\",\n        \"userPaymentMode\":\"Another credit or debit card\",\n        \"specificallyDisputeChargesInfo\":   \"specificallyDisputeChargesInfo\",\n        \"userLastValidTransactionDesc\": \"test\",\n        \"agentName\":\"kannadhasanFULLagent\"\n    }]\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Block Information",
					"item": [
						{
							"name": "Get Block Info - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Credential Blocks: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get Credential Blocks: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.getCustomerCredentialBlocks).to.have.all.keys(\"online_access_status\", \"online_access_status_flag\", \"password_status\",",
											"    \"password_status_flag\",\"mfa_status\");",
											"});",
											"pm.test(\"Get Credential Blocks: Response should return getCustomerCredentialBlocks object\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Customer.getCustomerCredentialBlocks).to.be.an(\"object\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($cupid: String!, $userSessionId: String!) {\n  Customer {\n    getCustomerCredentialBlocks(cupid: $cupid, userSessionId: $userSessionId) {\n      online_access_status\n      online_access_status_flag\n      password_status\n      password_status_flag\n      mfa_status\n    }\n  }\n}",
										"variables": "{\n  \"cupid\": \"33789459741893173140053340918643\",\n  \"userSessionId\": \"kzh9x7\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Block Info - Missing cupid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Credential Blocks: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get Credential Blocks: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $userSessionId: String!) {\n  Customer(uid: $uid, type: $type) {\n    getCustomerCredentialBlocks(cupid: $cupid, userSessionId: $userSessionId) {\n      online_access_status\n      online_access_status_flag\n      password_status\n      password_status_flag\n      mfa_status\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"userSessionId\": \"kzh9x7\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Block Info - Missing userSessionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Credential Blocks: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get Credential Blocks: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $userSessionId: String!) {\n  Customer(uid: $uid, type: $type) {\n    getCustomerCredentialBlocks(cupid: $cupid, userSessionId: $userSessionId) {\n      online_access_status\n      online_access_status_flag\n      password_status\n      password_status_flag\n      mfa_status\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Household Wealth Asset Summary",
					"item": [
						{
							"name": "Household Wealth Asset Summary - MTD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Wealth Asset Summary - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Wealth Asset Summary - Response time is less than 20 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(20000);",
											"})",
											"",
											"pm.test(\"Household Wealth Asset Summary - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { householdAssetSummary }}}} = pm.response.json();",
											"",
											"    pm.expect(householdAssetSummary).to.have.any.keys([",
											"        'sessionId',",
											"        'asOfDate',",
											"        'dataLastUpdated',",
											"        'calculations'",
											"    ])",
											"",
											"    householdAssetSummary.calculations.forEach(calc => {",
											"        pm.expect(calc).to.have.any.keys([",
											"            'type',",
											"            'id',",
											"            'units',",
											"            'value',",
											"            'formattedUnits',",
											"            'formattedPrice',",
											"            'formattedValue',",
											"            'startDate', ",
											"            'endDate',",
											"            'calculations'",
											"        ])",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String, $timeFrame: String) {\n  Accounts {\n    Wealth {\n      householdAssetSummary(clientId: $clientId, timeFrame: $timeFrame) {\n        sessionId\n        asOfDate\n        dataLastUpdated\n        calculations {\n          type\n          id\n          units\n          value\n          formattedUnits\n          formattedPrice\n          formattedValue\n          startDate\n          endDate\n          calculations {\n            type\n            entity\n            entityId\n            name\n            inceptionDate\n            color\n            calculations {\n              type\n              id\n              calculatedPerformanceOptionId\n              performance\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\",\n  \"timeFrame\": \"MTD\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Household Wealth Asset Summary - QTD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Wealth Asset Summary - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Wealth Asset Summary - Response time is less than 20 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(20000);",
											"})",
											"",
											"pm.test(\"Household Wealth Asset Summary - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { householdAssetSummary }}}} = pm.response.json();",
											"",
											"    pm.expect(householdAssetSummary).to.have.any.keys([",
											"        'sessionId',",
											"        'asOfDate',",
											"        'dataLastUpdated',",
											"        'calculations'",
											"    ])",
											"",
											"    householdAssetSummary.calculations.forEach(calc => {",
											"        pm.expect(calc).to.have.any.keys([",
											"            'type',",
											"            'id',",
											"            'units',",
											"            'value',",
											"            'formattedUnits',",
											"            'formattedPrice',",
											"            'formattedValue',",
											"            'startDate', ",
											"            'endDate',",
											"            'calculations'",
											"        ])",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String, $timeFrame: String) {\n  Accounts {\n    Wealth {\n      householdAssetSummary(clientId: $clientId, timeFrame: $timeFrame) {\n        sessionId\n        asOfDate\n        dataLastUpdated\n        calculations {\n          type\n          id\n          units\n          value\n          formattedUnits\n          formattedPrice\n          formattedValue\n          startDate\n          endDate\n          calculations {\n            type\n            entity\n            entityId\n            name\n            inceptionDate\n            color\n            calculations {\n              type\n              id\n              calculatedPerformanceOptionId\n              performance\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\",\n  \"timeFrame\": \"QTD\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Household Wealth Asset Summary - YTD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Wealth Asset Summary - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Wealth Asset Summary - Response time is less than 20 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(20000);",
											"})",
											"",
											"pm.test(\"Household Wealth Asset Summary - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { householdAssetSummary }}}} = pm.response.json();",
											"",
											"    pm.expect(householdAssetSummary).to.have.any.keys([",
											"        'sessionId',",
											"        'asOfDate',",
											"        'dataLastUpdated',",
											"        'calculations'",
											"    ])",
											"",
											"    householdAssetSummary.calculations.forEach(calc => {",
											"        pm.expect(calc).to.have.any.keys([",
											"            'type',",
											"            'id',",
											"            'units',",
											"            'value',",
											"            'formattedUnits',",
											"            'formattedPrice',",
											"            'formattedValue',",
											"            'startDate', ",
											"            'endDate',",
											"            'calculations'",
											"        ])",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String, $timeFrame: String) {\n  Accounts {\n    Wealth {\n      householdAssetSummary(clientId: $clientId, timeFrame: $timeFrame) {\n        sessionId\n        asOfDate\n        dataLastUpdated\n        calculations {\n          type\n          id\n          units\n          value\n          formattedUnits\n          formattedPrice\n          formattedValue\n          startDate\n          endDate\n          calculations {\n            type\n            entity\n            entityId\n            name\n            inceptionDate\n            color\n            calculations {\n              type\n              id\n              calculatedPerformanceOptionId\n              performance\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\",\n  \"timeFrame\": \"YTD\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Household Wealth Asset Summary - 1yr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Wealth Asset Summary - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Wealth Asset Summary - Response time is less than 20 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(20000);",
											"})",
											"",
											"pm.test(\"Household Wealth Asset Summary - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { householdAssetSummary }}}} = pm.response.json();",
											"",
											"    pm.expect(householdAssetSummary).to.have.any.keys([",
											"        'sessionId',",
											"        'asOfDate',",
											"        'dataLastUpdated',",
											"        'calculations'",
											"    ])",
											"",
											"    householdAssetSummary.calculations.forEach(calc => {",
											"        pm.expect(calc).to.have.any.keys([",
											"            'type',",
											"            'id',",
											"            'units',",
											"            'value',",
											"            'formattedUnits',",
											"            'formattedPrice',",
											"            'formattedValue',",
											"            'startDate', ",
											"            'endDate',",
											"            'calculations'",
											"        ])",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String, $timeFrame: String) {\n  Accounts {\n    Wealth {\n      householdAssetSummary(clientId: $clientId, timeFrame: $timeFrame) {\n        sessionId\n        asOfDate\n        dataLastUpdated\n        calculations {\n          type\n          id\n          units\n          value\n          formattedUnits\n          formattedPrice\n          formattedValue\n          startDate\n          endDate\n          calculations {\n            type\n            entity\n            entityId\n            name\n            inceptionDate\n            color\n            calculations {\n              type\n              id\n              calculatedPerformanceOptionId\n              performance\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\",\n  \"timeFrame\": \"1yr\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Household Wealth Asset Summary - 3yr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Wealth Asset Summary - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Wealth Asset Summary - Response time is less than 20 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(20000);",
											"})",
											"",
											"pm.test(\"Household Wealth Asset Summary - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { householdAssetSummary }}}} = pm.response.json();",
											"",
											"    pm.expect(householdAssetSummary).to.have.any.keys([",
											"        'sessionId',",
											"        'asOfDate',",
											"        'dataLastUpdated',",
											"        'calculations'",
											"    ])",
											"",
											"    householdAssetSummary.calculations.forEach(calc => {",
											"        pm.expect(calc).to.have.any.keys([",
											"            'type',",
											"            'id',",
											"            'units',",
											"            'value',",
											"            'formattedUnits',",
											"            'formattedPrice',",
											"            'formattedValue',",
											"            'startDate', ",
											"            'endDate',",
											"            'calculations'",
											"        ])",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String, $timeFrame: String) {\n  Accounts {\n    Wealth {\n      householdAssetSummary(clientId: $clientId, timeFrame: $timeFrame) {\n        sessionId\n        asOfDate\n        dataLastUpdated\n        calculations {\n          type\n          id\n          units\n          value\n          formattedUnits\n          formattedPrice\n          formattedValue\n          startDate\n          endDate\n          calculations {\n            type\n            entity\n            entityId\n            name\n            inceptionDate\n            color\n            calculations {\n              type\n              id\n              calculatedPerformanceOptionId\n              performance\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\",\n  \"timeFrame\": \"3yr\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Household Wealth Asset Summary - 5yr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Wealth Asset Summary - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Wealth Asset Summary - Response time is less than 20 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(20000);",
											"})",
											"",
											"pm.test(\"Household Wealth Asset Summary - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { householdAssetSummary }}}} = pm.response.json();",
											"",
											"    pm.expect(householdAssetSummary).to.have.any.keys([",
											"        'sessionId',",
											"        'asOfDate',",
											"        'dataLastUpdated',",
											"        'calculations'",
											"    ])",
											"",
											"    householdAssetSummary.calculations.forEach(calc => {",
											"        pm.expect(calc).to.have.any.keys([",
											"            'type',",
											"            'id',",
											"            'units',",
											"            'value',",
											"            'formattedUnits',",
											"            'formattedPrice',",
											"            'formattedValue',",
											"            'startDate', ",
											"            'endDate',",
											"            'calculations'",
											"        ])",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String, $timeFrame: String) {\n  Accounts {\n    Wealth {\n      householdAssetSummary(clientId: $clientId, timeFrame: $timeFrame) {\n        sessionId\n        asOfDate\n        dataLastUpdated\n        calculations {\n          type\n          id\n          units\n          value\n          formattedUnits\n          formattedPrice\n          formattedValue\n          startDate\n          endDate\n          calculations {\n            type\n            entity\n            entityId\n            name\n            inceptionDate\n            color\n            calculations {\n              type\n              id\n              calculatedPerformanceOptionId\n              performance\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\",\n  \"timeFrame\": \"5yr\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Household Wealth Asset Summary - Inception",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Wealth Asset Summary - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Wealth Asset Summary - Response time is less than 20 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(20000);",
											"})",
											"",
											"pm.test(\"Household Wealth Asset Summary - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { householdAssetSummary }}}} = pm.response.json();",
											"",
											"    pm.expect(householdAssetSummary).to.have.any.keys([",
											"        'sessionId',",
											"        'asOfDate',",
											"        'dataLastUpdated',",
											"        'calculations'",
											"    ])",
											"",
											"    householdAssetSummary.calculations.forEach(calc => {",
											"        pm.expect(calc).to.have.any.keys([",
											"            'type',",
											"            'id',",
											"            'units',",
											"            'value',",
											"            'formattedUnits',",
											"            'formattedPrice',",
											"            'formattedValue',",
											"            'startDate', ",
											"            'endDate',",
											"            'calculations'",
											"        ])",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String, $timeFrame: String) {\n  Accounts {\n    Wealth {\n      householdAssetSummary(clientId: $clientId, timeFrame: $timeFrame) {\n        sessionId\n        asOfDate\n        dataLastUpdated\n        calculations {\n          type\n          id\n          units\n          value\n          formattedUnits\n          formattedPrice\n          formattedValue\n          startDate\n          endDate\n          calculations {\n            type\n            entity\n            entityId\n            name\n            inceptionDate\n            color\n            calculations {\n              type\n              id\n              calculatedPerformanceOptionId\n              performance\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\",\n  \"timeFrame\": \"Inception\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Investment Accounts",
					"item": [
						{
							"name": "Get Investment Accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Investment Accounts: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Get Investment Accounts: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result should have a length of at least 1\", function() {",
											"    pm.expect(pm.response.json().data.Accounts.investmentAccounts.length).to.be.above(0)",
											"})",
											"",
											"pm.test(\"Test for proper data structure on results\", function() {",
											"    console.log(pm.response.json())",
											"    const { data: { Accounts: { investmentAccounts }}} = pm.response.json();",
											"",
											"    investmentAccounts.forEach(account => {",
											"        pm.expect(account).to.have.any.keys(['accountType', 'number', 'nickName', 'eligibilities', 'hasPositions', 'linkedBankAccounts', 'realtimeTransferLimitCategory', 'accountLimits', 'productType', 'balance', 'jointAccountHolders', 'isAccountRestricted', 'isAccountClosed', 'isManagedPortfolio']);",
											"",
											"        account.eligibilities.forEach(e => {",
											"            pm.expect(e).to.have.any.keys(['type', 'eligibile']);",
											"        })",
											"        ",
											"        account.accountLimits.forEach(limit => {",
											"            pm.expect(limit).to.have.any.keys(['type', 'minimumAmount', 'itemLimit', 'dailyMaximum', 'todaysRemaining'])",
											"        })",
											"",
											"        pm.expect(account.balance).to.have.any.keys(['fundsAvailableToWithdraw', 'accountvalue']);",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($input: GetInvestmentAccounts) {\n  Accounts {\n    investmentAccounts(input: $input) {\n      accountType\n      number\n      nickName\n      eligibilities {\n        type\n        eligible\n      }\n      hasPositions\n      linkedBankAccounts {\n        bank\n        accountType\n        aba\n        number\n        achRelationshipId\n        nickName\n      }\n      realtimeTransferLimitCategory\n      accountLimits {\n        type\n        minimumAmount\n        itemLimit\n        dailyMaximum\n        todaysRemaining\n      }\n      productType\n      balance {\n        fundsAvailableToWithdraw\n        accountValue\n      }\n      jointAccountHolders {\n        acmId\n        firstName\n        lastName\n        loginId\n        middleWareRequestId\n      }\n      isAccountRestricted\n      isAccountClosed\n      isManagedPortfolio\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"includeWealthAccounts\": true,\n        \"userId\": \"ipXYyBhJpr\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Investment Accounts - Invalid Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Investment Accounts: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Get Investment Accounts: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result should have a length of 0\", function() {",
											"    pm.expect(pm.response.json().data.Accounts.investmentAccounts.length).to.equal(0)",
											"})",
											"",
											"pm.test(\"Test for proper data structure on results\", function() {",
											"    const { data: { Accounts: { investmentAccounts }}} = pm.response.json();",
											"    console.log(pm.response.json())",
											"",
											"    investmentAccounts.forEach(account => {",
											"        pm.expect(account).to.have.any.keys(['accountType', 'number', 'nickName', 'eligibilities', 'hasPositions', 'linkedBankAccounts', 'realtimeTransferLimitCategory', 'accountLimits', 'productType', 'balance', 'jointAccountHolders', 'isAccountRestricted', 'isAccountClosed', 'isManagedPortfolio']);",
											"",
											"        account.eligibilities.forEach(e => {",
											"            pm.expect(e).to.have.any.keys(['type', 'eligibile']);",
											"        })",
											"        ",
											"        account.accountLimits.forEach(limit => {",
											"            pm.expect(limit).to.have.any.keys(['type', 'minimumAmount', 'itemLimit', 'dailyMaximum', 'todaysRemaining'])",
											"        })",
											"",
											"        pm.expect(account.balance).to.have.any.keys(['fundsAvailableToWithdraw', 'accountvalue']);",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($input: GetInvestmentAccounts) {\n  Accounts {\n    investmentAccounts(input: $input) {\n      accountType\n      number\n      nickName\n      eligibilities {\n        type\n        eligible\n      }\n      hasPositions\n      linkedBankAccounts {\n        bank\n        accountType\n        aba\n        number\n        achRelationshipId\n        nickName\n      }\n      realtimeTransferLimitCategory\n      accountLimits {\n        type\n        minimumAmount\n        itemLimit\n        dailyMaximum\n        todaysRemaining\n      }\n      productType\n      balance {\n        fundsAvailableToWithdraw\n        accountValue\n      }\n      jointAccountHolders {\n        acmId\n        firstName\n        lastName\n        loginId\n        middleWareRequestId\n      }\n      isAccountRestricted\n      isAccountClosed\n      isManagedPortfolio\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"includeWealthAccounts\": true,\n        \"userId\": \"ipXYyBhJpr9999\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Investment Accounts - additonal test account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Investment Accounts: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Get Investment Accounts: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result should have a length of at least 1\", function() {",
											"    pm.expect(pm.response.json().data.Accounts.investmentAccounts.length).to.be.above(0)",
											"})",
											"",
											"pm.test(\"Test for proper data structure on results\", function() {",
											"    const { data: { Accounts: { investmentAccounts }}} = pm.response.json();",
											"",
											"    investmentAccounts.forEach(account => {",
											"        pm.expect(account).to.have.any.keys(['accountType', 'number', 'nickName', 'eligibilities', 'hasPositions', 'linkedBankAccounts', 'realtimeTransferLimitCategory', 'accountLimits', 'productType', 'balance', 'jointAccountHolders', 'isAccountRestricted', 'isAccountClosed', 'isManagedPortfolio']);",
											"",
											"        account.eligibilities.forEach(e => {",
											"            pm.expect(e).to.have.any.keys(['type', 'eligible']);",
											"        })",
											"        ",
											"        account.accountLimits.forEach(limit => {",
											"            pm.expect(limit).to.have.all.keys(['type', 'minimumAmount', 'itemLimit', 'dailyMaximum', 'todaysRemaining'])",
											"        })",
											"",
											"        pm.expect(account.balance).to.have.any.keys(['fundsAvailableToWithdraw', 'accountvalue']);",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($input: GetInvestmentAccounts) {\n  Accounts {\n    investmentAccounts(input: $input) {\n      accountType\n      number\n      nickName\n      eligibilities {\n        type\n        eligible\n      }\n      hasPositions\n      linkedBankAccounts {\n        bank\n        accountType\n        aba\n        number\n        achRelationshipId\n        nickName\n      }\n      realtimeTransferLimitCategory\n      accountLimits {\n        type\n        minimumAmount\n        itemLimit\n        dailyMaximum\n        todaysRemaining\n      }\n      productType\n      balance {\n        fundsAvailableToWithdraw\n        accountValue\n      }\n      jointAccountHolders {\n        acmId\n        firstName\n        lastName\n        loginId\n        middleWareRequestId\n      }\n      isAccountRestricted\n      isAccountClosed\n      isManagedPortfolio\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n    \"includeWealthAccounts\": true,\n    \"userId\": \"WBtkp2PH7Y\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "**API Spec:** [https://api-qa.invest.int.ally.com/swagger-ui.html?urls.primaryName=account-details#/account-details-controller](https://api-qa.invest.int.ally.com/swagger-ui.html?urls.primaryName=account-details#/account-details-controller)"
				},
				{
					"name": "Meetings",
					"item": [
						{
							"name": "Create Meeting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Create Meeting: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Create Meeting: Response time less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($input: createMeetingInput) {\n  Meetings {\n    createMeeting(input: $input) {\n      assistant_id\n      host_email\n      id\n      registration_url\n      agenda\n      created_at\n      duration\n      h323_password\n      join_url\n      occurrences {\n        duration\n        occurrence_id\n        start_time\n        status\n      }\n      password\n      pmi\n      recurrence {\n        end_date_time\n        end_times\n        monthly_day\n        monthly_week\n        monthly_week_day\n        repeat_interval\n        type\n        weekly_days\n      }\n      settings {\n        additional_data_center_regions\n        allow_multiple_devices\n        alternative_hosts\n        alternative_hosts_email_notification\n        approval_type\n        approved_or_denied_countries_or_regions {\n          approved_list\n          denied_list\n          enable\n          method\n        }\n        audio\n        authentication_domains\n        authentication_exception {\n          email\n          name\n          join_url\n        }\n        authentication_name\n        authentication_option\n        auto_recording\n        breakout_room {\n          enable\n          rooms {\n            name\n            participants\n          }\n        }\n        calendar_type\n        close_registration\n        contact_email\n        contact_name\n        email_notification\n        encryption_type\n        focus_mode\n        global_dial_in_countries\n        global_dial_in_numbers {\n          city\n          country\n          country_name\n          number\n          type\n        }\n        host_video\n        jbh_time\n        join_before_host\n        language_interpretation {\n          enable\n          interpreters {\n            email\n            languages\n          }\n        }\n        meeting_authentication\n        meeting_invitees {\n          email\n        }\n        mute_upon_entry\n        participant_video\n        private_meeting\n        registrants_confirmation_email\n        registrants_email_notification\n        registration_type\n        show_share_button\n        use_pmi\n        waiting_room\n        watermark\n        host_save_video_order\n        alternative_host_update_polls\n      }\n      start_time\n      start_url\n      timezone\n      topic\n      tracking_fields {\n        field\n        value\n        visible\n      }\n      type\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n  \"agenda\": \"My Meeting\",\n  \"default_password\": false,\n  \"duration\": 60,\n  \"password\": \"123456\",\n  \"recurrence\": {\n    \"end_date_time\": \"2022-04-02T15:59:00Z\",\n    \"end_times\": 7,\n    \"monthly_day\": 1,\n    \"monthly_week\": 1,\n    \"monthly_week_day\": 1,\n    \"repeat_interval\": 1,\n    \"type\": 1,\n    \"weekly_days\": \"1\"\n  },\n  \"settings\": {\n    \"additional_data_center_regions\": [\n      \"TY\"\n    ],\n    \"allow_multiple_devices\": true,\n    \"alternative_hosts_email_notification\": true,\n    \"approval_type\": 2,\n    \"approved_or_denied_countries_or_regions\": {\n      \"approved_list\": [\n        \"CX\",\n        \"US\"\n      ],\n      \"denied_list\": [\n        \"CA\"\n      ],\n      \"enable\": true,\n      \"method\": \"approve\"\n    },\n    \"audio\": \"telephony\",\n    \"authentication_domains\": \"example.com\",\n    \"authentication_exception\": [\n      {\n        \"email\": \"jchill@example.com\",\n        \"name\": \"Jill Chill\"\n      }\n    ],\n    \"authentication_option\": \"signIn_D8cJuqWVQ623CI4Q8yQK0Q\",\n    \"auto_recording\": \"cloud\",\n    \"breakout_room\": {\n      \"enable\": true,\n      \"rooms\": [\n        {\n          \"name\": \"room1\",\n          \"participants\": [\n            \"jchill@example.com\"\n          ]\n        }\n      ]\n    },\n    \"calendar_type\": 1,\n    \"close_registration\": false,\n    \"contact_email\": \"jchill@example.com\",\n    \"contact_name\": \"Jill Chill\",\n    \"email_notification\": true,\n    \"encryption_type\": \"enhanced_encryption\",\n    \"focus_mode\": true,\n    \"global_dial_in_countries\": [\n      \"US\"\n    ],\n    \"host_video\": true,\n    \"jbh_time\": 0,\n    \"join_before_host\": false,\n    \"language_interpretation\": {\n      \"enable\": true,\n      \"interpreters\": [\n        {\n          \"email\": \"interpreter@example.com\",\n          \"languages\": \"US,FR\"\n        }\n      ]\n    },\n    \"meeting_authentication\": false,\n    \"meeting_invitees\": [\n      {\n        \"email\": \"jchill@example.com\"\n      }\n    ],\n    \"mute_upon_entry\": false,\n    \"participant_video\": false,\n    \"private_meeting\": false,\n    \"registrants_confirmation_email\": true,\n    \"registrants_email_notification\": true,\n    \"registration_type\": 1,\n    \"show_share_button\": true,\n    \"use_pmi\": false,\n    \"waiting_room\": false,\n    \"waiting_room_options\": {\n      \"enable\": true,\n      \"admit_type\": 1,\n      \"auto_admit\": 1,\n      \"internal_user_auto_admit\": 1\n    },\n    \"watermark\": false,\n    \"host_save_video_order\": true,\n    \"alternative_host_update_polls\": false\n  },\n  \"start_time\": \"2022-03-25T07:32:55Z\",\n  \"template_id\": \"Dv4YdINdTk+Z5RToadh5ug==\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"topic\": \"My Meeting\",\n  \"tracking_fields\": [\n    {\n      \"field\": \"field1\",\n      \"value\": \"value1\"\n    }\n  ],\n  \"type\": 2\n}\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Meeting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Meeting: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Meeting: Response time less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"});",
											"",
											"pm.test(\"Get Meeting: Contains Meeting Start Time\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.Meetings.meetingDetails.start_time).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Get Meeting: Contains Meeting ID\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.Meetings.meetingDetails.id).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Get Meeting: Contains Meeting URL\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.Meetings.meetingDetails.start_url).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($meetingId: Float!) {\n  Meetings {\n    meetingDetails(meetingId: $meetingId) {\n      assistant_id\n      host_email\n      host_id\n      id\n      uuid\n      agenda\n      created_at\n      duration\n      encrypted_password\n      h323_password\n      join_url\n      password\n      pmi\n      pre_schedule\n      start_time\n      start_url\n      status\n      timezone\n      topic\n      type\n      settings {\n        allow_multiple_devices\n        alternative_hosts\n        alternative_hosts_email_notification\n        alternative_host_update_polls\n        approval_type\n        audio\n        authentication_domains\n        authentication_name\n        authentication_option\n        auto_recording\n        calendar_type\n        close_registration\n        contact_email\n        contact_name\n        email_notification\n        encryption_type\n        focus_mode\n        host_video\n        jbh_time\n        join_before_host\n        meeting_authentication\n        mute_upon_entry\n        participant_video\n        private_meeting\n        registrants_confirmation_email\n        registrants_email_notification\n        registration_type\n        show_share_button\n        use_pmi\n        waiting_room\n        watermark\n        host_save_video_order\n        waiting_room_options {\n          enable\n          admit_type\n          auto_admit\n          internal_user_auto_admit\n        }\n        language_interpretation {\n          enable\n          interpreters {\n            email\n            languages\n          }\n        }\n        global_dial_in_numbers {\n          city\n          country\n          country_name\n          number\n          type\n        }\n        global_dial_in_countries\n        custom_keys {\n          key\n          value\n        }\n        breakout_room {\n          enable\n          rooms {\n            name\n            participants\n          }\n        }\n        authentication_exception {\n          email\n          name\n          join_url\n        }\n        approved_or_denied_countries_or_regions {\n          enable\n          method\n          denied_list\n          approved_list\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"meetingId\": 93319235817\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Old Accounts",
					"item": [
						{
							"name": "Account Information - CIF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Rene Osman",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-20272",
											"*/",
											"",
											"pm.test(\"Old Accounts - Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Old Accounts - Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Old Accounts - Account Information is an array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountInformation).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"Old Accounts - Account Information contains properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    var { lob } = JSON.parse(pm.request.body.graphql.variables);",
											"    if(jsonData.data.Accounts.accountInformation.length > 0){",
											"        for(var i = 0; i < jsonData.data.Accounts.accountInformation.length; i++){",
											"            pm.expect(jsonData.data.Accounts.accountInformation[i].name).to.be.a('string')",
											"            pm.expect(jsonData.data.Accounts.accountInformation[i].lob).to.contain(lob)",
											"            // pm.expect(jsonData.data.Accounts.accountInformation[i].closeDate).to.be.a('string')",
											"            // pm.expect(jsonData.data.Accounts.accountInformation[i].openDate).to.be.a('string')",
											"        }",
											"    }",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($lob: String!, $cif: String!, $closedFromDate: String) {\n  Accounts {\n    accountInformation(lob: $lob, cif: $cif, closedFromDate: $closedFromDate) {\n      name\n      nickName\n      institution\n      status\n      lob\n      accountNumber\n      routingNumber\n      openDate\n      closeDate\n      type\n      ownershipType\n      productId\n      productDescription\n      lastUpdated\n      meta {\n        retirementPlanId\n        retirementPlanType\n        retirementPlanNumber\n      }\n      indicator {\n        retirement\n        cdInGracePeriod\n      }\n      interest {\n        apy\n        rate\n        ytd\n        totalAccrued\n      }\n      balance {\n        current\n        available\n      }\n    }\n  }\n}",
										"variables": "{\n  \"lob\": \"DEPOSIT\",\n  \"cif\": \"9339083\",\n  \"closedFromDate\": \"06/20/2020\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Restrictions",
					"item": [
						{
							"name": "Update Restriction - Successful - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateRestriction.restrictionUpdated).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10114014\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Active\",\n    \"BlockReason\": \"BankRequest\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Restriction - Successful - Blocked",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateRestriction.restrictionUpdated).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10175382\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Blocked\",\n    \"BlockReason\": \"BankRequest\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Restriction - Invalid Block Reason",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: Errors returned correctly\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.be.eql('Invalid BlockReason, valid reasons: PasswordFailure, CustomerRequest, BankRequest, PasswordChangeFailure');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10175382\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Blocked\",\n    \"BlockReason\": \"Test\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Restriction - Invalid User Online Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: Errors returned correctly\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.be.eql('Invalid UserOnlineStatus, valid reasons: Blocked or Active');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10175382\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Test\",\n    \"BlockReason\": \"None\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.data.Customer.getRestDisc.restrictions[0]).to.have(\"code\");",
											"",
											"    if(jsonData.data.Customer.getRestDisc.restrictions.length > 0){",
											"        for(var i = 0; i < jsonData.data.Customer.getRestDisc.restrictions.length; i++){",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].code).to.be.a('string')",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].description).to.be.a('string')",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: GetRestDisclosures) {\n  Customer(uid: $uid, type: $type) {\n    getRestDisc(input: $input) {\n      restrictions {\n        code\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"971563855238319901\",\n  \"type\": \"GUID\",\n  \"input\": {\n    \"searchBy\": \"GUID\",\n    \"uid\": \"971563855238319901\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Restriction - Active Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateRestriction.restrictionUpdated).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10114014\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Active\",\n    \"BlockReason\": \"BankRequest\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Restriction - Blocked Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateRestriction.restrictionUpdated).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10175382\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Blocked\",\n    \"BlockReason\": \"BankRequest\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Restriction - Multiple Restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateRestriction.restrictionUpdated).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10175382\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Blocked\",\n    \"BlockReason\":\"CustomerRequest\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restrictions - Multiple Restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.data.Customer.getRestDisc.restrictions[0]).to.have(\"code\");",
											"",
											"    if(jsonData.data.Customer.getRestDisc.restrictions.length > 0){",
											"        for(var i = 0; i < jsonData.data.Customer.getRestDisc.restrictions.length; i++){",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].code).to.be.a('string')",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].description).to.be.a('string')",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: GetRestDisclosures) {\n  Customer(uid: $uid, type: $type) {\n    getRestDisc(input: $input) {\n      restrictions {\n        code\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"699465059915565301\",\n  \"type\": \"GUID\",\n  \"input\": {\n    \"searchBy\": \"GUID\",\n    \"uid\": \"699465059915565301\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Restriction - Exceeded maximum password failures",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateRestriction.restrictionUpdated).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10197271\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Blocked\",\n    \"BlockReason\": \"PasswordFailure\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restrictions - Exceeded maximum password failures",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.data.Customer.getRestDisc.restrictions[0]).to.have(\"code\");",
											"",
											"    if(jsonData.data.Customer.getRestDisc.restrictions.length > 0){",
											"        for(var i = 0; i < jsonData.data.Customer.getRestDisc.restrictions.length; i++){",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].code).to.be.a('string')",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].description).to.be.a('string')",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: GetRestDisclosures) {\n  Customer(uid: $uid, type: $type) {\n    getRestDisc(input: $input) {\n      restrictions {\n        code\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"101965539568672102\",\n  \"type\": \"GUID\",\n  \"input\": {\n    \"searchBy\": \"GUID\",\n    \"uid\": \"101965539568672102\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Restriction - Password Change Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateRestriction.restrictionUpdated).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "\n{\n  \"uid\": \"10197272\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Blocked\",\n    \"BlockReason\": \"PasswordChangeFailure\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restrictions - Password Change Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.data.Customer.getRestDisc.restrictions[0]).to.have(\"code\");",
											"",
											"    if(jsonData.data.Customer.getRestDisc.restrictions.length > 0){",
											"        for(var i = 0; i < jsonData.data.Customer.getRestDisc.restrictions.length; i++){",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].code).to.be.a('string')",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].description).to.be.a('string')",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: GetRestDisclosures) {\n  Customer(uid: $uid, type: $type) {\n    getRestDisc(input: $input) {\n      restrictions {\n        code\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"598865539572757302\",\n  \"type\": \"GUID\",\n  \"input\": {\n    \"searchBy\": \"GUID\",\n    \"uid\": \"598865539572757302\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restrictions - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.data.Customer.getRestDisc.restrictions[0]).to.have(\"code\");",
											"",
											"    if(jsonData.data.Customer.getRestDisc.restrictions.length > 0){",
											"        for(var i = 0; i < jsonData.data.Customer.getRestDisc.restrictions.length; i++){",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].code).to.be.a('string')",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].description).to.be.a('string')",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: GetRestDisclosures) {\n  Customer(uid: $uid, type: $type) {\n    getRestDisc(input: $input) {\n      restrictions {\n        code\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"971563855238319901\",\n  \"type\": \"GUID\",\n  \"input\": {\n    \"searchBy\": \"GUID\",\n    \"uid\": \"971563855238319901\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restrictions - Blocked",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.data.Customer.getRestDisc.restrictions[0]).to.have(\"code\");",
											"",
											"    if(jsonData.data.Customer.getRestDisc.restrictions.length > 0){",
											"        for(var i = 0; i < jsonData.data.Customer.getRestDisc.restrictions.length; i++){",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].code).to.be.a('string')",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].description).to.be.a('string')",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: GetRestDisclosures) {\n  Customer(uid: $uid, type: $type) {\n    getRestDisc(input: $input) {\n      restrictions {\n        code\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"699465059915565301\",\n  \"type\": \"GUID\",\n  \"input\": {\n    \"searchBy\": \"GUID\",\n    \"uid\": \"699465059915565301\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reset MFA Status",
					"item": [
						{
							"name": "Reset MFA Status - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reset MFA Status: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Reset MFA Status: Rseponse should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer).to.have.all.keys(\"resetMFAStatus\");",
											"});",
											"pm.test(\"Reset MFA Status: Response should return resetMFAStatus object\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Customer.resetMFAStatus).to.be.an(\"boolean\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($cupid: String!, $userSessionId: String!, $traceId: String!, $input: MFAStatus!) {\n  Customer {\n    resetMFAStatus(cupid: $cupid, userSessionId: $userSessionId, traceId: $traceId, input: $input)\n  }\n}",
										"variables": "{\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"userSessionId\": \"kzh9x7\",\n  \"traceId\": \"test\",\n  \"input\": {\n    \"mfaStatus\": \"unverified\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset MFA Status - Missing cupid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reset MFA Status: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Reset MFA Status: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $userSessionId: String!, $traceId: String!, $input: MFAStatus!) {\n  Customer(uid: $uid, type: $type) {\n    resetMFAStatus(cupid: $cupid, userSessionId: $userSessionId, traceId: $traceId, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"userSessionId\": \"kzh9x7\",\n  \"traceId\": \"test\",\n  \"input\": {\n    \"mfaStatus\": \"unverified\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset MFA Status - Missing MFA status field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reset MFA Status: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Reset MFA Status: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $userSessionId: String!, $traceId: String!, $input: MFAStatus!) {\n  Customer(uid: $uid, type: $type) {\n    resetMFAStatus(cupid: $cupid, userSessionId: $userSessionId, traceId: $traceId, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"userSessionId\": \"kzh9x7\",\n  \"traceId\": \"test\",\n  \"input\": null\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Strata - Credential Management API",
					"item": [
						{
							"name": "Delete Credentials",
							"item": [
								{
									"name": "Delete Credentials - Successful *YOU NEED A NEW CUPID EACH TIME FOR THE TESTS TO PASS* Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"** On o6/30/2022, VYerravally marked these tests to be skipped as we need to chain the tests with ",
													"** create credentials.",
													"**",
													"**",
													"*/",
													"pm.test(\"Delete Credentials - Successful; Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Delete Credentials - Successful; Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Delete Credentials - Successful; value is true \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.Customer.deleteCredentials.customerCredentialsDeleted).to.eql(true);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "test",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $userSessionId: String!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    deleteCredentials(userSessionId: $userSessionId, cupid: $cupid) {\n      customerCredentialsDeleted\n    }\n  }\n}",
												"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"userSessionId\": \"rz28v6\",\n  \"cupid\": \"86279906381538895221045499706536\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credentials - Credentials Already Deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Credentials - Credentials already deleted; Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Delete Credentials - Credentials already deleted; Validate data shape and error message\", function () {",
													"const { errors } = pm.response.json();",
													"",
													"",
													"    pm.expect(errors).to.be.an(\"array\");",
													"    ",
													"      errors.forEach(error => {",
													"        pm.expect(error).to.have.all.keys([\"message\", \"locations\", \"path\", \"extensions\"]);",
													"        pm.expect(error.message).to.eql(\"a user with that CUPID was not found\");",
													"        pm.expect(error.extensions.code).to.eql(\"QUERY_ERROR\");",
													"        pm.expect(error.extensions.statusCode).to.eql(500);",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "kzh9x7",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $userSessionId: String!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    deleteCredentials(userSessionId: $userSessionId, cupid: $cupid) {\n      customerCredentialsDeleted\n    }\n  }\n}",
												"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"userSessionId\": \"rz28v6\",\n  \"cupid\": \"52509609668888314918268939619495\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credentials - Cupid is Nonsense",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Credentials - Cupid is Nonsense; Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Delete Credentials - Cupid is Nonsense; Validate data shape and error message\", function () {",
													"const { errors } = pm.response.json();",
													"",
													"",
													"    pm.expect(errors).to.be.an(\"array\");",
													"    ",
													"      errors.forEach(error => {",
													"        pm.expect(error).to.have.all.keys([\"message\", \"locations\", \"path\", \"extensions\"]);",
													"        pm.expect(error.message).to.eql(\"a user with that CUPID was not found\");",
													"        pm.expect(error.extensions.code).to.eql(\"QUERY_ERROR\");",
													"        pm.expect(error.extensions.statusCode).to.eql(500);",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "kzh9x7",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $userSessionId: String!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    deleteCredentials(userSessionId: $userSessionId, cupid: $cupid) {\n      customerCredentialsDeleted\n    }\n  }\n}",
												"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"userSessionId\": \"rz28v6\",\n  \"cupid\": \"lalalalalala\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credentials - UserSessionId not included in Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Credentials - UserSessionId not included in Request; Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Delete Credentials - UserSessionId not included in Request; Validate data shape and error message\", function () {",
													"const { errors } = pm.response.json();",
													"",
													"",
													"    pm.expect(errors).to.be.an(\"array\");",
													"    ",
													"      errors.forEach(error => {",
													"        pm.expect(error).to.have.all.keys([\"message\",\"extensions\"]);",
													"        pm.expect(error.message).to.eql('Variable \"$userSessionId\" of required type \"String!\" was not provided.');",
													"        pm.expect(error.extensions.code).to.eql(\"BAD_USER_INPUT\");",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "kzh9x7",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $userSessionId: String!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    deleteCredentials(userSessionId: $userSessionId, cupid: $cupid) {\n      customerCredentialsDeleted\n    }\n  }\n}",
												"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"cupid\": \"55205158390316420358535847012827\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credentials - Cupid not included in Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Credentials - Cupid not included in Request; Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Delete Credentials - Cupid not included in Request; Validate data shape and error message\", function () {",
													"const { errors } = pm.response.json();",
													"",
													"",
													"    pm.expect(errors).to.be.an(\"array\");",
													"    ",
													"      errors.forEach(error => {",
													"        pm.expect(error).to.have.all.keys([\"message\",\"extensions\"]);",
													"        pm.expect(error.message).to.eql('Variable \"$cupid\" of required type \"String!\" was not provided.');",
													"        pm.expect(error.extensions.code).to.eql(\"BAD_USER_INPUT\");",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "kzh9x7",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $userSessionId: String!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    deleteCredentials(userSessionId: $userSessionId, cupid: $cupid) {\n      customerCredentialsDeleted\n    }\n  }\n}",
												"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"userSessionId\": \"rz28v6\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credentials - UserSessionId is an Empty String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Credentials - UserSessionId is an Empty String; Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Delete Credentials - UserSessionId is an Empty String; Validate data shape and error message\", function () {",
													"const { errors } = pm.response.json();",
													"",
													"",
													"    pm.expect(errors).to.be.an(\"array\");",
													"    ",
													"      errors.forEach(error => {",
													"        pm.expect(error).to.have.all.keys([\"message\", \"locations\", \"path\", \"extensions\"]);",
													"        pm.expect(error.message).to.eql(\"missing manadatory headers\");",
													"        pm.expect(error.extensions.code).to.eql(\"QUERY_ERROR\");",
													"        pm.expect(error.extensions.statusCode).to.eql(500);",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "kzh9x7",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $userSessionId: String!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    deleteCredentials(userSessionId: $userSessionId, cupid: $cupid) {\n      customerCredentialsDeleted\n    }\n  }\n}",
												"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"userSessionId\": \"\",\n  \"cupid\": \"55205158390316420358535847012827\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credentials - Cupid is Empty String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Credentials - Cupid is Empty String; Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Delete Credentials - Cupid is Empty String; Validate data shape and error message\", function () {",
													"const { errors } = pm.response.json();",
													"",
													"",
													"    pm.expect(errors).to.be.an(\"array\");",
													"    ",
													"      errors.forEach(error => {",
													"        pm.expect(error).to.have.all.keys([\"message\", \"locations\", \"path\", \"extensions\"]);",
													"        pm.expect(error.message).to.eql(\"Internal Server Error\");",
													"        pm.expect(error.extensions.code).to.eql(\"INTERNAL_SERVER_ERROR\");",
													"        pm.expect(error.extensions.statusCode).to.eql(500);",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "zid",
												"value": "kzh9x7",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation Mutation($uid: String!, $type: String!, $userSessionId: String!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    deleteCredentials(userSessionId: $userSessionId, cupid: $cupid) {\n      customerCredentialsDeleted\n    }\n  }\n}",
												"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"userSessionId\": \"rz28v6\",\n  \"cupid\": \"\"\n}"
											}
										},
										"url": {
											"raw": "{{base_url}}{{path}}",
											"host": [
												"{{base_url}}{{path}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Customer Blocks - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Credential Blocks: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Get Credential Blocks: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer.getCustomerCredentialBlocks).to.have.all.keys(\"online_access_status\", \"online_access_status_flag\", \"password_status\",",
											"    \"password_status_flag\",\"mfa_status\");",
											"});",
											"pm.test(\"Get Credential Blocks: Response should return getCustomerCredentialBlocks object\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Customer.getCustomerCredentialBlocks).to.be.an(\"object\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $userSessionId: String!) {\n  Customer(uid: $uid, type: $type) {\n    getCustomerCredentialBlocks(cupid: $cupid, userSessionId: $userSessionId) {\n      online_access_status\n      online_access_status_flag\n      password_status\n      password_status_flag\n      mfa_status\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"userSessionId\": \"kzh9x7\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset MFA Status - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reset MFA Status: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Reset MFA Status: Rseponse should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer).to.have.all.keys(\"resetMFAStatus\");",
											"});",
											"pm.test(\"Reset MFA Status: Response should return resetMFAStatus object\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Customer.resetMFAStatus).to.be.an(\"boolean\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $userSessionId: String!, $traceId: String!, $input: MFAStatus!) {\n  Customer(uid: $uid, type: $type) {\n    resetMFAStatus(cupid: $cupid, userSessionId: $userSessionId, traceId: $traceId, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"userSessionId\": \"kzh9x7\",\n  \"traceId\": \"test\",\n  \"input\": {\n    \"mfaStatus\": \"unverified\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Password Hint - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Password Hint: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Password Hint: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer.updatePasswordHint).to.have.all.keys(\"passwordHintUpdated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "kzh9x7",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: UpdatePasswordHint!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    updatePasswordHint(input: $input, cupid: $cupid) {\n      passwordHintUpdated\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": {\n    \"passwordHint\": \"test\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Login ID - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Password Hint: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Password Hint: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer.updatePasswordHint).to.have.all.keys(\"passwordHintUpdated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "wwQrWtW4z2AYdkA9TPlAVIGc27qL",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "kzh9x7",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: UpdatePasswordHint!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    updatePasswordHint(input: $input, cupid: $cupid) {\n      passwordHintUpdated\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": {\n    \"loginId\":\"prem123\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Password - Sucess Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Reset Password: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cupid: String!) {\n  Customer {\n    resetCredentials(cupid: $cupid)\n  }\n}",
										"variables": "{\n  \"cupid\": \"33789459741893173140053340918643\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credential Blocks - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Credential Blocks: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Credential Blocks: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer).to.have.all.keys(\"updateCredentialBlocks\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $input: CustomerCredentialBlocks!) {\n  Customer(uid: $uid, type: $type) {\n    updateCredentialBlocks(cupid: $cupid, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": {\n    \"onlineAccessStatus\": \"active\",\n    \"passwordStatus\": \"active\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Credentials - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search Credentials: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Search Credentials: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Search Credentials: value is not empty \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.searchCredentials.results).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"zid\": \"JZL29C\",\n  \"input\": {\n    \"role\": \"agent\",\n    \"loginId\": \"guardians_demo03\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Credentials - Using CIF to get CUPID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search Credentials: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Search Credentials: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Search Credentials: value is not empty \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.searchCredentials.results).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n        cupid\n      }\n    }\n  }\n}",
										"variables": "{\n  \"zid\": \"JZL29C\",\n  \"input\": {\n    \"role\": \"agent\",\n    \"cif\": \"10190140\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Credentials - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Create Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Create Credentials: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Create Credentials: value is true \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.createCredentials.customerCredentialsCreated).to.be.an(\"boolean\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "kzh9x7",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query CreateCredentials($userSessionId: String!, $traceId: String!, $input: createCreds!) {\n  Customer {\n    createCredentials(userSessionId: $userSessionId, traceId: $traceId, input: $input) {\n      customerCredentialsCreated\n      error\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"loginId\": \"luke-temp7\",\n    \"cif\": \"10215478\"\n  },\n  \"traceId\": \"test\",\n  \"userSessionId\": \"kzh9x7\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Stop Check",
					"item": [
						{
							"name": "GET - Stop Checks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Stop Checks result should be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Stop Checks result should have the appropriate data structure\", () => {",
											"    pm.response.json().data.Customer.stopChecks.forEach(stopCheck => {",
											"        pm.expect(stopCheck).to.have.all.keys('stopCheckPaymentId', 'createdDate', 'expireDate', 'amountPvtEncrypt', 'payeeName', 'reasonCode', 'checkNumberPvtEncrypt', 'beginCheckNumberPvtEncrypt', 'endCheckNumberPvtEncrypt', 'account', 'stopType', 'companyName', 'memo');",
											"",
											"        pm.expect(stopCheck.account).to.have.all.keys('accountId', 'accountNumberPvtEncrypt', 'accountNickname')",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($uid: String!, $type: String!) {\n  Customer(uid: $uid, type: $type) {\n    stopChecks {\n      stopCheckPaymentId\n      createdDate\n      expireDate\n      amountPvtEncrypt\n      payeeName\n      reasonCode\n      checkNumberPvtEncrypt\n      beginCheckNumberPvtEncrypt\n      endCheckNumberPvtEncrypt\n      account {\n        accountId\n        accountNumberPvtEncrypt\n        accountNickname\n      }\n      stopType\n      companyName\n      memo\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"9338860\",\n  \"type\": \"DEPOSITS\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Stop Checks - None Available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Stop Checks result should not be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).to.not.be.an(\"array\");",
											"})",
											"",
											"pm.test(\"Stop Checks result should have the appropriate data structure\", () => {",
											"    pm.expect(pm.response.json().data.Customer).to.have.all.keys('stopChecks');",
											"})",
											"",
											"pm.test(\"Stop Checks result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).to.eq(null);",
											"})",
											"",
											"pm.test(\"Stop Checks result should return valid error message\", () => {",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"Error getting stop checks\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($uid: String!, $type: String!) {\n  Customer(uid: $uid, type: $type) {\n    stopChecks {\n      stopCheckPaymentId\n      createdDate\n      expireDate\n      amountPvtEncrypt\n      payeeName\n      reasonCode\n      checkNumberPvtEncrypt\n      beginCheckNumberPvtEncrypt\n      endCheckNumberPvtEncrypt\n      account {\n        accountId\n        accountNumberPvtEncrypt\n        accountNickname\n      }\n      stopType\n      companyName\n      memo\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"10175382\",\n  \"type\": \"DEPOSITS\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Stop Checks - Filtered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Stop Checks result should be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Stop Checks result should have the appropriate data structure\", () => {",
											"    pm.response.json().data.Customer.stopChecks.forEach(stopCheck => {",
											"        pm.expect(stopCheck).to.have.all.keys('stopCheckPaymentId', 'createdDate', 'expireDate', 'amountPvtEncrypt', 'payeeName', 'reasonCode', 'checkNumberPvtEncrypt', 'beginCheckNumberPvtEncrypt', 'endCheckNumberPvtEncrypt', 'account', 'stopType', 'companyName', 'memo');",
											"",
											"        pm.expect(stopCheck.account).to.have.all.keys('accountId', 'accountNumberPvtEncrypt', 'accountNickname')",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($uid: String, $type: String, $accountNumber: String) {\n  Customer(uid: $uid, type: $type) {\n    stopChecks(accountNumber: $accountNumber) {\n      stopCheckPaymentId\n      createdDate\n      expireDate\n      amountPvtEncrypt\n      payeeName\n      reasonCode\n      checkNumberPvtEncrypt\n      beginCheckNumberPvtEncrypt\n      endCheckNumberPvtEncrypt\n      stopType\n      companyName\n      memo\n      account {\n        accountId\n        accountNumberPvtEncrypt\n        accountNickname\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"9338860\",\n  \"type\": \"DEPOSITS\"\n   \n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Stop Checks - Filtered - Invalid accountNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Stop Checks result should not be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).to.not.be.an(\"array\");",
											"})",
											"",
											"pm.test(\"Stop Checks result should have the appropriate data structure\", () => {",
											"    pm.expect(pm.response.json().data.Customer).to.have.all.keys('stopChecks');",
											"})",
											"",
											"pm.test(\"Stop Checks result should have null\", () => {",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).to.eq(null);",
											"})",
											"",
											"pm.test(\"Stop Checks result should return valid error message\", () => {",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"No results found when filtering by account number:\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessTokenUrl",
											"value": "{{base_url}}access/token",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{client_key}}",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "access_token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($uid: String, $type: String, $accountNumber: String) {\n  Customer(uid: $uid, type: $type) {\n    stopChecks(accountNumber: $accountNumber) {\n      stopCheckPaymentId\n      createdDate\n      expireDate\n      amountPvtEncrypt\n      payeeName\n      reasonCode\n      checkNumberPvtEncrypt\n      beginCheckNumberPvtEncrypt\n      endCheckNumberPvtEncrypt\n      stopType\n      companyName\n      memo\n      account {\n        accountId\n        accountNumberPvtEncrypt\n        accountNickname\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"9338860\",\n  \"type\": \"DEPOSITS\",\n  \"accountNumber\": \"invalid\" \n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Time Slots",
					"item": [
						{
							"name": "Get Time Slots",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Time Slots: Status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Time Slots: Response time less than 6s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(6000);",
											"});",
											"",
											"pm.test(\"Get Time Slots: timeslots Array Exists\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data.Customer.getTimeSlots.timeslots).to.be.an('Array');",
											"});",
											"",
											"pm.test(\"Get Time Slots should contain required fields\", function() {",
											"        pm.response.json().data.Customer.getTimeSlots.timeslots.forEach(response => {",
											"            pm.expect(response).to.have.all.keys('territoryId','startTime', 'resources', 'endTime');  ",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"workTypeId\", \"contactId\",\"accountId\");",
											"});",
											"",
											"                ",
											"})",
											"      });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 00D3I0000004Yjv!AR0AQCe55WduHOUy1mDxZBPuZ3Es_BOks8fVDmJ_XzcSyk1sA84u6pLcoS_Ery0.vAjF7ZRwOebjOvxJtvOLsGvdjN8QYjq9",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "kzh9x7",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetTimeSlots($input: timeSlotsInput) {\n  Customer {\n    getTimeSlots(input: $input) {\n      workTypeId\n      contactId\n      accountId\n      timeslots {\n        territoryId\n        startTime\n        resources\n        endTime\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"workType\": \"Meeting with Customer\",\n    \"groupName\": \"Quick Chat (15 min)\",\n    \"startTime\": \"2022-08-04T00:00:00Z\",\n    \"endTime\": \"2022-08-04T23:59:00Z\",\n    \"resourceId\": \"0Hn3I0000004jNNSAY\",\n   \"guid\": \"887964971124225601\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "Get spending buckets.\n\n**Please pass accountId as encrypted or response will return 400**\n\nAPI Spec: [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407)"
							},
							"response": []
						},
						{
							"name": "Get Time Slots Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get Bucket Transactions: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Get Time SLots: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "12345",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetTimeSlots($input: timeSlotsInput) {\n  Customer {\n    getTimeSlots(input: $input) {\n      workTypeId\n      timeslots {\n        territoryId\n        startTime\n        resources\n        endTime\n      }\n      contactId\n      accountId\n    }\n  }\n}",
										"variables": "\n  \"input\": {\n    \"workType\": \"Meeting with Customer\",\n    \"groupName\": \"Quick Chat (15 min)\",\n    \"startTime\": \"2022-08-04T00:00:00Z\",\n    \"endTime\": \"2022-08-04T23:59:00Z\",\n    \"resourceId\": \"0Hn3I0000004jNNSAY\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "Get spending buckets.\n\n**Please pass accountId as encrypted or response will return 400**\n\nAPI Spec: [https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407](https://ally-innovation.apigee.com/organizations/ally-innovation/specs/folder/home/editor/430407)"
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Password Hint",
					"item": [
						{
							"name": "Update Password Hint - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Password Hint: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Password Hint: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer.updatePasswordHint).to.have.all.keys(\"passwordHintUpdated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: UpdatePasswordHint!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    updatePasswordHint(input: $input, cupid: $cupid) {\n      passwordHintUpdated\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": { \n   \"passwordHint\":\"test\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Password Hint - Missing Cupid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Password Hint: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Update Password Hint: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: UpdatePasswordHint!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    updatePasswordHint(input: $input, cupid: $cupid) {\n      passwordHintUpdated\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"input\": {\n    \"loginId\": \"guardians_demo03\",\n    \"passwordHint\": \"test\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Password Hint - Missing LoginID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Password Hint: Status code is 400\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update Password Hint: Response time is less than 5 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Update Password Hint: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"});",
											"",
											"pm.test(\"Update Password Hint: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`Please provide a login id and password hint to this request.`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: UpdatePasswordHint!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    updatePasswordHint(input: $input, cupid: $cupid) {\n      passwordHintUpdated\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"input\": {\n    \"passwordHint\": \"test\"\n  },\n  \"cupid\": \"52509609668888314918268939619495\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Password Hint - Missing Passoword Hint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Password Hint: Status code is 400\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Password Hint: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"});",
											"",
											"pm.test(\"Update Password Hint: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`user does not exist in ldap`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: UpdatePasswordHint!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    updatePasswordHint(input: $input, cupid: $cupid) {\n      passwordHintUpdated\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"input\": {\n    \"loginId\": \"guardians_demo03\"\n  },\n  \"cupid\": \"52509609668888314918268939619495\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Password Hint - Special Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Password Hint: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Password Hint: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer.updatePasswordHint).to.eql(null);",
											"});",
											"",
											"pm.test(\"Update Password Hint: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`Please provide a login id and password hint to this request.`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "wwQrWtW4z2AYdkA9TPlAVIGc27qL",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: UpdatePasswordHint!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    updatePasswordHint(input: $input, cupid: $cupid) {\n      passwordHintUpdated\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"\",\n  \"type\": \"\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": {\n    \"loginId\": \"guardians_demo09\",\n    \"passwordHint\": \"test\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Credential Blocks",
					"item": [
						{
							"name": "Update Credential Blocks - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Credential Blocks: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Credential Blocks: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer).to.have.all.keys(\"updateCredentialBlocks\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $input: CustomerCredentialBlocks!) {\n  Customer(uid: $uid, type: $type) {\n    updateCredentialBlocks(cupid: $cupid, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": {\n    \"onlineAccessStatus\": \"active\",\n    \"passwordStatus\": \"active\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credential Blocks - MIssing cupid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Credential Blocks: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Update Credential Blocks: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $input: CustomerCredentialBlocks!) {\n  Customer(uid: $uid, type: $type) {\n    updateCredentialBlocks(cupid: $cupid, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"input\": {\n    \"onlineAccessStatus\": \"active\",\n    \"passwordStatus\": \"active\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credential Blocks - Missing OnlineAccessStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Credential Blocks: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Update Credential Blocks: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $input: CustomerCredentialBlocks!) {\n  Customer(uid: $uid, type: $type) {\n    updateCredentialBlocks(cupid: $cupid, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": {\n    \"passwordStatus\": \"active\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credential Blocks -Missing passwordStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Credential Blocks: Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Update Credential Blocks: Response should return an error\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.all.keys(\"errors\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $input: CustomerCredentialBlocks!) {\n  Customer(uid: $uid, type: $type) {\n    updateCredentialBlocks(cupid: $cupid, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": {\n    \"onlineAccessStatus\": \"active\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credential Blocks - passwordStatus blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Credential Blocks: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Credential Blocks: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer).to.have.all.keys(\"updateCredentialBlocks\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $input: CustomerCredentialBlocks!) {\n  Customer(uid: $uid, type: $type) {\n    updateCredentialBlocks(cupid: $cupid, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"52509609668888314918268939619495\",\n  \"input\": {\n    \"onlineAccessStatus\": \"\",\n    \"passwordStatus\": \"\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credential Blocks - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Credential Blocks: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Credential Blocks: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer).to.have.all.keys(\"updateCredentialBlocks\");",
											"});",
											"",
											"pm.test(\"Update Credential Blocks: Response should return valid error message\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData).to.have.any.keys(\"errors\");",
											"    pm.expect(jsonData.errors[0].message).to.eql(`LDAP update failed`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $input: CustomerCredentialBlocks!) {\n  Customer(uid: $uid, type: $type) {\n    updateCredentialBlocks(cupid: $cupid, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"null\",\n  \"input\": {\n    \"onlineAccessStatus\": \"null\",\n    \"passwordStatus\": \"null\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Customer",
					"item": [
						{
							"name": "Update Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Customert: Status code 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Update Customert: Response time less than 5s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(6000);\r",
											"});\r",
											"\r",
											"pm.test(\"Update Customerts: Status code 200\", function () {\r",
											"    console.log('Status code: ', pm.response.code);\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "Value",
										"value": "294265300836794502",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($input: CustomerInput!) {\n  ModifyCustomer {\n    updateCustomer(input: $input) {\n      statusCode\n      status\n      noOfRecords\n      payloadType\n      payload {\n        type\n        value\n        createDate\n        updateDate\n      }\n      requestId\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"channel\": \"SALESFORCE\",\n    \"userPulseId\": \"rz28v6\",\n    \"suppressCustomerCommunication\": false,\n    \"requestPayload\": {\n      \"partyType\": \"Individual\",\n      \"individual\": {\n        \"birthDate\" : \"1949-12-20\",    \t\n    \"type\": \"GUEST\",\n  \"profileVerificationStatus\": \"VERIFIED\",\n   \"employment\": [\n          {\n            \"occupation\": \"Engineer\",\n            \"organization\": \"Strata Graph\"\n        \n          }\n        ],\n    \"nameList\": [\n        {\n            \"type\": \"LEGAL\",\n            \"firstName\": \"CosmicPenguins\",\n            \"lastName\": \"Ally\"\n\n        }\n    ],\n    \"phoneList\": [\n        {\n            \"type\": \"HOME_TELEPHONE\",\n            \"value\": \"8004561793\"\n        }\n    ],\n    \"addressList\": [\n        {\n            \"type\": \"PRIMARY_RESIDENCE\",\n            \"addressLineOne\": \"1100 Craigmeade Dr\",\n            \"city\": \"Morrisville\",\n            \"stateCode\": \"NC\",\n            \"countryCode\": \"US\"\n\n        }\n    ],\n\n         \"altIdList\": [\n          {\n            \"type\": \"ACM\",\n            \"value\": \"372864926285052502\",\n            \"dataProvider\": true\n          }\n        ]\n      }\n    }\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "This mutation will take in an **input** object and update one **OR** many fields on an individual customer.\n\nUpdate customer requires a very simple input object that can be expanded upon:\n\n``` json\n{\n    \"channel\": \"SALESFORCE\", // client channel\n    \"userPulseId\": \"rz28v6\", // user id\n    \"suppressCustomerCommunication\": false,\n    \"requestPayload\": {\n      \"partyType\": \"Individual\",\n      \"individual\": {    // the individual is where fields to be updated will live\n        \"altIdList\": [   // altIdList needs only one ID to identify a customer\n          {              // this is the customer to be updated\n            \"type\": \"ACM\",\n            \"value\": \"294265300836794502\",\n            \"dataProvider\": true\n          }\n        ]\n      }\n    }\n  }\n\n```"
							},
							"response": []
						},
						{
							"name": "Update Customer - CIT Copy 2",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "clientSecret",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{client_key}}",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{base_url}}access/token",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "access_token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "authorizationToken",
										"type": "text",
										"value": "allow",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"channel\": \"MOBILE\",\r\n    \"userPulseId\": \"agh76\",\r\n    \"suppressCustomerCommunication\": false,\r\n    \"requestPayload\": {\r\n        \"partyType\": \"Individual\",\r\n        \"party\": {\r\n            \"individual\": {\r\n                \"birthDate\": \"2012-10-10\",\r\n                \"type\": \"CUSTOMER\",\r\n                \"profileVerificationStatus\": \"VERIFIED\",\r\n                \"profileVerificationDate\": \"2022-06-01T19:11:02.734Z\",\r\n                \"allyRelationshipStartDate\": \"2018-07-04\",\r\n                \"employment\": [\r\n                    {\r\n                        \"occupation\": \"Accountant\",\r\n                        \"organization\": \"GMG\"\r\n                    }\r\n                ],\r\n                \"nameList\": [\r\n                    {\r\n                        \"type\": \"PREFERRED\",\r\n                        \"firstName\": \"USERNAME\",\r\n                        \"lastName\": \"USERLASTNAME\",\r\n                        \"middleName\": \"\",\r\n                        \"prefix\": \"MASTER\",\r\n                        \"otherPrefix\": \"\",\r\n                        \"suffix\": \"OTHER\",\r\n                        \"otherSuffix\": \"ML\",\r\n                        \"preferredName\": \"akjkjsd\",\r\n                        \"pronoun\": \"He/Him\"\r\n                    },\r\n                    {\r\n                        \"type\": \"LEGAL\",\r\n                        \"firstName\": \"TESTFIRSTNAME\",\r\n                        \"lastName\": \"TESTUSERLASTNAME\",\r\n                        \"middleName\": \"\",\r\n                        \"suffix\": \"OTHER\",\r\n                        \"otherSuffix\": \"ML\"\r\n                    }\r\n                ],\r\n                \"addressList\": [\r\n                    {\r\n                        \"type\": \"MAILING\",\r\n                        \"addressLineOne\": \"road\",\r\n                        \"addressLineTwo\": \"street\",\r\n                        \"addressLineThree\": \"5thstreet\",\r\n                        \"careOf\": \"Hunter\",\r\n                        \"city\": \"sdjf\",\r\n                        \"postalCode\": \"56011\",\r\n                        \"stateCode\": \"AN-IN\",\r\n                        \"countryCode\": \"IN\",\r\n                        \"residenceType\": \"TOWNHOUSE\"\r\n                    },\r\n                    {\r\n                        \"type\": \"PRIMARY_RESIDENCE\",\r\n                        \"addressLineOne\": \"New road\",\r\n                        \"addressLineTwo\": \"South Street\",\r\n                        \"addressLineThree\": \"Lane street\",\r\n                        \"careOf\": \"Hunter\",\r\n                        \"city\": \"sdjf\",\r\n                        \"postalCode\": \"56011\",\r\n                        \"stateCode\": \"VT\",\r\n                        \"countryCode\": \"US\",\r\n                        \"residenceType\": \"TOWNHOUSE\"\r\n                    }\r\n                ],\r\n                \"identifierList\": [\r\n                    {\r\n                        \"type\": \"SOCIAL_SECURITY_NUMBER\",\r\n                        \"idValue\": \"234-48-3453\",\r\n                        \"idStatus\": \"ACTIVE\",\r\n                        \"expiryDate\": \"2090-05-20\",\r\n                        \"deActivationDate\": \"2022-06-01T19:11:02.734Z\",\r\n                        \"effectiveStartDate\": \"2022-06-01T19:11:02.734Z\"\r\n                    }\r\n                ],\r\n                \"emailList\": [\r\n                    {\r\n                        \"type\": \"PERSONAL_EMAIL\",\r\n                        \"emailId\": \"testuser1email@gmail.com\"\r\n                    }\r\n                ],\r\n                \"phoneList\": [\r\n                    {\r\n                        \"type\": \"BUSINESS_TELEPHONE\",\r\n                        \"value\": \"3867675243\",\r\n                        \"extension\": \"4444\"\r\n                    },\r\n                    {\r\n                        \"type\": \"HOME_TELEPHONE\",\r\n                        \"value\": \"345436565656\"\r\n                    }\r\n                ],\r\n                \"altIdList\": [\r\n                    {\r\n                        \"type\": \"DEPOSITS\",\r\n                        \"value\": \"1\",\r\n                        \"dataProvider\": true,\r\n                        \"productRelationshipList\": [\r\n                            {\r\n                                \"relationshipName\": \"HOMELOANS_APPLICATION\",\r\n                                \"relationshipInd\": \"NO\",\r\n                                \"relationshipStatus\": \"ACTIVE\",\r\n                                \"statusDate\": \"2022-06-01T19:11:02.734Z\"\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"multiChannelCommunicationConsentList\": [\r\n                    {\r\n                        \"channelName\": \"ONLINE_BANKING\",\r\n                        \"channelType\": \"SECONDARY_RESIDENCE\",\r\n                        \"channelConsentVersion\": \"1.0.0\",\r\n                        \"deliveryMethod\": \"SMS\",\r\n                        \"channelConsent\": \"ACCEPTED\",\r\n                        \"startDate\": \"2022-06-01T19:11:02.734Z\",\r\n                        \"expiryDate\": \"2022-06-01T19:11:02.734Z\",\r\n                        \"communicationType\": \"Phone call\",\r\n                        \"communicationFrequency\": \"Three months once\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa.api.ally.com/customer/master-acm-entity-qa-r-cit/v6?options=partialOverride",
									"protocol": "https",
									"host": [
										"qa",
										"api",
										"ally",
										"com"
									],
									"path": [
										"customer",
										"master-acm-entity-qa-r-cit",
										"v6"
									],
									"query": [
										{
											"key": "options",
											"value": "partialOverride"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wealth Assets",
					"item": [
						{
							"name": "Wealth Assets - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Assets - Success; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Assets - Success; Test for proper data structure on results\", function() {",
											"    ",
											"    const { data } = pm.response.json();",
											"",
											"console.log(data);",
											"",
											"   pm.expect(data).to.have.any.keys([\"Accounts\"]);",
											"    pm.expect(data.Accounts.Wealth).to.have.any.keys([\"wealthAssets\"]);",
											"",
											"   ",
											"     data.Accounts.Wealth.wealthAssets.forEach(asset => {",
											"        pm.expect(asset).to.have.all.keys([\"name\",",
											"                    \"accountNumber\",",
											"                    \"ticker\",",
											"                    \"currentShares\",",
											"                    \"currentValue\",",
											"                    \"currentPrice\",",
											"                    \"isManaged\",",
											"                    \"assetClass\",",
											"                    \"productCategory\",",
											"                    \"productCategoryAbbreviation\",",
											"                    \"isCustodialCash\",",
											"                    \"productId\",",
											"                    \"status\",",
											"                    \"isStrategyOverride\",",
											"                    \"createdBy\",",
											"                    \"createdDate\",",
											"                    \"editedBy\",",
											"                    \"editedDate\",",
											"                    \"accountId\",",
											"                    \"registrationId\",",
											"                    \"clientId\",",
											"                    \"isActive\",",
											"                    \"downloadSymbol\",",
											"                    \"accountType\",",
											"                    \"fundFamily\",",
											"                    \"custodian\",",
											"                    \"registrationName\",",
											"                    \"managementStyle\",",
											"                    \"productType\",",
											"                    \"productSubType\",",
											"                    \"isGlobalExcluded\",",
											"                    \"isFeeExcluded\",",
											"                    \"excludeAmount\",",
											"                    \"isRebalance\",",
											"                    \"isAdvisorOnly\",",
											"                    \"isAdvReportable\",",
											"                    \"is13FReportable\",",
											"                    \"assetPercentOfAccount\",",
											"                    \"householdName\",",
											"                    \"riskCategory\",",
											"                    \"modelName\",",
											"                    \"id\"]);",
											"})",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query WealthAssets($orionAccountId: String!) {\n  Accounts {\n    Wealth {\n      wealthAssets(orionAccountId: $orionAccountId) {\n        name\n        accountNumber\n        ticker\n        currentShares\n        currentValue\n        currentPrice\n        isManaged\n        assetClass\n        productCategory\n        productCategoryAbbreviation\n        isCustodialCash\n        productId\n        status\n        isStrategyOverride\n        createdBy\n        createdDate\n        editedBy\n        editedDate\n        accountId\n        registrationId\n        clientId\n        isActive\n        downloadSymbol\n        accountType\n        fundFamily\n        custodian\n        registrationName\n        managementStyle\n        productType\n        productSubType\n        isGlobalExcluded\n        isFeeExcluded\n        excludeAmount\n        isRebalance\n        isAdvisorOnly\n        isAdvReportable\n        is13FReportable\n        assetPercentOfAccount\n        householdName\n        riskCategory\n        modelName\n        id\n      }\n    }\n  }\n}",
										"variables": "{\n  \"orionAccountId\": \"2064\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Assets - Cif is Empty String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Assets - Cif is empty string; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Assets - Cif is empty string; Test for proper data structure on results and error message\", function() {",
											"    ",
											"    const { errors } = pm.response.json();",
											"",
											"",
											"    pm.expect(errors).to.be.an(\"array\");",
											"    ",
											"      errors.forEach(error => {",
											"        pm.expect(error).to.have.all.keys([\"message\", \"locations\", \"path\", \"extensions\"]);",
											"        pm.expect(error.message).to.eql(\"Please provide a orion account id for this request.\");",
											"        pm.expect(error.extensions.code).to.eql(\"QUERY_ERROR\");",
											"})",
											"",
											"   ",
											"   ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($orionAccountId: String!) {\n  Accounts {\n    Wealth {\n      wealthAssets(orionAccountId: $orionAccountId) {\n        name\n        accountNumber\n        ticker\n        currentShares\n        currentValue\n        currentPrice\n        isManaged\n        assetClass\n        productCategory\n        productCategoryAbbreviation\n        isCustodialCash\n        productId\n        status\n        isStrategyOverride\n        createdBy\n        createdDate\n        editedBy\n        editedDate\n        accountId\n        registrationId\n        clientId\n        isActive\n        downloadSymbol\n        accountType\n        fundFamily\n        custodian\n        registrationName\n        managementStyle\n        productType\n        productSubType\n        isGlobalExcluded\n        isFeeExcluded\n        excludeAmount\n        isRebalance\n        isAdvisorOnly\n        isAdvReportable\n        is13FReportable\n        assetPercentOfAccount\n        householdName\n        riskCategory\n        modelName\n        id\n      }\n    }\n  }\n}",
										"variables": "{\n  \"orionAccountId\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Assets - Cif is Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Assets - Cif is invalid; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Assets - Cif is invalid; Test for proper data structure on results and error message\", function() {",
											"    ",
											"    const { errors } = pm.response.json();",
											"",
											"",
											"    pm.expect(errors).to.be.an(\"array\");",
											"    ",
											"      errors.forEach(error => {",
											"        pm.expect(error).to.have.all.keys([\"message\", \"locations\", \"path\", \"extensions\"]);",
											"        pm.expect(error.message).to.eql(\"No Assets found with that CIF and/or Account ID\");",
											"        pm.expect(error.extensions.code).to.eql(\"NOT FOUND\");",
											"})",
											"",
											"   ",
											"   ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($orionAccountId: String!) {\n  Accounts {\n    Wealth {\n      wealthAssets(orionAccountId: $orionAccountId) {\n        name\n        accountNumber\n        ticker\n        currentShares\n        currentValue\n        currentPrice\n        isManaged\n        assetClass\n        productCategory\n        productCategoryAbbreviation\n        isCustodialCash\n        productId\n        status\n        isStrategyOverride\n        createdBy\n        createdDate\n        editedBy\n        editedDate\n        accountId\n        registrationId\n        clientId\n        isActive\n        downloadSymbol\n        accountType\n        fundFamily\n        custodian\n        registrationName\n        managementStyle\n        productType\n        productSubType\n        isGlobalExcluded\n        isFeeExcluded\n        excludeAmount\n        isRebalance\n        isAdvisorOnly\n        isAdvReportable\n        is13FReportable\n        assetPercentOfAccount\n        householdName\n        riskCategory\n        modelName\n        id\n      }\n    }\n  }\n}",
										"variables": "{\n  \"orionAccountId\": \"lalalalala\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Assets - Cif is Missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Assets - Cif is empty string; Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Assets - Cif is empty string; Test for proper data structure on results and error message\", function() {",
											"    ",
											"    const { errors } = pm.response.json();",
											"",
											"",
											"    pm.expect(errors).to.be.an(\"array\");",
											"    ",
											"      errors.forEach(error => {",
											"        pm.expect(error.message).to.eql(\"Variable \\\"$orionAccountId\\\" of required type \\\"String!\\\" was not provided.\");",
											"        pm.expect(error.extensions.code).to.eql(\"BAD_USER_INPUT\");",
											"})",
											"",
											"   ",
											"   ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($orionAccountId: String!) {\n  Accounts {\n    Wealth {\n      wealthAssets(orionAccountId: $orionAccountId) {\n        name\n        accountNumber\n        ticker\n        currentShares\n        currentValue\n        currentPrice\n        isManaged\n        assetClass\n        productCategory\n        productCategoryAbbreviation\n        isCustodialCash\n        productId\n        status\n        isStrategyOverride\n        createdBy\n        createdDate\n        editedBy\n        editedDate\n        accountId\n        registrationId\n        clientId\n        isActive\n        downloadSymbol\n        accountType\n        fundFamily\n        custodian\n        registrationName\n        managementStyle\n        productType\n        productSubType\n        isGlobalExcluded\n        isFeeExcluded\n        excludeAmount\n        isRebalance\n        isAdvisorOnly\n        isAdvReportable\n        is13FReportable\n        assetPercentOfAccount\n        householdName\n        riskCategory\n        modelName\n        id\n      }\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wealth Account Details",
					"item": [
						{
							"name": "Wealth Account Details - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Account Details - Success; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Account Details - Success; Test for proper data structure on results\", function() {",
											"    ",
											"    const { data } = pm.response.json();",
											"",
											"",
											"    pm.expect(data).to.have.all.keys([\"Accounts\"]);",
											"    pm.expect(data.Accounts.Wealth).to.have.all.keys([\"wealthAccountDetails\"]);",
											"",
											"   ",
											" ",
											"        pm.expect(data.Accounts.Wealth.wealthAccountDetails).to.have.all.keys([\"isActive\",",
											"                \"custodian\",",
											"                \"custodianCode\",",
											"                \"managementStyle\",",
											"                \"currentValue\",",
											"                \"fundFamily\",",
											"                \"accountStartValue\",",
											"                \"createdDate\",",
											"                \"isManaged\",",
											"                \"isSweepAccount\",",
											"                \"isSleeveAccount\",",
											"                \"isAdvReportable\",",
											"                \"is13FReportable\",",
											"                \"isAuaReportable\",",
											"                \"advCustodyTypeId\",",
											"                \"custodialRepCode\",",
											"                \"brokerDealer\",",
											"                \"importKey\",",
											"                \"outsideId\",",
											"                \"managementStyleId\",",
											"                \"fundFamilyId\",",
											"                \"registrationId\",",
											"                \"clientId\",",
											"                \"custodianId\",",
											"                \"shareClass\",",
											"                \"shareClassId\",",
											"                \"isOriginalSMCAccount\",",
											"                \"isTradingBlocked\",",
											"                \"createdBy\",",
											"                \"accountStartDate\",",
											"                \"editedBy\",",
											"                \"editedDate\",",
											"                \"accountStatusId\",",
											"                \"accountStatus\",",
											"                \"accountStatusDescription\",",
											"                \"feeScheduleId\",",
											"                \"feeSchedule\",",
											"                \"masterPayoutScheduleId\",",
											"                \"masterPayoutSchedule\",",
											"                \"billFrequency\",",
											"                \"representative\",",
											"                \"representativeNumber\",",
											"                \"household\",",
											"                \"riskBudget\",",
											"                \"modelAggId\",",
											"                \"billPayMethod\",",
											"                \"acceptsList\",",
											"                \"sweepAssetId\",",
											"                \"includeInAggregate\",",
											"                \"isDiscretionary\",",
											"                \"cashBalance\",",
											"                \"isQualified\",",
											"                \"isWrapManaged\",",
											"                \"isWrapSponsored\",",
											"                \"lastName\",",
											"                \"isPositionOnlyRecon\",",
											"                \"eclipseFirmId\",",
											"                \"isBundled\",",
											"                \"isExcludedFromFirmAssets\",",
											"                \"annuityIncomeValue\",",
											"                \"tieredFeePriority\",",
											"                \"isOps\",",
											"                \"lastPositionDate\",",
											"                \"inBalance\",",
											"                \"id\",",
											"                \"name\",",
											"                \"number\",",
											"                \"modelName\",",
											"                \"accountType\",",
											"                \"udf7HISTORICA\"",
											"            ]);",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String!) {\n  Accounts {\n    Wealth {\n      wealthAccountDetails(accountNumber: $accountNumber) {\n        isActive\n        custodian\n        custodianCode\n        managementStyle\n        currentValue\n        fundFamily\n        accountStartValue\n        createdDate\n        isManaged\n        isSweepAccount\n        isSleeveAccount\n        isAdvReportable\n        is13FReportable\n        isAuaReportable\n        advCustodyTypeId\n        custodialRepCode\n        brokerDealer\n        importKey\n        outsideId\n        managementStyleId\n        fundFamilyId\n        registrationId\n        clientId\n        custodianId\n        shareClass\n        shareClassId\n        isOriginalSMCAccount\n        isTradingBlocked\n        createdBy\n        accountStartDate\n        editedBy\n        editedDate\n        accountStatusId\n        accountStatus\n        accountStatusDescription\n        feeScheduleId\n        feeSchedule\n        masterPayoutScheduleId\n        masterPayoutSchedule\n        billFrequency\n        representative\n        representativeNumber\n        household\n        riskBudget\n        modelAggId\n        billPayMethod\n        acceptsList\n        sweepAssetId\n        includeInAggregate\n        isDiscretionary\n        cashBalance\n        isQualified\n        isWrapManaged\n        isWrapSponsored\n        lastName\n        isPositionOnlyRecon\n        eclipseFirmId\n        isBundled\n        isExcludedFromFirmAssets\n        annuityIncomeValue\n        tieredFeePriority\n        isOps\n        lastPositionDate\n        inBalance\n        id\n        name\n        number\n        modelName\n        accountType\n        udf7HISTORICA\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountNumber\": \"2FG05436\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Account Details - Success Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Account Details - Success; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Account Details - Success; Test for proper data structure on results\", function() {",
											"    ",
											"    const { data } = pm.response.json();",
											"",
											"",
											"    pm.expect(data).to.have.all.keys([\"Accounts\"]);",
											"    pm.expect(data.Accounts.Wealth).to.have.all.keys([\"wealthAccountDetails\"]);",
											"",
											"   ",
											" ",
											"        pm.expect(data.Accounts.Wealth.wealthAccountDetails).to.have.all.keys([\"isActive\",",
											"                \"custodian\",",
											"                \"custodianCode\",",
											"                \"managementStyle\",",
											"                \"currentValue\",",
											"                \"fundFamily\",",
											"                \"accountStartValue\",",
											"                \"createdDate\",",
											"                \"isManaged\",",
											"                \"isSweepAccount\",",
											"                \"isSleeveAccount\",",
											"                \"isAdvReportable\",",
											"                \"is13FReportable\",",
											"                \"isAuaReportable\",",
											"                \"advCustodyTypeId\",",
											"                \"custodialRepCode\",",
											"                \"brokerDealer\",",
											"                \"importKey\",",
											"                \"outsideId\",",
											"                \"managementStyleId\",",
											"                \"fundFamilyId\",",
											"                \"registrationId\",",
											"                \"clientId\",",
											"                \"custodianId\",",
											"                \"shareClass\",",
											"                \"shareClassId\",",
											"                \"isOriginalSMCAccount\",",
											"                \"isTradingBlocked\",",
											"                \"createdBy\",",
											"                \"accountStartDate\",",
											"                \"editedBy\",",
											"                \"editedDate\",",
											"                \"accountStatusId\",",
											"                \"accountStatus\",",
											"                \"accountStatusDescription\",",
											"                \"feeScheduleId\",",
											"                \"feeSchedule\",",
											"                \"masterPayoutScheduleId\",",
											"                \"masterPayoutSchedule\",",
											"                \"billFrequency\",",
											"                \"representative\",",
											"                \"representativeNumber\",",
											"                \"household\",",
											"                \"riskBudget\",",
											"                \"modelAggId\",",
											"                \"billPayMethod\",",
											"                \"acceptsList\",",
											"                \"sweepAssetId\",",
											"                \"includeInAggregate\",",
											"                \"isDiscretionary\",",
											"                \"cashBalance\",",
											"                \"isQualified\",",
											"                \"isWrapManaged\",",
											"                \"isWrapSponsored\",",
											"                \"lastName\",",
											"                \"isPositionOnlyRecon\",",
											"                \"eclipseFirmId\",",
											"                \"isBundled\",",
											"                \"isExcludedFromFirmAssets\",",
											"                \"annuityIncomeValue\",",
											"                \"tieredFeePriority\",",
											"                \"isOps\",",
											"                \"lastPositionDate\",",
											"                \"inBalance\",",
											"                \"id\",",
											"                \"name\",",
											"                \"number\",",
											"                \"modelName\",",
											"                \"accountType\",",
											"                \"udf7HISTORICA\"",
											"            ]);",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String!) {\n  Accounts {\n    Wealth {\n      wealthAccountDetails(accountNumber: $accountNumber) {\n        isActive\n        custodian\n        custodianCode\n        managementStyle\n        currentValue\n        fundFamily\n        accountStartValue\n        createdDate\n        isManaged\n        isSweepAccount\n        isSleeveAccount\n        isAdvReportable\n        is13FReportable\n        isAuaReportable\n        advCustodyTypeId\n        custodialRepCode\n        brokerDealer\n        importKey\n        outsideId\n        managementStyleId\n        fundFamilyId\n        registrationId\n        clientId\n        custodianId\n        shareClass\n        shareClassId\n        isOriginalSMCAccount\n        isTradingBlocked\n        createdBy\n        accountStartDate\n        editedBy\n        editedDate\n        accountStatusId\n        accountStatus\n        accountStatusDescription\n        feeScheduleId\n        feeSchedule\n        masterPayoutScheduleId\n        masterPayoutSchedule\n        billFrequency\n        representative\n        representativeNumber\n        household\n        riskBudget\n        modelAggId\n        billPayMethod\n        acceptsList\n        sweepAssetId\n        includeInAggregate\n        isDiscretionary\n        cashBalance\n        isQualified\n        isWrapManaged\n        isWrapSponsored\n        lastName\n        isPositionOnlyRecon\n        eclipseFirmId\n        isBundled\n        isExcludedFromFirmAssets\n        annuityIncomeValue\n        tieredFeePriority\n        isOps\n        lastPositionDate\n        inBalance\n        id\n        name\n        number\n        modelName\n        accountType\n        udf7HISTORICA\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountNumber\": \"2FG05880\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Account Details - Cif is empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Account Details - Cif is empty string; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Account Details - Cif is empty string; Test for proper data structure on results and error message\", function() {",
											"    ",
											"    const { errors } = pm.response.json();",
											"",
											"",
											"    pm.expect(errors).to.be.an(\"array\");",
											"    ",
											"      errors.forEach(error => {",
											"        pm.expect(error).to.have.all.keys([\"message\", \"locations\", \"path\", \"extensions\"]);",
											"        pm.expect(error.message).to.eql(\"Please provide a cif for this request.\");",
											"        pm.expect(error.extensions.code).to.eql(\"QUERY_ERROR\");",
											"})",
											"",
											"   ",
											"   ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String!) {\n  Accounts {\n    Wealth {\n      wealthAccountDetails(accountNumber: $accountNumber) {\n        isActive\n        custodian\n        custodianCode\n        managementStyle\n        currentValue\n        fundFamily\n        accountStartValue\n        createdDate\n        isManaged\n        isSweepAccount\n        isSleeveAccount\n        isAdvReportable\n        is13FReportable\n        isAuaReportable\n        advCustodyTypeId\n        custodialRepCode\n        brokerDealer\n        importKey\n        outsideId\n        managementStyleId\n        fundFamilyId\n        registrationId\n        clientId\n        custodianId\n        shareClass\n        shareClassId\n        isOriginalSMCAccount\n        isTradingBlocked\n        createdBy\n        accountStartDate\n        editedBy\n        editedDate\n        accountStatusId\n        accountStatus\n        accountStatusDescription\n        feeScheduleId\n        feeSchedule\n        masterPayoutScheduleId\n        masterPayoutSchedule\n        billFrequency\n        representative\n        representativeNumber\n        household\n        riskBudget\n        modelAggId\n        billPayMethod\n        acceptsList\n        sweepAssetId\n        includeInAggregate\n        isDiscretionary\n        cashBalance\n        isQualified\n        isWrapManaged\n        isWrapSponsored\n        lastName\n        isPositionOnlyRecon\n        eclipseFirmId\n        isBundled\n        isExcludedFromFirmAssets\n        annuityIncomeValue\n        tieredFeePriority\n        isOps\n        lastPositionDate\n        inBalance\n        id\n        name\n        number\n        modelName\n        accountType\n        udf7HISTORICA\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountNumber\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Account Details - Cif is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Account Details - Cif is invalid; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Account Details - Cif is invalid; Test for proper data structure on results\", function() {",
											"    ",
											"        const { data } = pm.response.json();",
											"",
											"",
											"    pm.expect(data).to.have.all.keys([\"Accounts\"]);",
											"    pm.expect(data.Accounts.Wealth).to.have.all.keys([\"wealthAccountDetails\"]);",
											"",
											"     pm.expect(data.Accounts.Wealth.wealthAccountDetails).to.eql(null)",
											"",
											"   ",
											"   ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String!) {\n  Accounts {\n    Wealth {\n      wealthAccountDetails(accountNumber: $accountNumber) {\n        isActive\n        custodian\n        custodianCode\n        managementStyle\n        currentValue\n        fundFamily\n        accountStartValue\n        createdDate\n        isManaged\n        isSweepAccount\n        isSleeveAccount\n        isAdvReportable\n        is13FReportable\n        isAuaReportable\n        advCustodyTypeId\n        custodialRepCode\n        brokerDealer\n        importKey\n        outsideId\n        managementStyleId\n        fundFamilyId\n        registrationId\n        clientId\n        custodianId\n        shareClass\n        shareClassId\n        isOriginalSMCAccount\n        isTradingBlocked\n        createdBy\n        accountStartDate\n        editedBy\n        editedDate\n        accountStatusId\n        accountStatus\n        accountStatusDescription\n        feeScheduleId\n        feeSchedule\n        masterPayoutScheduleId\n        masterPayoutSchedule\n        billFrequency\n        representative\n        representativeNumber\n        household\n        riskBudget\n        modelAggId\n        billPayMethod\n        acceptsList\n        sweepAssetId\n        includeInAggregate\n        isDiscretionary\n        cashBalance\n        isQualified\n        isWrapManaged\n        isWrapSponsored\n        lastName\n        isPositionOnlyRecon\n        eclipseFirmId\n        isBundled\n        isExcludedFromFirmAssets\n        annuityIncomeValue\n        tieredFeePriority\n        isOps\n        lastPositionDate\n        inBalance\n        id\n        name\n        number\n        modelName\n        accountType\n        udf7HISTORICA\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountNumber\": \"lalalala\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Account Details - AccountNumber is Missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Account Details - Cif is empty string; Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Account Details - Cif is empty string; Test for proper data structure on results and error message\", function() {",
											"    ",
											"    const { errors } = pm.response.json();",
											"",
											"",
											"    pm.expect(errors).to.be.an(\"array\");",
											"    ",
											"      errors.forEach(error => {",
											"        pm.expect(error.message).to.eql(\"Variable \\\"$accountNumber\\\" of required type \\\"String!\\\" was not provided.\");",
											"        pm.expect(error.extensions.code).to.eql(\"BAD_USER_INPUT\");",
											"})",
											"",
											"   ",
											"   ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String!) {\n  Accounts {\n    Wealth {\n      wealthAccountDetails(accountNumber: $accountNumber) {\n        isActive\n        custodian\n        custodianCode\n        managementStyle\n        currentValue\n        fundFamily\n        accountStartValue\n        createdDate\n        isManaged\n        isSweepAccount\n        isSleeveAccount\n        isAdvReportable\n        is13FReportable\n        isAuaReportable\n        advCustodyTypeId\n        custodialRepCode\n        brokerDealer\n        importKey\n        outsideId\n        managementStyleId\n        fundFamilyId\n        registrationId\n        clientId\n        custodianId\n        shareClass\n        shareClassId\n        isOriginalSMCAccount\n        isTradingBlocked\n        createdBy\n        accountStartDate\n        editedBy\n        editedDate\n        accountStatusId\n        accountStatus\n        accountStatusDescription\n        feeScheduleId\n        feeSchedule\n        masterPayoutScheduleId\n        masterPayoutSchedule\n        billFrequency\n        representative\n        representativeNumber\n        household\n        riskBudget\n        modelAggId\n        billPayMethod\n        acceptsList\n        sweepAssetId\n        includeInAggregate\n        isDiscretionary\n        cashBalance\n        isQualified\n        isWrapManaged\n        isWrapSponsored\n        lastName\n        isPositionOnlyRecon\n        eclipseFirmId\n        isBundled\n        isExcludedFromFirmAssets\n        annuityIncomeValue\n        tieredFeePriority\n        isOps\n        lastPositionDate\n        inBalance\n        id\n        name\n        number\n        modelName\n        accountType\n        udf7HISTORICA\n      }\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wealth Household Performance",
					"item": [
						{
							"name": "Household Performance Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Performance - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Performance - Response time is less than 30 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(30000);",
											"})",
											"",
											"pm.test(\"Household Performance - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { wealthPerformance }}}} = pm.response.json();",
											"",
											"    pm.expect(wealthPerformance).to.be.length(4);",
											"    ",
											"    wealthPerformance.forEach(wealth => {",
											"        pm.expect(wealth).to.have.any.keys([",
											"            'label',",
											"            'value'",
											"        ])",
											"        pm.expect(wealth.label).to.be.a(\"string\")",
											"        pm.expect(wealth.value).to.be.a(\"string\")",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String!) {\n  Accounts {\n    Wealth {\n      wealthPerformance(clientId: $clientId) {\n        label\n        value\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Household Performance Missing UID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Performance - Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Returns error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"Variable \\\"$clientId\\\" of required type \\\"String!\\\" was not provided.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String!) {\n  Accounts {\n    Wealth {\n      wealthPerformance(clientId: $clientId) {\n        label\n        value\n      }\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "E2E SF STRATA Integration Tests",
			"item": [
				{
					"name": "GalcticGoats",
					"item": [
						{
							"name": "TC_OC-16411 : Update Restriction - Blocked to Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateRestriction.restrictionUpdated).to.eql(true);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const getUserBeforeUpdate = {",
											"  url: 'https://secure-qa1.ally.com/acs/v1/strata-graph/',",
											"  method: 'POST',",
											"  header: {",
											"   'Content-Type': 'application/json',",
											"   'Authorization': \"Bearer \" + pm.environment.get('token')",
											"   },",
											"  body: JSON.stringify({",
											"  \"query\": \"mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {  Customer(uid: $uid, type: $type) {    updateRestriction(input: $input) {restrictionUpdated }}}\",",
											"  \"operationName\": \"Mutation\",",
											"  \"variables\": {\"uid\":\"10197272\",\"type\":\"DEPOSITS\",\"input\":{\"UserOnlineStatus\":\"Blocked\",\"BlockReason\":\"BankRequest\"}}",
											"})",
											"};",
											"",
											" ",
											" pm.sendRequest(getUserBeforeUpdate, function(err, response) {",
											"    pm.expect(response.code).to.eql(200);   ",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateRestriction) {\n  Customer(uid: $uid, type: $type) {\n    updateRestriction(input: $input) {\n        restrictionUpdated\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"10197272\",\n  \"type\": \"DEPOSITS\",\n  \"input\": {\n    \"UserOnlineStatus\": \"Active\",\n    \"BlockReason\": \"BankRequest\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.data.Customer.getRestDisc.restrictions[0]).to.have(\"code\");",
											"",
											"    if(jsonData.data.Customer.getRestDisc.restrictions.length > 0){",
											"        for(var i = 0; i < jsonData.data.Customer.getRestDisc.restrictions.length; i++){",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].code).to.be.a('string')",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].description).to.be.a('string')",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: GetRestDisclosures) {\n  Customer(uid: $uid, type: $type) {\n    getRestDisc(input: $input) {\n      restrictions {\n        code\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"598865539572757302\",\n  \"type\": \"GUID\",\n  \"input\": {\n    \"searchBy\": \"GUID\",\n    \"uid\": \"598865539572757302\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_OC-16017 Update Disclosure - eSign ACCEPTED to REJECTED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Update Disclosure: value equals true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.updateDisclosure).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const getUserBeforeUpdate = {",
											"  url: 'https://secure-qa1.ally.com/acs/v1/strata-graph/',",
											"  method: 'POST',",
											"  header: {",
											"   'Content-Type': 'application/json',",
											"   'Authorization': \"Bearer \" + pm.environment.get('token')",
											"   },",
											"  body: JSON.stringify({",
											"  \"query\": \"mutation Mutation($uid: String!, $type: String!, $input: UpdateDisclosure) {  Customer(uid: $uid, type: $type) {    updateDisclosure(input: $input) }}\",",
											"  \"operationName\": \"Mutation\",",
											"  \"variables\": {",
											"    \"uid\": \"10176586\",",
											"    \"type\": \"DEPOSITS\",",
											"    \"input\": {",
											"        \"referenceId\": \"RefNo_5001\",",
											"        \"senderName\": \"DAO\",",
											"        \"disclosures\": [{",
											"            \"customerIdentifier\": \"10176586\",",
											"            \"disclosureStatus\": \"ACCEPTED\",",
											"            \"disclosureDescription\": \"eSign\",",
											"            \"disclosureType\": \"ESIGN\",",
											"            \"disclosureVersion\": \"1.2\",",
											"            \"isAcceptanceRequired\": false",
											"        }]",
											"    }",
											"}",
											"})",
											"};",
											"",
											"/*",
											"mutation Mutation($uid: String!, $type: String!, $input: UpdateDisclosure) {",
											"  Customer(uid: $uid, type: $type) {",
											"    updateDisclosure(input: $input)",
											"  }",
											"}",
											"*/",
											" ",
											" pm.sendRequest(getUserBeforeUpdate, function(err, response) {",
											"    pm.expect(response.code).to.eql(200);   ",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: UpdateDisclosure) {\n  Customer(uid: $uid, type: $type) {\n    updateDisclosure(input: $input)\n  }\n}",
										"variables": "{\n    \"uid\": \"10176586\",\n    \"type\": \"DEPOSITS\",\n    \"input\": {\n        \"referenceId\": \"RefNo_5001\",\n        \"senderName\": \"DAO\",\n        \"disclosures\": [{\n            \"customerIdentifier\": \"10176586\",\n            \"disclosureStatus\": \"REJECTED\",\n            \"disclosureDescription\": \"eSign\",\n            \"disclosureType\": \"ESIGN\",\n            \"disclosureVersion\": \"1.2\",\n            \"isAcceptanceRequired\": false\n        }]\n    }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Disclosure for TC_OC-16017",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Response time",
											"pm.test(\"Update Restriction: Response time is less than 3s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											"// Status code 200",
											"pm.test(\"Update Restriction: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Content type is present",
											"pm.test(\"Update Restriction: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"// Update is successful",
											"pm.test(\"Update Restriction: value is equal to 'true'\", function () {",
											"    var jsonData = pm.response.json();",
											"   // pm.expect(jsonData.data.Customer.getRestDisc.restrictions[0]).to.have(\"code\");",
											"",
											"    if(jsonData.data.Customer.getRestDisc.restrictions.length > 0){",
											"        for(var i = 0; i < jsonData.data.Customer.getRestDisc.restrictions.length; i++){",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].code).to.be.a('string')",
											"            pm.expect(jsonData.data.Customer.getRestDisc.restrictions[i].description).to.be.a('string')",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "abc123",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $input: GetRestDisclosures) {\n  Customer(uid: $uid, type: $type) {\n    getRestDisc(input: $input) {\n      restrictions {\n        code\n        description\n      }\n      consents {\n        type\n        version\n        status\n        date\n      }\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"727765111078867902\",\n  \"type\": \"GUID\",\n  \"input\": {\n    \"searchBy\": \"GUID\",\n    \"uid\": \"727765111078867902\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Formula1",
					"item": [
						{
							"name": "Customers Search - cif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"AllyZID\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "AllyZID",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cif: String) {\n  customers(cif: $cif) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"10114014\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Last Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: zid is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(1)",
											"});",
											"",
											"pm.test(\"Customers Search: Current Page is a string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.currentPage).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($lastName: String) {\n  customers(lastName: $lastName) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"lastName\": \"Cart\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search Last Name, First Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: zid is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(1)",
											"});",
											"",
											"pm.test(\"Customers Search: Current Page is a string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.currentPage).to.be.a('string');",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($firstName: String, $lastName: String) {\n  customers(firstName: $firstName, lastName: $lastName) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n \"firstName\":\"John\",\n  \"lastName\": \"Cart\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search - Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"AllyZID\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "AllyZID",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($phone: String) {\n  customers(phone: $phone) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"phone\": \"704-888-2987\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search - email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"AllyZID\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "AllyZID",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($email: String) {\n  customers(email: $email) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"email\": \"abc@ally.com\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customers Search - Account Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customers Search: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Customers Search: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Customers Search: AllyZID is present in request\", function () {",
											"    pm.request.to.have.header(\"zid\");",
											"});",
											"",
											"pm.test(\"Customers Search: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Customers Search: Customers not null\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers).to.be.not.eq(null)",
											"});",
											"",
											"pm.test(\"Customers Search: Total greater than 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.total).to.be.greaterThan(0)",
											"});",
											"",
											"pm.test(\"Customers Search: Results is a Array\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.customers.results).to.be.a('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									},
									{
										"key": "ApplicationId",
										"value": "ALLYUSBOLB",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String, $lob: String) {\n  customers(accountNumber: $accountNumber, lob: $lob) {\n    total\n    currentPage\n    nextPage\n    results {\n      id\n      sinceDate\n      dob\n      deceasedDate\n      occupation\n      employer\n      name {\n        first\n        last\n      }\n      phones {\n        type\n        value\n        extension\n        endDate\n      }\n      emails {\n        type\n        value\n        endDate\n      }\n      addresses {\n        type\n        line1\n        line2\n        line3\n        city\n        state\n        country\n        careOf\n        endDate\n        lastUpdatedAt\n      }\n      profileVerification {\n        version\n        annualStatus\n        annualBypass\n        finalAnnualBypassDate\n      }\n      lobRelationships {\n        lob\n        id\n        status\n        statusDate\n      }\n      identifications {\n        type\n        number\n        status\n        expiryDate\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountNumber\": \"1076364205\",\n  \"lob\": \"DEPOSIT\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Restrictions - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"accountRestrictions result should be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Accounts.accountRestrictions).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"accountRestrictions result should have the appropriate data structure\", () => {",
											"    pm.response.json().data.Accounts.accountRestrictions.forEach(accountRestriction => {",
											"        pm.expect(accountRestriction).to.have.all.keys('description', 'code', 'memo', 'accountNumber', 'expirationDate', 'startDate');",
											"",
											"        pm.expect(accountRestriction.code).to.be.not.eq(null);",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountRestrictions(cif: $cif, accountId: $accountId) {\n      description\n      code\n      memo\n      accountNumber\n      expirationDate\n      startDate\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9555079\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ4wzo9DwYwQHZ_uXPx3hCixc6dco3OIr2-1uKWY4yFBE-2XYvyaSvcKuAKTOE0IoQw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Primary Authenticators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Primary Auth: Response time is less than 10s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Primary Auth: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Primary Auth: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Primary Auth: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Primary Auth: validate firstName\", function () {  ",
											"pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"firstNamePvtEncrypt\", \"Net\");",
											"});",
											"",
											"//BUG: https://jira.int.ally.com/browse/OC-16089",
											"pm.test(\"Primary Auth: validate lastName\", function () {",
											"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"lastName\", \"Return\");",
											"    pm.expect(jsonData.data.Customer.primaryAuthenticators.lastName).contains(\"Return\");",
											"",
											"});",
											"//Test Update: Display last 4 only https://jira.int.ally.com/browse/OC-16095",
											"pm.test(\"Primary Auth: validate SSN\", function () {",
											"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"ssnPvtblock\", \"XXX-XX-3254\");",
											"});",
											"pm.test(\"Primary Auth: validate DOB\", function () {",
											"    pm.expect(jsonData.data.Customer.primaryAuthenticators).to.have.property(\"birthDatePvtEncrypt\",\"01/01/1980\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "xz5wcm",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "secure-qa2",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $input: PrimaryAuthenticator) {\n  Customer(uid: $uid, type: $type) {\n    primaryAuthenticators(input: $input) {\n      firstNamePvtEncrypt\n      lastName\n      ssnPvtblock\n      birthDatePvtEncrypt\n      customerId\n      mothersMaidenName\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"searchBy\": \"CIF\",\n    \"customerId\": \"10114014\"\n  },\n  \"uid\": \"10114014\",\n  \"type\": \"DEPOSITS\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Account Transactions: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Account Transactions: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Account Transactions: results array is not null or empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountTransactions.searchResults).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($cif: String!, $input: TransactionSearch) {\n  Accounts {\n    accountTransactions(cif: $cif, input: $input) {\n      searchResults {\n        accountNumberPvtEncrypt\n        accountNumber\n        accountType\n        accountStatus\n        transactionHistory {\n          transactionStatusType\n          matchedRecordsTotal\n          recordsOnThisPage\n          transactions {\n            transactionIndex\n            transactionPostingDate\n            transactionEffectiveDate\n            transactionAmountPvtEncrypt\n            transactionBalancePvtEncrypt\n            transactionCheckNumberPvtEncrypt\n            transactionDescription\n            transactionStatus\n            transactionDetailUrl\n            transactionSequenceNumber\n            memo\n            checkTransactionIndicator\n            transactionType\n            transactionCode\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9281247\",\n  \"input\": {\n    \"accountNumberPvtEncrypt\": \"ZUZoalduMVRNZFNTUjhTZxfr1nlB2PN-fIeV-KvtqZL6DW_K68vchCjv7u0RNy9DwPezm1igKJRkOhEBf3sB7g\",\n    \"dateRange\": {\n      \"fromDate\": \"2021-04-21\"\n    },\n    \"recordsToPull\": 5\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET - Stop Checks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5 seconds.\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"})",
											"",
											"pm.test(\"Expect response to have a status code of 200.\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Stop Checks result should be an Array.\", () => {",
											"    console.log(pm.response.json())",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).to.be.an(\"array\");",
											"    pm.expect(pm.response.json().data.Customer.stopChecks).length.to.be.greaterThan(0);",
											"})",
											"",
											"pm.test(\"Stop Checks result should have the appropriate data structure\", () => {",
											"    pm.response.json().data.Customer.stopChecks.forEach(stopCheck => {",
											"        pm.expect(stopCheck).to.have.all.keys('stopCheckPaymentId', 'createdDate', 'expireDate', 'amountPvtEncrypt', 'payeeName', 'reasonCode', 'checkNumberPvtEncrypt', 'beginCheckNumberPvtEncrypt', 'endCheckNumberPvtEncrypt', 'account', 'stopType', 'companyName', 'memo');",
											"",
											"        pm.expect(stopCheck.account).to.have.all.keys('accountId', 'accountNumberPvtEncrypt', 'accountNickname')",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($uid: String!, $type: String!) {\n  Customer(uid: $uid, type: $type) {\n    stopChecks {\n      stopCheckPaymentId\n      createdDate\n      expireDate\n      amountPvtEncrypt\n      payeeName\n      reasonCode\n      checkNumberPvtEncrypt\n      beginCheckNumberPvtEncrypt\n      endCheckNumberPvtEncrypt\n      account {\n        accountId\n        accountNumberPvtEncrypt\n        accountNickname\n      }\n      stopType\n      companyName\n      memo\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"9555079\",\n  \"type\": \"DEPOSITS\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Details - CDA -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Rene Osman",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19350",
											"*/",
											"",
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Make sure Account Id matches\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountIndex).to.eql(\"ZUZoalduMVRNZFNTUjhTZ-h91kq84StNX8CPfAl18J9TzESkbmIs7s5PhXBxtO8ynzEE9MBvxIPay6pFjwjaKA\");",
											"});",
											"",
											"pm.test(\"Make sure Account type is CDA\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountType).to.eql('CDA');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on CDA {\n        coverDraftRiskLevel\n        coverageAmountOptions\n        ownerNames\n        currentBalancePvtEncrypt\n        helocAvailableBalancePvtEncrypt\n        availableBalancePvtEncrypt\n        apy\n        accountStatus\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        helocCreditLimitPvtEncrypt\n        helocBalancePvtEncrypt\n        transferFromIndicator\n        transferToIndicator\n        productDescription\n        acctOpenDate\n        interestRate\n        interestWithheldYtd\n        interestWithheldLastYear\n        accountIndex\n        retirementAccountIndicator\n        interestRatePvtEncrypt\n        accountNickname\n        accountType\n        ownershipType\n        allowanceCustomerIndicator\n        allowanceCustomerReqAmount\n        accountNumberPvtEncrypt\n        consecutiveNegBalanceDays\n        productId\n        limitedTransactionsRemaining\n        allowanceCurrentAmount\n        allowanceEligibilityIndicator\n        directDepositEligibilityIndicator\n        alwaysMaxAmountIndicator\n        earlyDirectEligibilityIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9281247\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ-h91kq84StNX8CPfAl18J9TzESkbmIs7s5PhXBxtO8ynzEE9MBvxIPay6pFjwjaKA\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - CDA -2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Rene Osman",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19350",
											"*/",
											"",
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Make sure Account Id matches\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountIndex).to.eql(\"ZUZoalduMVRNZFNTUjhTZ-pz8IUTB4dun3bSgyHLOYyG12WfO4ClB9kPWyFBrdFUS9YLFGLJomMncads561NEA\");",
											"});",
											"",
											"pm.test(\"Make sure Account type is CDA\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountType).to.eql('CDA');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on CDA {\n        coverDraftRiskLevel\n        coverageAmountOptions\n        ownerNames\n        currentBalancePvtEncrypt\n        helocAvailableBalancePvtEncrypt\n        availableBalancePvtEncrypt\n        apy\n        accountStatus\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        helocCreditLimitPvtEncrypt\n        helocBalancePvtEncrypt\n        transferFromIndicator\n        transferToIndicator\n        productDescription\n        acctOpenDate\n        interestRate\n        interestWithheldYtd\n        interestWithheldLastYear\n        accountIndex\n        retirementAccountIndicator\n        interestRatePvtEncrypt\n        accountNickname\n        accountType\n        ownershipType\n        allowanceCustomerIndicator\n        allowanceCustomerReqAmount\n        accountNumberPvtEncrypt\n        consecutiveNegBalanceDays\n        productId\n        limitedTransactionsRemaining\n        allowanceCurrentAmount\n        allowanceEligibilityIndicator\n        directDepositEligibilityIndicator\n        alwaysMaxAmountIndicator\n        earlyDirectEligibilityIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9281247\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ-pz8IUTB4dun3bSgyHLOYyG12WfO4ClB9kPWyFBrdFUS9YLFGLJomMncads561NEA\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - CMG - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Rene Osman",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19350",
											"*/",
											"",
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Make sure Account Id matches\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountIndex).to.eql(\"ZUZoalduMVRNZFNTUjhTZwvt4yAzVdEoiyn1120uRFxvC1p5BTWPxRzvRzETKFqnJgAXHYySMg9almWhXs45Iw\");",
											"});",
											"",
											"pm.test(\"Make sure Account type is CMG\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountType).to.eql('CMG');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Accounts($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on CDA {\n        coverDraftRiskLevel\n        coverageAmountOptions\n        ownerNames\n        currentBalancePvtEncrypt\n        helocAvailableBalancePvtEncrypt\n        availableBalancePvtEncrypt\n        apy\n        accountStatus\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        helocCreditLimitPvtEncrypt\n        helocBalancePvtEncrypt\n        transferFromIndicator\n        transferToIndicator\n        productDescription\n        acctOpenDate\n        interestRate\n        interestWithheldYtd\n        interestWithheldLastYear\n        accountIndex\n        retirementAccountIndicator\n        interestRatePvtEncrypt\n        accountNickname\n        accountType\n        ownershipType\n        allowanceCustomerIndicator\n        allowanceCustomerReqAmount\n        accountNumberPvtEncrypt\n        consecutiveNegBalanceDays\n        productId\n        limitedTransactionsRemaining\n        allowanceCurrentAmount\n        allowanceEligibilityIndicator\n        directDepositEligibilityIndicator\n        alwaysMaxAmountIndicator\n        earlyDirectEligibilityIndicator\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9281247\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZwvt4yAzVdEoiyn1120uRFxvC1p5BTWPxRzvRzETKFqnJgAXHYySMg9almWhXs45Iw\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - Others - 1 - SDA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Rene Osman",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19350",
											"*/",
											"",
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Make sure Account Id matches\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountIndex).to.eql(\"ZUZoalduMVRNZFNTUjhTZ1fsCI8_9fy8T9pJe2dGo3avkaVUHTsw8xXNqT6vdJud6O_QYN10Er5vhPTRl9TtlQ\");",
											"});",
											"",
											"pm.test(\"Make sure Account type is SDA\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountType).to.eql('SDA');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n        uuid\n        coverDraftRiskLevel\n        otsAccounts {\n          otsAccountPriority\n          otsAccountNumberPvtEncrypt\n          otsAccountNickname\n          otsAvailableBalancePvtEncrypt\n          otsAccountType\n          otsAccountId\n        }\n        accountStatus\n        currentBalancePvtEncrypt\n        apy\n        availableBalancePvtEncrypt\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        limitedTransactionsRemaining\n        transferFromIndicator\n        transferToIndicator\n        accountIndex\n        interestRatePvtEncrypt\n        acctOpenDate\n        productDescription\n        interestRate\n        beneficiaries {\n          firstName\n          lastName\n          middleName\n          beneficiaryName\n          allocationPercentage\n          dateOfBirth\n          beneficiaryId\n          beneficiaryClassificationCode\n          address {\n            country\n            city\n            addressLine1\n            addressLine2\n            zipCode\n            postAddressId\n            state\n          }\n        }\n        interestWithheldYtd\n        interestWithheldLastYear\n        nextStatementDate\n        accountNickname\n        productId\n        accountNumberPvtEncrypt\n        accountType\n        allowanceCustomerReqAmount\n        consecutiveNegBalanceDays\n        allowanceCurrentAmount\n        ownershipType\n        allowanceEligibilityIndicator\n        allowanceCustomerIndicator\n        originationLocation\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9281247\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ1fsCI8_9fy8T9pJe2dGo3avkaVUHTsw8xXNqT6vdJud6O_QYN10Er5vhPTRl9TtlQ\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Account Details - Others - 2 - IRA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"* @Author: Rene Osman",
											"* @JIRA Ticket: https://jira.int.ally.com/browse/OC-19350",
											"*/",
											"",
											"pm.test(\"getUidsByGuid: Status code 200\", function () {",
											"    console.log('Status code: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Make sure Account Id matches\", function () {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountIndex).to.eql(\"ZUZoalduMVRNZFNTUjhTZ7PQJ2q06KtcVotbX6e3nWaF0mjVWHGjnu2DxT8RZ-w0kR2cOUiDns-7HGOTg16HWg\");",
											"});",
											"",
											"pm.test(\"Make sure Account type is IRA\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Accounts.accountDetails.accountType).to.eql('IRA Online');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query AccountDetails($cif: String!, $accountId: String!) {\n  Accounts {\n    accountDetails(cif: $cif, accountId: $accountId) {\n      ... on DdaMmaSda {\n        ownerNames\n        type\n        uuid\n        coverDraftRiskLevel\n        otsAccounts {\n          otsAccountPriority\n          otsAccountNumberPvtEncrypt\n          otsAccountNickname\n          otsAvailableBalancePvtEncrypt\n          otsAccountType\n          otsAccountId\n        }\n        accountStatus\n        currentBalancePvtEncrypt\n        apy\n        availableBalancePvtEncrypt\n        interestPriorYear\n        interestYtd\n        dailyInterestAccrued\n        limitedTransactionsRemaining\n        transferFromIndicator\n        transferToIndicator\n        accountIndex\n        interestRatePvtEncrypt\n        acctOpenDate\n        productDescription\n        interestRate\n        beneficiaries {\n          firstName\n          lastName\n          middleName\n          beneficiaryName\n          allocationPercentage\n          dateOfBirth\n          beneficiaryId\n          beneficiaryClassificationCode\n          address {\n            country\n            city\n            addressLine1\n            addressLine2\n            zipCode\n            postAddressId\n            state\n          }\n        }\n        interestWithheldYtd\n        interestWithheldLastYear\n        nextStatementDate\n        accountNickname\n        productId\n        accountNumberPvtEncrypt\n        accountType\n        allowanceCustomerReqAmount\n        consecutiveNegBalanceDays\n        allowanceCurrentAmount\n        ownershipType\n        allowanceEligibilityIndicator\n        allowanceCustomerIndicator\n        originationLocation\n      }\n    }\n  }\n}",
										"variables": "{\n  \"cif\": \"9281247\",\n  \"accountId\": \"ZUZoalduMVRNZFNTUjhTZ7PQJ2q06KtcVotbX6e3nWaF0mjVWHGjnu2DxT8RZ-w0kR2cOUiDns-7HGOTg16HWg\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								},
								"description": "This query returns all the fields of account types DDA, MMA, and SDA. These accounts have essentially the same data shape, so they have been combined into one type. The query for a CDA Account is listed below."
							},
							"response": []
						},
						{
							"name": "Credentials Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Search Credentials: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Search Credentials: Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Search Credentials: value is not empty \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.searchCredentials.results).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customers($zid: String!, $input: SearchCredentialsInput) {\n  Customer {\n    searchCredentials(zid: $zid, input: $input) {\n      results {\n        firstName\n        mortgageId\n      }\n    }\n  }\n}",
										"variables": "{\n  \"zid\": \"JZL29C\",\n  \"input\": {\n    \"role\": \"agent\",\n    \"loginId\": \"racers_edd1\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset MFA Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reset MFA Status: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Reset MFA Status: Rseponse should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer).to.have.all.keys(\"resetMFAStatus\");",
											"});",
											"pm.test(\"Reset MFA Status: Response should return resetMFAStatus object\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											" pm.expect(jsonData.data.Customer.resetMFAStatus).to.be.an(\"boolean\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($cupid: String!, $userSessionId: String!, $traceId: String!, $input: MFAStatus!) {\n  Customer {\n    resetMFAStatus(cupid: $cupid, userSessionId: $userSessionId, traceId: $traceId, input: $input)\n  }\n}",
										"variables": "{\n  \"cupid\": \"48089965847650179003990129677411\",\n  \"userSessionId\": \"kzh9x7\",\n  \"traceId\": \"test\",\n  \"input\": {\n    \"mfaStatus\": \"unverified\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Reset Password: Status code 200\", function () {",
											"    console.log('Status code is: ', pm.response.code);",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($cupid: String!) {\n  Customer {\n    resetCredentials(cupid: $cupid)\n  }\n}",
										"variables": "{\n  \"cupid\": \"48089965847650179003990129677411\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"** On o6/30/2022, VYerravally marked these tests to be skipped as we need to chain the tests with ",
											"** create credentials.",
											"**",
											"**",
											"*/",
											"pm.test(\"Delete Credentials - Successful; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Delete Credentials - Successful; Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Delete Credentials - Successful; value is true \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.deleteCredentials.customerCredentialsDeleted).to.eql(true);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "test",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($uid: String!, $type: String!, $userSessionId: String!, $cupid: String!) {\n  Customer(uid: $uid, type: $type) {\n    deleteCredentials(userSessionId: $userSessionId, cupid: $cupid) {\n      customerCredentialsDeleted\n    }\n  }\n}",
										"variables": "{\n  \"uid\": \"9281247\",\n  \"type\": \"CIF\",\n  \"userSessionId\": \"kzh9x7\",\n  \"cupid\": \"48089965847650179003990129677411\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Create Credentials: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Create Credentials: Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test.skip(\"Create Credentials: value is true \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.Customer.createCredentials.customerCredentialsCreated).to.be.an(\"boolean\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "kzh9x7",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query CreateCredentials($userSessionId: String!, $traceId: String!, $input: createCreds!) {\n  Customer {\n    createCredentials(userSessionId: $userSessionId, traceId: $traceId, input: $input) {\n      customerCredentialsCreated\n      error\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"loginId\": \"sfe2e01\",\n    \"cif\": \"9281247\"\n  },\n  \"traceId\": \"test\",\n  \"userSessionId\": \"kzh9x7\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credential Blocks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update Credential Blocks: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Update Credential Blocks: Response should return required fields\", function () {",
											"    var jsonData = pm.response.json();",
											"   // console.log(jsonData);",
											"    pm.expect(jsonData.data.Customer).to.have.all.keys(\"updateCredentialBlocks\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Customer($uid: String!, $type: String!, $cupid: String!, $input: CustomerCredentialBlocks!) {\n  Customer(uid: $uid, type: $type) {\n    updateCredentialBlocks(cupid: $cupid, input: $input)\n  }\n}",
										"variables": "{\n  \"uid\": \"null\",\n  \"type\": \"null\",\n  \"cupid\": \"48089965847650179003990129677411\",\n  \"input\": {\n    \"onlineAccessStatus\": \"active\",\n    \"passwordStatus\": \"active\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "OptimizePrime",
					"item": [
						{
							"name": "Household Wealth Asset Summary - MTD Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Wealth Asset Summary - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Wealth Asset Summary - Response time is less than 20 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(20000);",
											"})",
											"",
											"pm.test(\"Household Wealth Asset Summary - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { householdAssetSummary }}}} = pm.response.json();",
											"",
											"    pm.expect(householdAssetSummary).to.have.any.keys([",
											"        'sessionId',",
											"        'asOfDate',",
											"        'dataLastUpdated',",
											"        'calculations'",
											"    ])",
											"",
											"    householdAssetSummary.calculations.forEach(calc => {",
											"        pm.expect(calc).to.have.any.keys([",
											"            'type',",
											"            'id',",
											"            'units',",
											"            'value',",
											"            'formattedUnits',",
											"            'formattedPrice',",
											"            'formattedValue',",
											"            'startDate', ",
											"            'endDate',",
											"            'calculations'",
											"        ])",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String, $timeFrame: String) {\n  Accounts {\n    Wealth {\n      householdAssetSummary(clientId: $clientId, timeFrame: $timeFrame) {\n        sessionId\n        asOfDate\n        dataLastUpdated\n        calculations {\n          type\n          id\n          units\n          value\n          formattedUnits\n          formattedPrice\n          formattedValue\n          startDate\n          endDate\n          calculations {\n            type\n            entity\n            entityId\n            name\n            inceptionDate\n            color\n            calculations {\n              type\n              id\n              calculatedPerformanceOptionId\n              performance\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\",\n  \"timeFrame\": \"MTD\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Household Performance Success Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Household Performance - Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Household Performance - Response time is less than 30 seconds\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(30000);",
											"})",
											"",
											"pm.test(\"Household Performance - Return object is correct structure.\", () => {",
											"    const { data: { Accounts: { Wealth: { wealthPerformance }}}} = pm.response.json();",
											"",
											"    pm.expect(wealthPerformance).to.be.length(4);",
											"    ",
											"    wealthPerformance.forEach(wealth => {",
											"        pm.expect(wealth).to.have.any.keys([",
											"            'label',",
											"            'value'",
											"        ])",
											"        pm.expect(wealth.label).to.be.a(\"string\")",
											"        pm.expect(wealth.value).to.be.a(\"string\")",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ZID",
										"value": "DZM8ZS",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($clientId: String!) {\n  Accounts {\n    Wealth {\n      wealthPerformance(clientId: $clientId) {\n        label\n        value\n      }\n    }\n  }\n}",
										"variables": "{\n  \"clientId\": \"529\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Account Details - Success Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Account Details - Success; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Account Details - Success; Test for proper data structure on results\", function() {",
											"    ",
											"    const { data } = pm.response.json();",
											"",
											"",
											"    pm.expect(data).to.have.all.keys([\"Accounts\"]);",
											"    pm.expect(data.Accounts.Wealth).to.have.all.keys([\"wealthAccountDetails\"]);",
											"",
											"   ",
											" ",
											"        pm.expect(data.Accounts.Wealth.wealthAccountDetails).to.have.all.keys([\"isActive\",",
											"                \"custodian\",",
											"                \"custodianCode\",",
											"                \"managementStyle\",",
											"                \"currentValue\",",
											"                \"fundFamily\",",
											"                \"accountStartValue\",",
											"                \"createdDate\",",
											"                \"isManaged\",",
											"                \"isSweepAccount\",",
											"                \"isSleeveAccount\",",
											"                \"isAdvReportable\",",
											"                \"is13FReportable\",",
											"                \"isAuaReportable\",",
											"                \"advCustodyTypeId\",",
											"                \"custodialRepCode\",",
											"                \"brokerDealer\",",
											"                \"importKey\",",
											"                \"outsideId\",",
											"                \"managementStyleId\",",
											"                \"fundFamilyId\",",
											"                \"registrationId\",",
											"                \"clientId\",",
											"                \"custodianId\",",
											"                \"shareClass\",",
											"                \"shareClassId\",",
											"                \"isOriginalSMCAccount\",",
											"                \"isTradingBlocked\",",
											"                \"createdBy\",",
											"                \"accountStartDate\",",
											"                \"editedBy\",",
											"                \"editedDate\",",
											"                \"accountStatusId\",",
											"                \"accountStatus\",",
											"                \"accountStatusDescription\",",
											"                \"feeScheduleId\",",
											"                \"feeSchedule\",",
											"                \"masterPayoutScheduleId\",",
											"                \"masterPayoutSchedule\",",
											"                \"billFrequency\",",
											"                \"representative\",",
											"                \"representativeNumber\",",
											"                \"household\",",
											"                \"riskBudget\",",
											"                \"modelAggId\",",
											"                \"billPayMethod\",",
											"                \"acceptsList\",",
											"                \"sweepAssetId\",",
											"                \"includeInAggregate\",",
											"                \"isDiscretionary\",",
											"                \"cashBalance\",",
											"                \"isQualified\",",
											"                \"isWrapManaged\",",
											"                \"isWrapSponsored\",",
											"                \"lastName\",",
											"                \"isPositionOnlyRecon\",",
											"                \"eclipseFirmId\",",
											"                \"isBundled\",",
											"                \"isExcludedFromFirmAssets\",",
											"                \"annuityIncomeValue\",",
											"                \"tieredFeePriority\",",
											"                \"isOps\",",
											"                \"lastPositionDate\",",
											"                \"inBalance\",",
											"                \"id\",",
											"                \"name\",",
											"                \"number\",",
											"                \"modelName\",",
											"                \"accountType\",",
											"                \"udf7HISTORICA\"",
											"            ]);",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Query($accountNumber: String!) {\n  Accounts {\n    Wealth {\n      wealthAccountDetails(accountNumber: $accountNumber) {\n        isActive\n        custodian\n        custodianCode\n        managementStyle\n        currentValue\n        fundFamily\n        accountStartValue\n        createdDate\n        isManaged\n        isSweepAccount\n        isSleeveAccount\n        isAdvReportable\n        is13FReportable\n        isAuaReportable\n        advCustodyTypeId\n        custodialRepCode\n        brokerDealer\n        importKey\n        outsideId\n        managementStyleId\n        fundFamilyId\n        registrationId\n        clientId\n        custodianId\n        shareClass\n        shareClassId\n        isOriginalSMCAccount\n        isTradingBlocked\n        createdBy\n        accountStartDate\n        editedBy\n        editedDate\n        accountStatusId\n        accountStatus\n        accountStatusDescription\n        feeScheduleId\n        feeSchedule\n        masterPayoutScheduleId\n        masterPayoutSchedule\n        billFrequency\n        representative\n        representativeNumber\n        household\n        riskBudget\n        modelAggId\n        billPayMethod\n        acceptsList\n        sweepAssetId\n        includeInAggregate\n        isDiscretionary\n        cashBalance\n        isQualified\n        isWrapManaged\n        isWrapSponsored\n        lastName\n        isPositionOnlyRecon\n        eclipseFirmId\n        isBundled\n        isExcludedFromFirmAssets\n        annuityIncomeValue\n        tieredFeePriority\n        isOps\n        lastPositionDate\n        inBalance\n        id\n        name\n        number\n        modelName\n        accountType\n        udf7HISTORICA\n      }\n    }\n  }\n}",
										"variables": "{\n  \"accountNumber\": \"2FG05436\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wealth Assets - Success Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wealth Assets - Success; Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Wealth Assets - Success; Test for proper data structure on results\", function() {",
											"    ",
											"    const { data } = pm.response.json();",
											"",
											"console.log(data);",
											"",
											"   pm.expect(data).to.have.any.keys([\"Accounts\"]);",
											"    pm.expect(data.Accounts.Wealth).to.have.any.keys([\"wealthAssets\"]);",
											"",
											"   ",
											"     data.Accounts.Wealth.wealthAssets.forEach(asset => {",
											"        pm.expect(asset).to.have.all.keys([\"name\",",
											"                    \"accountNumber\",",
											"                    \"ticker\",",
											"                    \"currentShares\",",
											"                    \"currentValue\",",
											"                    \"currentPrice\",",
											"                    \"isManaged\",",
											"                    \"assetClass\",",
											"                    \"productCategory\",",
											"                    \"productCategoryAbbreviation\",",
											"                    \"isCustodialCash\",",
											"                    \"productId\",",
											"                    \"status\",",
											"                    \"isStrategyOverride\",",
											"                    \"createdBy\",",
											"                    \"createdDate\",",
											"                    \"editedBy\",",
											"                    \"editedDate\",",
											"                    \"accountId\",",
											"                    \"registrationId\",",
											"                    \"clientId\",",
											"                    \"isActive\",",
											"                    \"downloadSymbol\",",
											"                    \"accountType\",",
											"                    \"fundFamily\",",
											"                    \"custodian\",",
											"                    \"registrationName\",",
											"                    \"managementStyle\",",
											"                    \"productType\",",
											"                    \"productSubType\",",
											"                    \"isGlobalExcluded\",",
											"                    \"isFeeExcluded\",",
											"                    \"excludeAmount\",",
											"                    \"isRebalance\",",
											"                    \"isAdvisorOnly\",",
											"                    \"isAdvReportable\",",
											"                    \"is13FReportable\",",
											"                    \"assetPercentOfAccount\",",
											"                    \"householdName\",",
											"                    \"riskCategory\",",
											"                    \"modelName\",",
											"                    \"id\"]);",
											"})",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "zid",
										"value": "rz28v6",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query WealthAssets($orionAccountId: String!) {\n  Accounts {\n    Wealth {\n      wealthAssets(orionAccountId: $orionAccountId) {\n        name\n        accountNumber\n        ticker\n        currentShares\n        currentValue\n        currentPrice\n        isManaged\n        assetClass\n        productCategory\n        productCategoryAbbreviation\n        isCustodialCash\n        productId\n        status\n        isStrategyOverride\n        createdBy\n        createdDate\n        editedBy\n        editedDate\n        accountId\n        registrationId\n        clientId\n        isActive\n        downloadSymbol\n        accountType\n        fundFamily\n        custodian\n        registrationName\n        managementStyle\n        productType\n        productSubType\n        isGlobalExcluded\n        isFeeExcluded\n        excludeAmount\n        isRebalance\n        isAdvisorOnly\n        isAdvReportable\n        is13FReportable\n        assetPercentOfAccount\n        householdName\n        riskCategory\n        modelName\n        id\n      }\n    }\n  }\n}",
										"variables": "{\n  \"orionAccountId\": \"2064\"\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Alert Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Post Alerts: Request should take less than 5s\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);",
											"})",
											"",
											"pm.test(\"Post Alerts: Response Status should be 200\", () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Post Alerts: Check Response Structure\", () => {",
											"    const { data: { customerAlert } } = pm.response.json();",
											"    pm.expect(customerAlert).to.have.keys(['message', 'correlationId']);",
											"    pm.expect(customerAlert).to.have.property(\"message\", \"Alert Triggers Accepted\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "zid",
										"value": "dzm8zs",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Mutation($input: [customerAlertInput]) {\n  customerAlert(input: $input) {\n    message\n    correlationId\n  }\n}",
										"variables": "{\n  \"input\": [\n    {\n        \"itemNumber\": 2,\n        \"alertCode\": \"wealth-schedule-appointment\",\n        \"version\": \"1\",\n        \"alertBody\": {\n            \"customerId\": \"564\",\n            \"advisorName\": \"John Tylor\",\n            \"advisorPhoneNumber\": \"980-226-7822\",\n            \"advisorEmailAddress\": \"John.tylor@ally.com\",\n            \"planReviewFrequency\": \"Annual\"\n      }\n    }\n  ]\n}"
									}
								},
								"url": {
									"raw": "{{base_url}}{{path}}",
									"host": [
										"{{base_url}}{{path}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "E2E Genesys STRATA Integration Tests",
			"item": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accountBalanceCurrent",
			"value": ""
		},
		{
			"key": "accountIDBal",
			"value": ""
		},
		{
			"key": "accountId",
			"value": "",
			"type": "string"
		},
		{
			"key": "CIF",
			"value": "",
			"disabled": true
		},
		{
			"key": "accountType",
			"value": "",
			"type": "string"
		},
		{
			"key": "conversationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "productType",
			"value": "",
			"type": "string"
		},
		{
			"key": "ciamToken",
			"value": "ciamToken",
			"disabled": true
		},
		{
			"key": "ciamToken",
			"value": "ciamToken"
		},
		{
			"key": "token",
			"value": "Bearer PXkcujcOy4G9x7HcAmUz7DevuONh"
		},
		{
			"key": "CIF",
			"value": ""
		}
	]
}